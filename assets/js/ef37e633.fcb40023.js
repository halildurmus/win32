"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["3409"],{8906:function(n,e,t){t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var i=t(7983),a=t(5893),s=t(65);let r={title:"Building a Task Manager App in Flutter with win32",description:"We'll build a Task Manager app to manage running Windows tasks in Flutter using the win32 package.",slug:"building-task-manager-app",authors:"halildurmus",tags:["win32","flutter","tutorial"],image:"https://ik.imagekit.io/npajaqrcn/blog/2024-07-16-building-task-manager-app/social.png",hide_table_of_contents:!1},o=void 0,l={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"Feature Overview",id:"feature-overview",level:2},{value:"Setting Up the Project",id:"setting-up-the-project",level:2},{value:"Creating a New Flutter Project",id:"creating-a-new-flutter-project",level:3},{value:"Installing Dependencies",id:"installing-dependencies",level:3},{value:"Defining the Models",id:"defining-the-models",level:2},{value:"Implementing Task Manager Logic",id:"implementing-task-manager-logic",level:2},{value:"Running a New Task",id:"running-a-new-task",level:3},{value:"Enumerating Running Tasks",id:"enumerating-running-tasks",level:3},{value:"Retrieving File Description",id:"retrieving-file-description",level:4},{value:"Extracting Task Icon",id:"extracting-task-icon",level:4},{value:"Terminating a Task",id:"terminating-a-task",level:3},{value:"Building the UI",id:"building-the-ui",level:2},{value:"Setting Up the Main Entry Point",id:"setting-up-the-main-entry-point",level:3},{value:"Creating the Home Screen Skeleton",id:"creating-the-home-screen-skeleton",level:3},{value:"Loading and Displaying Tasks",id:"loading-and-displaying-tasks",level:3},{value:"Task Sorting, Searching, and Refreshing",id:"task-sorting-searching-and-refreshing",level:3},{value:"Task Termination",id:"task-termination",level:3},{value:"Task Creation",id:"task-creation",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Source Code",id:"source-code",level:2}];function c(n){let e={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...n.components},{CommonViewSourceCode:i}=e;return i||function(n,e){throw Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("CommonViewSourceCode",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"Task Manager App",src:t(3920).Z+"",width:"2336",height:"1472"})}),"\n",(0,a.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(e.p,{children:["In this blog post, we will build a Task Manager app in Flutter using the\n",(0,a.jsx)(e.strong,{children:"win32"})," package. By utilizing the Windows APIs provided by ",(0,a.jsx)(e.strong,{children:"win32"}),", we'll\ncreate an intuitive app to ",(0,a.jsx)(e.strong,{children:"view"})," and ",(0,a.jsx)(e.strong,{children:"manage"})," running tasks on a Windows\nsystem."]}),"\n",(0,a.jsx)(e.p,{children:"Whether you're a developer looking to enhance your Flutter skills or an\nenthusiast eager to dive into Windows programming, this guide will walk you\nthrough the process of creating your own Task Manager app from scratch."}),"\n",(0,a.jsx)(e.p,{children:"Here's what we'll cover:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#feature-overview",children:"Feature Overview"})}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#setting-up-the-project",children:"Setting Up the Project"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#creating-a-new-flutter-project",children:"Creating a New Flutter Project"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#installing-dependencies",children:"Installing Dependencies"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#defining-the-models",children:"Defining the Models"})}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#implementing-task-manager-logic",children:"Implementing Task Manager Logic"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#running-a-new-task",children:"Running a New Task"})}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#enumerating-running-tasks",children:"Enumerating Running Tasks"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#retrieving-file-description",children:"Retrieving File Description"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#extracting-task-icon",children:"Extracting Task Icon"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#terminating-a-task",children:"Terminating a Task"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"#building-the-ui",children:"Building the UI"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#setting-up-the-main-entry-point",children:"Setting Up the Main Entry Point"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#creating-the-home-screen-skeleton",children:"Creating the Home Screen Skeleton"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#loading-and-displaying-tasks",children:"Loading and Displaying Tasks"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#task-sorting-searching-and-refreshing",children:"Task Sorting, Searching, and Refreshing"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#task-termination",children:"Task Termination"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#task-creation",children:"Task Creation"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#conclusion",children:"Conclusion"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"#source-code",children:"Source Code"})}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"feature-overview",children:"Feature Overview"}),"\n",(0,a.jsx)(e.p,{children:"Our Task Manager app will include the following key features:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Enumerating running tasks:"})," View a list of running tasks, including their\nnames, PIDs, and descriptions."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Searching and sorting tasks:"})," Search and sort tasks based on their name,\nPID, or description."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Starting a new task:"})," Start a new task by specifying its executable path\ndirectly within the app."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Terminating a task:"})," Terminate a running task by clicking the button next\nto the task."]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"setting-up-the-project",children:"Setting Up the Project"}),"\n",(0,a.jsx)(e.p,{children:"Before we dive into coding, let\u2019s set up our project."}),"\n",(0,a.jsx)(e.h3,{id:"creating-a-new-flutter-project",children:"Creating a New Flutter Project"}),"\n",(0,a.jsx)(e.p,{children:"Open your terminal and run:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cmd",children:"> flutter create task_manager --platforms=windows\n> cd task_manager\n"})}),"\n",(0,a.jsx)(e.h3,{id:"installing-dependencies",children:"Installing Dependencies"}),"\n",(0,a.jsxs)(e.p,{children:["Add the ",(0,a.jsx)(e.strong,{children:"ffi"})," and ",(0,a.jsx)(e.strong,{children:"win32"})," packages to your project with:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cmd",metastring:'title="Terminal"',children:"flutter pub add ffi win32\n"})}),"\n",(0,a.jsx)(e.h2,{id:"defining-the-models",children:"Defining the Models"}),"\n",(0,a.jsxs)(e.p,{children:["We'll start by defining the models responsible for storing ",(0,a.jsx)(e.strong,{children:"task information"}),"\nand ",(0,a.jsx)(e.strong,{children:"sorting options"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["Create a new file named ",(0,a.jsx)(e.code,{children:"models.dart"})," in the ",(0,a.jsx)(e.code,{children:"lib\\src"})," directory and add the\nfollowing code:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="models.dart"',children:"import 'dart:typed_data';\n\n/// Specifies the field by which to sort the tasks.\nenum SortBy {\n  /// Sort by task name.\n  name,\n\n  /// Sort by task PID (Process ID).\n  pid,\n\n  /// Sort by task description.\n  description,\n}\n\n/// Specifies the order in which to sort the tasks.\nenum SortOrder {\n  /// Sort in ascending order.\n  ascending,\n\n  /// Sort in descending order.\n  descending,\n}\n\n/// A Windows task with its icon, name, PID, and description.\nclass Task {\n  const Task({\n    required this.iconAsBytes,\n    required this.name,\n    required this.pid,\n    required this.description,\n  });\n\n  /// The icon of the task.\n  final Uint8List iconAsBytes;\n\n  /// The name of the task.\n  final String name;\n\n  /// The PID (Process ID) of the task.\n  final int pid;\n\n  /// The description of the task.\n  final String description;\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"implementing-task-manager-logic",children:"Implementing Task Manager Logic"}),"\n",(0,a.jsx)(e.p,{children:"Next, we'll implement the functionality for managing Windows tasks, including\nenumerating running tasks, starting new tasks, and terminating tasks."}),"\n",(0,a.jsxs)(e.p,{children:["Create a new file named ",(0,a.jsx)(e.code,{children:"task_manager.dart"})," in the ",(0,a.jsx)(e.code,{children:"lib\\src"})," directory and\nadd the following code to set up the skeleton for managing Windows tasks:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="task_manager.dart"',children:"import 'dart:ffi';\nimport 'dart:typed_data';\n\nimport 'package:ffi/ffi.dart';\nimport 'package:win32/win32.dart';\n\nimport 'models.dart';\n\n/// Provides functionality for managing Windows tasks, including:\n/// - Enumerating running tasks\n/// - Running a new task\n/// - Terminating a running task\nabstract class TaskManager {\n  /// Runs a new task from the specified [path].\n  ///\n  /// Returns `true` if the task was successfully started; otherwise, `false`.\n  static bool run(String path) {\n    // TODO: Implement this method\n    throw UnimplementedError();\n  }\n\n  /// Retrieves a list of currently running tasks.\n  ///\n  /// Returns `null` if retrieval failed.\n  static List<Task>? get tasks {\n    // TODO: Implement this method\n    throw UnimplementedError();\n  }\n\n  /// Terminates a running task with the given [pid].\n  ///\n  /// Returns `true` if the task was successfully terminated; otherwise,\n  /// `false`.\n  static bool terminate(int pid) {\n    // TODO: Implement this method\n    throw UnimplementedError();\n  }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"With the skeleton in place, we can start implementing the task manager logic."}),"\n",(0,a.jsx)(e.h3,{id:"running-a-new-task",children:"Running a New Task"}),"\n",(0,a.jsxs)(e.p,{children:["Now, let's implement the ",(0,a.jsx)(e.code,{children:"run"})," function to ",(0,a.jsx)(e.strong,{children:"run a new task"}),"."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="task_manager.dart"',children:"/// Runs a new task from the specified [path].\n///\n/// Returns `true` if the task was successfully started; otherwise, `false`.\nstatic bool run(String path) {\n  final lpFile = path.toNativeUtf16();\n  final result = ShellExecute(\n    0,\n    'open'.toNativeUtf16(),\n    lpFile,\n    nullptr,\n    nullptr,\n    SW_SHOWNORMAL,\n  );\n  free(lpFile);\n  return result > 32;\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["We first convert the provided file path into a native UTF-16 format using the\n",(0,a.jsx)(e.code,{children:"toNativeUtf16"})," extension method from ",(0,a.jsx)(e.code,{children:"package:ffi"}),". This formatted path is then\npassed along with other necessary parameters to ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/shellapi/nf-shellapi-shellexecutew",children:"ShellExecute"}),", specifying an\naction to open the file and dictate how the new process window should appear."]}),"\n",(0,a.jsxs)(e.p,{children:["After executing the function, we free the allocated memory for the path to\nensure efficient resource management. If the value returned by ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/shellapi/nf-shellapi-shellexecutew",children:"ShellExecute"})," is\ngreater than ",(0,a.jsx)(e.strong,{children:"32"}),", it indicates a ",(0,a.jsx)(e.em,{children:"successful"})," task launch, and the function\nreturns ",(0,a.jsx)(e.code,{children:"true"}),". Otherwise, it returns ",(0,a.jsx)(e.code,{children:"false"}),"."]}),"\n",(0,a.jsx)(e.h3,{id:"enumerating-running-tasks",children:"Enumerating Running Tasks"}),"\n",(0,a.jsxs)(e.p,{children:["Next, we'll implement the ",(0,a.jsx)(e.code,{children:"tasks"})," getter to ",(0,a.jsx)(e.strong,{children:"enumerate all running tasks"})," on\nthe system."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="task_manager.dart"',children:"/// Retrieves a list of currently running tasks.\n///\n/// Returns `null` if retrieval failed.\nstatic List<Task>? get tasks {\n  return using((arena) {\n    final tasks = <Task>[];\n\n    final buffer = arena<Uint32>(1024);\n    final cbNeeded = arena<Uint32>();\n\n    if (EnumProcesses(buffer, sizeOf<Uint32>() * 1024, cbNeeded) == FALSE) {\n      return null;\n    }\n\n    final processCount = cbNeeded.value ~/ sizeOf<Uint32>();\n    final processIds = buffer.asTypedList(processCount);\n\n    for (final pid in processIds) {\n      final hProcess = OpenProcess(\n        PROCESS_QUERY_INFORMATION | PROCESS_VM_READ,\n        FALSE,\n        pid,\n      );\n\n      if (hProcess != NULL) {\n        final hModule = arena<HMODULE>();\n        final cbNeededMod = arena<Uint32>();\n\n        if (EnumProcessModules(\n                hProcess, hModule, sizeOf<HMODULE>(), cbNeededMod) !=\n            0) {\n          final moduleName = arena<WCHAR>(MAX_PATH).cast<Utf16>();\n\n          if (GetModuleBaseName(\n                hProcess,\n                hModule.value,\n                moduleName,\n                MAX_PATH,\n              ) >\n              0) {\n            final name = moduleName.toDartString();\n\n            final filePath = arena<WCHAR>(MAX_PATH).cast<Utf16>();\n            final result = GetModuleFileNameEx(\n                hProcess, hModule.value, filePath, MAX_PATH);\n            final path = result != 0 ? filePath.toDartString() : null;\n\n            final description =\n                path != null ? (_getFileDescription(path) ?? name) : name;\n\n            final task = Task(\n              iconAsBytes: path != null\n                  ? (_extractIcon(path) ?? Uint8List(0))\n                  : Uint8List(0),\n              name: name,\n              pid: pid,\n              description: description,\n            );\n            tasks.add(task);\n          }\n        }\n\n        CloseHandle(hProcess);\n      }\n    }\n\n    return tasks;\n  });\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["We begin by allocating memory for an array of ",(0,a.jsx)(e.code,{children:"Uint32"})," values to store the PIDs\nof running processes. We then call ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/psapi/nf-psapi-enumprocesses",children:"EnumProcesses"})," to retrieve the list of PIDs\nand the number of processes."]}),"\n",(0,a.jsxs)(e.p,{children:["Next, we iterate over the list of PIDs and open a handle to each process using\n",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess",children:"OpenProcess"}),". We then call ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/psapi/nf-psapi-enumprocessmodules",children:"EnumProcessModules"})," to retrieve the module handle\nfor the process and ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/psapi/nf-psapi-getmodulebasenamew",children:"GetModuleBaseName"})," to retrieve the name of the module."]}),"\n",(0,a.jsxs)(e.p,{children:["Next, we retrieve the file path of the module using ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/psapi/nf-psapi-getmodulefilenameexw",children:"GetModuleFileNameEx"})," and\nextract the file description using the ",(0,a.jsx)(e.code,{children:"_getFileDescription"})," function. We also\nextract the icon of the task using the ",(0,a.jsx)(e.code,{children:"_extractIcon"})," function. Finally, we\ncreate a ",(0,a.jsx)(e.code,{children:"Task"})," object with the retrieved information and add it to the list of\ntasks."]}),"\n",(0,a.jsx)(e.h4,{id:"retrieving-file-description",children:"Retrieving File Description"}),"\n",(0,a.jsxs)(e.p,{children:["Next, we'll implement the ",(0,a.jsx)(e.code,{children:"_getFileDescription"})," function to retrieve the file\ndescription."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="task_manager.dart"',children:"static String? _getFileDescription(String path) {\n  return using((arena) {\n    final lptstrFileName = path.toNativeUtf16(allocator: arena);\n    final handle = arena<Uint32>();\n    final size = GetFileVersionInfoSize(lptstrFileName, handle);\n    if (size == 0) return null;\n\n    final versionInfo = arena<Uint8>(size);\n    if (GetFileVersionInfo(lptstrFileName, 0, size, versionInfo) == FALSE) {\n      return null;\n    }\n\n    final lplpBuffer = arena<Pointer<Utf16>>();\n    final puLen = arena<Uint32>();\n\n    if (VerQueryValue(\n          versionInfo,\n          r'\\StringFileInfo\\040904b0\\FileDescription'\n              .toNativeUtf16(allocator: arena),\n          lplpBuffer.cast(),\n          puLen,\n        ) ==\n        FALSE) {\n      return null;\n    }\n\n    if (puLen.value == 0) return null;\n\n    return lplpBuffer.value.toDartString();\n  });\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["We first convert the provided file path into a native UTF-16 format using the\n",(0,a.jsx)(e.code,{children:"toNativeUtf16"})," extension method from ",(0,a.jsx)(e.code,{children:"package:ffi"}),". This formatted path is then\npassed to ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/winver/nf-winver-getfileversioninfosizew",children:"GetFileVersionInfoSize"})," to retrieve the size of the version\ninformation block for the specified file."]}),"\n",(0,a.jsxs)(e.p,{children:["Next, we allocate memory for the version information block and call\n",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/winver/nf-winver-getfileversioninfow",children:"GetFileVersionInfo"})," to retrieve the version information for the file."]}),"\n",(0,a.jsxs)(e.p,{children:["We then use ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/winver/nf-winver-verqueryvaluew",children:"VerQueryValue"})," to retrieve the file description from the version\ninformation block. If the value is ",(0,a.jsx)(e.code,{children:"0"}),", the function returns ",(0,a.jsx)(e.code,{children:"null"}),". Otherwise,\nit converts the retrieved value to a Dart string and returns it."]}),"\n",(0,a.jsx)(e.h4,{id:"extracting-task-icon",children:"Extracting Task Icon"}),"\n",(0,a.jsxs)(e.p,{children:["Finally, we'll implement the ",(0,a.jsx)(e.code,{children:"_extractIcon"})," function to extract the icon of the\ntask."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="task_manager.dart"',children:"static Uint8List? _extractIcon(String path) {\n  return using((arena) {\n    final filePath = path.toNativeUtf16(allocator: arena);\n    final instance = GetModuleHandle(nullptr);\n    final iconID = arena<WORD>();\n\n    final hIcon = ExtractAssociatedIcon(instance, filePath, iconID);\n    if (hIcon == NULL) return null;\n\n    return _getIconData(hIcon);\n  });\n}\n\nstatic Uint8List? _getIconData(int hIcon, {int nColorBits = 32}) {\n  return using((arena) {\n    final buffer = <int>[];\n    final hdc = CreateCompatibleDC(NULL);\n\n    final icoHeader = [0, 0, 1, 0, 1, 0];\n    buffer.addAll(icoHeader);\n\n    final iconInfo = arena<ICONINFO>();\n    if (GetIconInfo(hIcon, iconInfo) == 0) {\n      DeleteDC(hdc);\n      return null;\n    }\n\n    final bmInfo = arena<BITMAPINFO>();\n    bmInfo.ref.bmiHeader\n      ..biSize = sizeOf<BITMAPINFOHEADER>()\n      ..biBitCount = 0;\n\n    if (GetDIBits(\n          hdc,\n          iconInfo.ref.hbmColor,\n          0,\n          0,\n          nullptr,\n          bmInfo,\n          DIB_RGB_COLORS,\n        ) ==\n        0) {\n      DeleteDC(hdc);\n      return null;\n    }\n\n    int nBmInfoSize = sizeOf<BITMAPINFOHEADER>();\n    if (nColorBits < 24) {\n      nBmInfoSize += sizeOf<RGBQUAD>() * (1 << nColorBits);\n    }\n\n    if (bmInfo.ref.bmiHeader.biSizeImage == 0) {\n      DeleteDC(hdc);\n      return null;\n    }\n\n    final bits = arena<Uint8>(bmInfo.ref.bmiHeader.biSizeImage);\n\n    bmInfo.ref.bmiHeader\n      ..biBitCount = nColorBits\n      ..biCompression = BI_RGB;\n\n    if (GetDIBits(\n          hdc,\n          iconInfo.ref.hbmColor,\n          0,\n          bmInfo.ref.bmiHeader.biHeight,\n          bits,\n          bmInfo,\n          DIB_RGB_COLORS,\n        ) ==\n        0) {\n      DeleteDC(hdc);\n      return null;\n    }\n\n    final maskInfo = arena<BITMAPINFO>();\n    maskInfo.ref.bmiHeader\n      ..biSize = sizeOf<BITMAPINFOHEADER>()\n      ..biBitCount = 0;\n\n    if (GetDIBits(\n              hdc,\n              iconInfo.ref.hbmMask,\n              0,\n              0,\n              nullptr,\n              maskInfo,\n              DIB_RGB_COLORS,\n            ) ==\n            0 ||\n        maskInfo.ref.bmiHeader.biBitCount != 1) {\n      DeleteDC(hdc);\n      return null;\n    }\n\n    final maskBits = arena<Uint8>(maskInfo.ref.bmiHeader.biSizeImage);\n    if (GetDIBits(\n          hdc,\n          iconInfo.ref.hbmMask,\n          0,\n          maskInfo.ref.bmiHeader.biHeight,\n          maskBits,\n          maskInfo,\n          DIB_RGB_COLORS,\n        ) ==\n        0) {\n      DeleteDC(hdc);\n      return null;\n    }\n\n    final dir = arena<_IconDirectoryEntry>();\n    dir.ref\n      ..nWidth = bmInfo.ref.bmiHeader.biWidth\n      ..nHeight = bmInfo.ref.bmiHeader.biHeight\n      ..nNumColorsInPalette = (nColorBits == 4 ? 16 : 0)\n      ..nNumColorPlanes = 0\n      ..nBitsPerPixel = bmInfo.ref.bmiHeader.biBitCount\n      ..nDataLength = bmInfo.ref.bmiHeader.biSizeImage +\n          maskInfo.ref.bmiHeader.biSizeImage +\n          nBmInfoSize\n      ..nOffset = sizeOf<_IconDirectoryEntry>() + 6;\n\n    buffer\n        .addAll(dir.cast<Uint8>().asTypedList(sizeOf<_IconDirectoryEntry>()));\n\n    bmInfo.ref.bmiHeader\n      ..biHeight *= 2\n      ..biCompression = 0\n      ..biSizeImage += maskInfo.ref.bmiHeader.biSizeImage;\n    buffer.addAll(bmInfo.cast<Uint8>().asTypedList(nBmInfoSize));\n\n    buffer.addAll(bits.asTypedList(bmInfo.ref.bmiHeader.biSizeImage));\n    buffer.addAll(maskBits.asTypedList(maskInfo.ref.bmiHeader.biSizeImage));\n\n    DeleteObject(iconInfo.ref.hbmColor);\n    DeleteObject(iconInfo.ref.hbmMask);\n    DeleteDC(hdc);\n\n    return Uint8List.fromList(buffer);\n  });\n}\n\nbase class _IconDirectoryEntry extends Struct {\n  @Uint8()\n  external int nWidth;\n\n  @Uint8()\n  external int nHeight;\n\n  @Uint8()\n  external int nNumColorsInPalette;\n\n  @Uint8()\n  external int nReserved;\n\n  @Uint16()\n  external int nNumColorPlanes;\n\n  @Uint16()\n  external int nBitsPerPixel;\n\n  @Uint32()\n  external int nDataLength;\n\n  @Uint32()\n  external int nOffset;\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["We first convert the provided file path into a native UTF-16 format using the\n",(0,a.jsx)(e.code,{children:"toNativeUtf16"})," extension method from ",(0,a.jsx)(e.code,{children:"package:ffi"}),". This formatted path is then\npassed to ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/shellapi/nf-shellapi-extractassociatediconw",children:"ExtractAssociatedIcon"})," to retrieve the handle to the associated icon\nfor the specified file."]}),"\n",(0,a.jsxs)(e.p,{children:["Next, we call the ",(0,a.jsx)(e.code,{children:"_getIconData"})," function to extract the icon data from the icon\nhandle. This function retrieves the icon information, including the icon size,\ncolor depth, and pixel data, and returns it as a ",(0,a.jsx)(e.code,{children:"Uint8List"}),"."]}),"\n",(0,a.jsx)(e.h3,{id:"terminating-a-task",children:"Terminating a Task"}),"\n",(0,a.jsxs)(e.p,{children:["Finally, let's implement the ",(0,a.jsx)(e.code,{children:"terminate"})," function to\n",(0,a.jsx)(e.strong,{children:"terminate a running task"}),"."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="task_manager.dart"',children:"/// Terminates a running task with the given [pid].\n///\n/// Returns `true` if the task was successfully terminated; otherwise,\n/// `false`.\nstatic bool terminate(int pid) {\n  final handle = OpenProcess(PROCESS_TERMINATE, FALSE, pid);\n  if (handle == NULL) return false;\n\n  try {\n    return TerminateProcess(handle, 0) == TRUE;\n  } finally {\n    CloseHandle(handle);\n  }\n}\n"})}),"\n",(0,a.jsxs)(e.p,{children:["We first attempt to open a handle to the process with the specified PID using\n",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess",children:"OpenProcess"}),". If the handle is successfully opened, we proceed to terminate the\nprocess by calling ",(0,a.jsx)(e.a,{href:"https://learn.microsoft.com/windows/win32/api/processthreadsapi/nf-processthreadsapi-terminateprocess",children:"TerminateProcess"}),". If the termination is successful, the\nfunction returns ",(0,a.jsx)(e.code,{children:"true"}),"; otherwise, it returns ",(0,a.jsx)(e.code,{children:"false"}),". Finally, we close the\nhandle to the process using ",(0,a.jsx)(e.code,{children:"CloseHandle"})," to ensure proper cleanup."]}),"\n",(0,a.jsx)(e.h2,{id:"building-the-ui",children:"Building the UI"}),"\n",(0,a.jsx)(e.p,{children:"With the task manager logic in place, we can now focus on building the UI for\nour Task Manager app."}),"\n",(0,a.jsx)(e.h3,{id:"setting-up-the-main-entry-point",children:"Setting Up the Main Entry Point"}),"\n",(0,a.jsxs)(e.p,{children:["First, open ",(0,a.jsx)(e.code,{children:"lib\\main.dart"})," file and replace the contents with the following\ncode to set up the main entry point for the app:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="main.dart"',children:"import 'package:flutter/material.dart';\n\nimport 'models.dart';\nimport 'task_manager.dart';\n\nvoid main() {\n  runApp(const TaskManagerApp());\n}\n\nclass TaskManagerApp extends StatelessWidget {\n  const TaskManagerApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Task Manager',\n      theme: ThemeData(\n        brightness: Brightness.dark,\n      ),\n      home: const TaskManagerHomeScreen(),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"creating-the-home-screen-skeleton",children:"Creating the Home Screen Skeleton"}),"\n",(0,a.jsx)(e.p,{children:"Next, let's create the basic structure of the home screen including the\nStatefulWidget and State class."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="main.dart"',children:"class TaskManagerHomeScreen extends StatefulWidget {\n  const TaskManagerHomeScreen({super.key});\n\n  @override\n  TaskManagerHomeScreenState createState() => TaskManagerHomeScreenState();\n}\n\nclass TaskManagerHomeScreenState extends State<TaskManagerHomeScreen> {\n  var _tasks = <Task>[];\n  var _filteredTasks = <Task>[];\n  int? _selectedTask;\n  var _sortBy = SortBy.name;\n  var _sortOrder = SortOrder.ascending;\n  TextEditingController? _searchController;\n  FocusNode? _searchFocusNode;\n\n  @override\n  void initState() {\n    super.initState();\n    _searchController = TextEditingController();\n    _searchFocusNode = FocusNode();\n    loadTasks();\n  }\n\n  @override\n  void dispose() {\n    _searchController?.dispose();\n    _searchFocusNode?.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Task Manager'),\n        actions: [],\n      ),\n      body: const Center(\n        child: Padding(\n          padding: EdgeInsets.all(16),\n          child: Text('No tasks found'),\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"loading-and-displaying-tasks",children:"Loading and Displaying Tasks"}),"\n",(0,a.jsxs)(e.p,{children:["Now, let's implement the method to load tasks, update the state, and use the\n",(0,a.jsx)(e.code,{children:"DataTable"})," widget to display tasks."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="main.dart"',children:"void loadTasks() {\n  setState(() {\n    _tasks = TaskManager.tasks ?? [];\n    _filteredTasks = List.from(_tasks);\n    sortTasks();\n  });\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: // ...\n    body: CustomScrollView(\n      slivers: [\n        SliverToBoxAdapter(\n          child: _filteredTasks.isEmpty\n              ? const Center(\n                  child: Padding(\n                    padding: EdgeInsets.all(16),\n                    child: Text('No tasks found'),\n                  ),\n                )\n                // highlight-start\n              : DataTable(\n                  columns: [\n                    const DataColumn(label: Text('Name')),\n                    const DataColumn(label: Text('PID'), numeric: true),\n                    const DataColumn(label: Text('Description')),\n                    const DataColumn(label: Text('Actions')),\n                  ],\n                  rows: _filteredTasks.map((task) {\n                    return DataRow(\n                      cells: [\n                        DataCell(Text(task.name)),\n                        DataCell(Text(task.pid.toString())),\n                        DataCell(Text(task.description)),\n                        DataCell(\n                          IconButton(\n                            icon: const Icon(\n                              Icons.cancel_outlined,\n                              color: Colors.red,\n                            ),\n                            onPressed: () {},\n                          ),\n                        ),\n                      ],\n                    );\n                  }).toList(),\n                ),\n                // highlight-end\n        ),\n      ],\n    ),\n  );\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"task-sorting-searching-and-refreshing",children:"Task Sorting, Searching, and Refreshing"}),"\n",(0,a.jsx)(e.p,{children:"Next, let's implement the functionality to sort and search tasks based on the\nuser's input and add a button to the app bar to refresh the task list."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="main.dart"',children:"void searchTasks(String query) {\n  final filtered = _tasks.where((task) {\n    return task.name.toLowerCase().contains(query.toLowerCase()) ||\n        task.description.toLowerCase().contains(query.toLowerCase()) ||\n        task.pid.toString().contains(query);\n  }).toList();\n\n  setState(() {\n    _filteredTasks = filtered;\n    sortTasks();\n  });\n}\n\nvoid sortTasks() {\n  setState(() {\n    _filteredTasks.sort((a, b) {\n      final cmp = switch (_sortBy) {\n        SortBy.name => a.name.compareTo(b.name),\n        SortBy.pid => a.pid.compareTo(b.pid),\n        SortBy.description => a.description.compareTo(b.description),\n      };\n      return _sortOrder == SortOrder.ascending ? cmp : -cmp;\n    });\n  });\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: const Text('Task Manager'),\n      actions: [\n        // highlight-start\n        Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 4),\n          child: Tooltip(\n            message: 'Type a name or PID to search',\n            child: SizedBox(\n              height: 40,\n              width: 300,\n              child: TextField(\n                controller: _searchController,\n                focusNode: _searchFocusNode,\n                decoration: InputDecoration(\n                  labelText: 'Type a name or PID to search',\n                  border: const OutlineInputBorder(),\n                  prefixIcon: const Icon(Icons.search),\n                  suffix: _searchController!.text.isNotEmpty\n                      ? IconButton(\n                          icon: const Icon(Icons.clear),\n                          onPressed: () {\n                            setState(() {\n                              _searchController!.clear();\n                              _searchFocusNode!.unfocus();\n                              _tasks = TaskManager.tasks ?? [];\n                              _filteredTasks = List.from(_tasks);\n                              sortTasks();\n                            });\n                          },\n                        )\n                      : null,\n                ),\n                onChanged: searchTasks,\n              ),\n            ),\n          ),\n        ),\n        Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 4),\n          child: IconButton(\n            icon: const Icon(Icons.refresh),\n            onPressed: () {\n              setState(() {\n                _tasks = TaskManager.tasks ?? [];\n                if (_searchController!.text.isNotEmpty) {\n                  searchTasks(_searchController!.text);\n                } else {\n                  _filteredTasks = List.from(_tasks);\n                  sortTasks();\n                }\n              });\n            },\n            tooltip: 'Refresh the list of tasks',\n          ),\n        ),\n        // highlight-end\n      ],\n    ),\n    body: CustomScrollView(\n      slivers: [\n        SliverToBoxAdapter(\n          child: _filteredTasks.isEmpty\n              ? const Center(\n                  child: Padding(\n                    padding: EdgeInsets.all(16),\n                    child: Text('No tasks found'),\n                  ),\n                )\n              : DataTable(\n                  columns: [\n                    DataColumn(\n                      label: const Text('Name'),\n                      // highlight-start\n                      onSort: (columnIndex, ascending) {\n                        setState(() {\n                          _sortBy = SortBy.name;\n                          _sortOrder = ascending\n                              ? SortOrder.ascending\n                              : SortOrder.descending;\n                          sortTasks();\n                        });\n                      },\n                      // highlight-end\n                    ),\n                    DataColumn(\n                      label: const Text('PID'),\n                      numeric: true,\n                      // highlight-start\n                      onSort: (columnIndex, ascending) {\n                        setState(() {\n                          _sortBy = SortBy.pid;\n                          _sortOrder = ascending\n                              ? SortOrder.ascending\n                              : SortOrder.descending;\n                          sortTasks();\n                        });\n                      },\n                      // highlight-end\n                      tooltip: 'Process ID',\n                    ),\n                    DataColumn(\n                      label: const Text('Description'),\n                      // highlight-start\n                      onSort: (columnIndex, ascending) {\n                        setState(() {\n                          _sortBy = SortBy.description;\n                          _sortOrder = ascending\n                              ? SortOrder.ascending\n                              : SortOrder.descending;\n                          sortTasks();\n                        });\n                      },\n                      // highlight-end\n                    ),\n                    const DataColumn(label: Text('Actions')),\n                  ],\n                  rows: // ...\n                  // highlight-start\n                  sortAscending: _sortOrder == SortOrder.ascending,\n                  sortColumnIndex: switch (_sortBy) {\n                    SortBy.name => 0,\n                    SortBy.pid => 1,\n                    SortBy.description => 2,\n                  },\n                  // highlight-end\n                ),\n        ),\n      ],\n    ),\n  );\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"task-termination",children:"Task Termination"}),"\n",(0,a.jsx)(e.p,{children:"Next, let's implement the functionality to terminate a task. We'll display a\nconfirmation dialog to user before terminating the task."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="main.dart"',children:"void confirmEndTask(int pid, String taskName) {\n  showDialog(\n    context: context,\n    builder: (context) {\n      return AlertDialog(\n        title: Text('Do you want to end $taskName?'),\n        content: const Text(\n          'If an open program is associated with this process, it will close '\n          'and you will lose any unsaved data. If you end a system process, '\n          'it might result in system instability. Are you sure you want to '\n          'continue?',\n        ),\n        actions: <Widget>[\n          TextButton(\n            child: const Text('End task'),\n            onPressed: () {\n              Navigator.of(context).pop();\n              if (TaskManager.terminate(pid)) {\n                ScaffoldMessenger.of(context).showSnackBar(\n                  SnackBar(\n                    content: Text('Task \"$taskName\" ended successfully'),\n                  ),\n                );\n                loadTasks();\n              } else {\n                ScaffoldMessenger.of(context).showSnackBar(\n                  SnackBar(\n                    content: Text('Failed to end task \"$taskName\"'),\n                  ),\n                );\n              }\n            },\n          ),\n          TextButton(\n            child: const Text('Cancel'),\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n          ),\n        ],\n      );\n    },\n  );\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: // ...\n    body: CustomScrollView(\n      slivers: [\n        SliverToBoxAdapter(\n          child: _filteredTasks.isEmpty\n            ? const Center(\n                child: Padding(\n                  padding: EdgeInsets.all(16),\n                  child: Text('No tasks found'),\n                ),\n              )\n            : DataTable(\n                columns: // ...\n                rows: _filteredTasks.map((task) {\n                  return DataRow(\n                    cells: [\n                      // ...\n                      DataCell(\n                        IconButton(\n                          icon: const Icon(\n                            Icons.cancel_outlined,\n                            color: Colors.red,\n                          ),\n                          // highlight-next-line\n                          onPressed: () => confirmEndTask(task.pid, task.name),\n                        ),\n                      ),\n                    ],\n                  );\n                }).toList(),\n                // ...\n              ),\n        ),\n      ],\n    ),\n  );\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"task-creation",children:"Task Creation"}),"\n",(0,a.jsx)(e.p,{children:"Finally, let's implement the functionality to run a new task by displaying a\ndialog with a text field to the user for entering the task name."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-dart",metastring:'title="main.dart"',children:"void runTask(String path) {\n  final result = TaskManager.run(path);\n  if (result) {\n    Navigator.of(context).pop();\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(\n        content: Text('Task \"$path\" started successfully'),\n      ),\n    );\n  } else {\n    showDialog(\n      context: context,\n      builder: (context) {\n        return AlertDialog(\n          title: const Text('Error'),\n          content: Text('Failed to run task \"$path\"'),\n          actions: [\n            TextButton(\n              onPressed: () {\n                Navigator.of(context).pop();\n              },\n              child: const Text('Ok'),\n            ),\n          ],\n        );\n      },\n    );\n  }\n}\n\nvoid showRunTaskDialog() {\n  final taskNameController = TextEditingController();\n  showDialog(\n    context: context,\n    builder: (context) {\n      return AlertDialog(\n        title: const Text('Run new task'),\n        content: TextField(\n          autofocus: true,\n          onSubmitted: (_) {\n            final path = taskNameController.text;\n            if (path.isNotEmpty) {\n              runTask(path);\n            }\n          },\n          controller: taskNameController,\n          decoration: const InputDecoration(hintText: 'Enter task name'),\n        ),\n        actions: [\n          TextButton(\n            onPressed: () {\n              final path = taskNameController.text;\n              if (path.isNotEmpty) {\n                runTask(path);\n              }\n            },\n            child: const Text('Run'),\n          ),\n          TextButton(\n            onPressed: () {\n              Navigator.of(context).pop();\n            },\n            child: const Text('Cancel'),\n          ),\n        ],\n      );\n    },\n  );\n}\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: const Text('Task Manager'),\n      actions: [\n        // ...\n        // highlight-start\n        Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 4),\n          child: IconButton(\n            onPressed: showRunTaskDialog,\n            icon: const Icon(Icons.add),\n            tooltip: 'Run a new task',\n          ),\n        ),\n        // highlight-end\n      ],\n    ),\n    // ...\n  );\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsxs)(e.p,{children:["In this blog post, we've built an app in Flutter using the ",(0,a.jsx)(e.strong,{children:"win32"})," package to\nmanage running tasks on a Windows system. We've covered the process of\nenumerating running tasks, starting new tasks, and terminating tasks, as well as\nbuilding a beautiful UI to interact with the task manager."]}),"\n",(0,a.jsxs)(e.p,{children:["I hope this tutorial has inspired you to explore further and build even more\nadvanced applications with Dart, Flutter, and ",(0,a.jsx)(e.strong,{children:"win32"}),". Your feedback and\ncontributions are always welcome, so feel free to share your thoughts and ideas."]}),"\n",(0,a.jsx)(e.p,{children:"Happy coding! \uD83D\uDE80"}),"\n",(0,a.jsx)(e.h2,{id:"source-code",children:"Source Code"}),"\n",(0,a.jsx)(i,{href:"https://github.com/halildurmus/win32/tree/main/examples/task_manager"})]})}function h(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},3920:function(n,e,t){t.d(e,{Z:()=>i});let i=t.p+"assets/images/task_manager-163b66b5a0c160f663eb5963ac095949.png"},7983:function(n){n.exports=JSON.parse('{"permalink":"/blog/building-task-manager-app","source":"@site/blog/2024/07-16-building-task-manager-app/index.mdx","title":"Building a Task Manager App in Flutter with win32","description":"We\'ll build a Task Manager app to manage running Windows tasks in Flutter using the win32 package.","date":"2024-07-16T00:00:00.000Z","tags":[{"inline":true,"label":"win32","permalink":"/blog/tags/win-32"},{"inline":true,"label":"flutter","permalink":"/blog/tags/flutter"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":15.81,"hasTruncateMarker":true,"authors":[{"name":"Halil Durmus","title":"Software Engineer / Maintainer of win32","url":"https://halildurmus.dev","page":{"permalink":"/blog/authors/halildurmus"},"socials":{"github":"https://github.com/halildurmus"},"github":"https://github.com/halildurmus","imageURL":"https://github.com/halildurmus.png","key":"halildurmus"}],"frontMatter":{"title":"Building a Task Manager App in Flutter with win32","description":"We\'ll build a Task Manager app to manage running Windows tasks in Flutter using the win32 package.","slug":"building-task-manager-app","authors":"halildurmus","tags":["win32","flutter","tutorial"],"image":"https://ik.imagekit.io/npajaqrcn/blog/2024-07-16-building-task-manager-app/social.png","hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"Building a Service Manager CLI in Dart with win32","permalink":"/blog/building-service-manager-cli"}}')}}]);