# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "halildurmus"
repo = "win32"

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% macro print_commit(commit) -%}
  - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
    {% if commit.breaking %}[**breaking**] {% endif %}\
    {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
    {% if commit.remote.pr_number %} in \
      [#{{ commit.remote.pr_number }}](<REPO>/pull/{{ commit.remote.pr_number }}) \
    {%- endif -%}
{% endmacro -%}

{% macro print_contributor(contributor) -%}
  - @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}](<REPO>/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{% endmacro -%}

{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors ‚ù§Ô∏è
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
    {{ self::print_contributor(contributor=contributor) }}
{%- endfor %}\n
{%- endif %}\n
"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                <REPO>/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: <REPO>/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
  # replace the GitHub URL
  { pattern = '<GITHUB>', replace = "https://github.com" },
  # replace repository URL
  { pattern = '<REPO>', replace = "https://github.com/halildurmus/win32" },
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # remove issue numbers from commits
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
  { message = "^perf", group = "<!-- 2 -->‚ö° Performance" },
  { message = "^refactor", group = "<!-- 3 -->üßπ Refactor" },
  { message = "^docs", group = "<!-- 4 -->üìù Documentation" },
  { message = "^test", group = "<!-- 5 -->üß™ Testing" },
  { message = "^style", group = "<!-- 6 -->üé® Styling" },
  { message = "^chore\\(deps\\)", group = "<!-- 7 -->üì¶ Dependencies" },
  { message = "^chore\\(release\\): v", skip = true },
  { message = "^chore|^ci", group = "<!-- 8 -->‚öôÔ∏è Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 9 -->üõ°Ô∏è Security" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
