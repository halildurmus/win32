{
    "AbortPath": {
        "prototype": "BOOL AbortPath(\n  HDC hdc\n);",
        "comment": "The AbortPath function closes and discards any paths in the specified device context."
    },
    "AbortPrinter": {
        "prototype": "BOOL AbortPrinter(\n  _In_ HANDLE hPrinter\n);",
        "comment": "The AbortPrinter function deletes a printer's spool file if the printer is configured for spooling.",
        "category": "winspool"
    },
    "accept": {
        "prototype": "SOCKET accept(\n  SOCKET   s,\n  sockaddr *addr,\n  int      *addrlen\n);",
        "comment": "The accept function permits an incoming connection attempt on a socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "ActivateActCtx": {
        "prototype": "BOOL ActivateActCtx(\n  HANDLE    hActCtx,\n  ULONG_PTR *lpCookie\n);",
        "comment": "The ActivateActCtx function activates the specified activation context. It does this by pushing the specified activation context to the top of the activation stack. The specified activation context is thus associated with the current thread and any appropriate side-by-side API functions."
    },
    "ActivateKeyboardLayout": {
        "prototype": "HKL ActivateKeyboardLayout(\n  HKL  hkl,\n  UINT Flags\n);",
        "comment": "Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. The input locale identifier specifies a locale as well as the physical layout of the keyboard."
    },
    "AddClipboardFormatListener": {
        "prototype": "BOOL AddClipboardFormatListener(\n  HWND hwnd\n);",
        "comment": "Places the given window in the system-maintained clipboard format listener list."
    },
    "AddDllDirectory": {
        "prototype": "DLL_DIRECTORY_COOKIE AddDllDirectory(\n  [in] PCWSTR NewDirectory\n);",
        "comment": "Adds a directory to the process DLL search path."
    },
    "AddFontResource": {
        "prototype": "int AddFontResourceW(\n  LPCWSTR Arg1\n);",
        "comment": "The AddFontResource function adds the font resource from the specified file to the system font table. The font can subsequently be used for text output by any application."
    },
    "AddFontResourceEx": {
        "prototype": "int AddFontResourceExW(\n  LPCWSTR name,\n  DWORD   fl,\n  PVOID   res\n);",
        "comment": "The AddFontResourceEx function adds the font resource from the specified file to the system. Fonts added with the AddFontResourceEx function can be marked as private and not enumerable."
    },
    "AddForm": {
        "prototype": "BOOL AddFormW(\n  _In_ HANDLE hPrinter,\n  _In_ DWORD  Level,\n  _In_ LPBYTE pForm\n);",
        "comment": "The AddForm function adds a form to the list of available forms that can be selected for the specified printer.",
        "category": "winspool"
    },
    "AddIPAddress": {
        "prototype": "DWORD AddIPAddress(\n  IPAddr Address,\n  IPMask IpMask,\n  DWORD  IfIndex,\n  PULONG NTEContext,\n  PULONG NTEInstance\n);",
        "comment": "The AddIPAddress function adds the specified IPv4 address to the specified adapter."
    },
    "AddJob": {
        "prototype": "BOOL AddJobW(\n  _In_  HANDLE  hPrinter,\n  _In_  DWORD   Level,\n  _Out_ LPBYTE  pData,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pcbNeeded\n);",
        "comment": "The AddJob function adds a print job to the list of print jobs that can be scheduled by the print spooler. The function retrieves the name of the file you can use to store the job."
    },
    "AddPrinter": {
        "prototype": "HANDLE AddPrinterW(\n  _In_ LPWSTR pName,\n  _In_ DWORD  Level,\n  _In_ LPBYTE pPrinter\n);",
        "comment": "The AddPrinter function adds a printer to the list of supported printers for a specified server."
    },
    "AddPrinterConnection": {
        "prototype": "BOOL AddPrinterConnectionW(\n  _In_ LPWSTR pName\n);",
        "comment": "The AddPrinterConnection function adds a connection to the specified printer for the current user."
    },
    "AddPrinterConnection2": {
        "prototype": "BOOL AddPrinterConnection2W(\n  _In_ HWND    hWnd,\n  _In_ LPCWSTR pszName,\n       DWORD   dwLevel,\n  _In_ PVOID   pConnectionInfo\n);",
        "comment": "Adds a connection to the specified printer for the current user and specifies connection details."
    },
    "AddRefActCtx": {
        "prototype": "void AddRefActCtx(\n  HANDLE hActCtx\n);",
        "comment": "The AddRefActCtx function increments the reference count of the specified activation context."
    },
    "AdjustWindowRect": {
        "prototype": "BOOL AdjustWindowRect(\n  LPRECT lpRect,\n  DWORD  dwStyle,\n  BOOL   bMenu\n);",
        "comment": "Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size."
    },
    "AdjustWindowRectEx": {
        "prototype": "BOOL AdjustWindowRectEx(\n  LPRECT lpRect,\n  DWORD  dwStyle,\n  BOOL   bMenu,\n  DWORD  dwExStyle\n);",
        "comment": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size."
    },
    "AdjustWindowRectExForDpi": {
        "prototype": "BOOL AdjustWindowRectExForDpi(\n  LPRECT lpRect,\n  DWORD  dwStyle,\n  BOOL   bMenu,\n  DWORD  dwExStyle,\n  UINT   dpi\n);",
        "comment": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle and the provided DPI. This window rectangle can then be passed to the CreateWindowEx function to create a window with a client area of the desired size.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "AdvancedDocumentProperties": {
        "prototype": "LONG AdvancedDocumentPropertiesW(\n  _In_  HWND     hWnd,\n  _In_  HANDLE   hPrinter,\n  _In_  LPWSTR   pDeviceName,\n  _Out_ PDEVMODE pDevModeOutput,\n  _In_  PDEVMODE pDevModeInput\n);",
        "comment": "The AdvancedDocumentProperties function displays a printer-configuration dialog box for the specified printer, allowing the user to configure that printer."
    },
    "AllocConsole": {
        "prototype": "BOOL AllocConsole(void);",
        "comment": "Allocates a new console for the calling process."
    },
    "AllowSetForegroundWindow": {
        "prototype": "BOOL AllowSetForegroundWindow(\n  DWORD dwProcessId\n);",
        "comment": "Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window."
    },
    "AngleArc": {
        "prototype": "BOOL AngleArc(\n  HDC   hdc,\n  int   x,\n  int   y,\n  DWORD r,\n  FLOAT StartAngle,\n  FLOAT SweepAngle\n);",
        "comment": "The AngleArc function draws a line segment and an arc. The line segment is drawn from the current position to the beginning of the arc. The arc is drawn along the perimeter of a circle with the given radius and center. The length of the arc is defined by the given start and sweep angles."
    },
    "AnimatePalette": {
        "prototype": "BOOL AnimatePalette(\n  HPALETTE           hPal,\n  UINT               iStartIndex,\n  UINT               cEntries,\n  const PALETTEENTRY *ppe\n);",
        "comment": "The AnimatePalette function replaces entries in the specified logical palette."
    },
    "AnimateWindow": {
        "prototype": "BOOL AnimateWindow(\n  HWND  hWnd,\n  DWORD dwTime,\n  DWORD dwFlags\n);",
        "comment": "Enables you to produce special effects when showing or hiding windows. There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade."
    },
    "AnyPopup": {
        "prototype": "BOOL AnyPopup();",
        "comment": "Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The function searches the entire screen, not just the calling application's client area."
    },
    "AppendMenu": {
        "prototype": "BOOL AppendMenuW(\n  HMENU    hMenu,\n  UINT     uFlags,\n  UINT_PTR uIDNewItem,\n  LPCWSTR  lpNewItem\n);",
        "comment": "Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item."
    },
    "Arc": {
        "prototype": "BOOL Arc(\n  HDC hdc,\n  int x1,\n  int y1,\n  int x2,\n  int y2,\n  int x3,\n  int y3,\n  int x4,\n  int y4\n);",
        "comment": "The Arc function draws an elliptical arc."
    },
    "ArcTo": {
        "prototype": "BOOL ArcTo(\n  HDC hdc,\n  int left,\n  int top,\n  int right,\n  int bottom,\n  int xr1,\n  int yr1,\n  int xr2,\n  int yr2\n);",
        "comment": "The ArcTo function draws an elliptical arc."
    },
    "AreDpiAwarenessContextsEqual": {
        "prototype": "BOOL AreDpiAwarenessContextsEqual(\n  DPI_AWARENESS_CONTEXT dpiContextA,\n  DPI_AWARENESS_CONTEXT dpiContextB\n);",
        "comment": "Determines whether two DPI_AWARENESS_CONTEXT values are identical.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "AreFileApisANSI": {
        "prototype": "BOOL AreFileApisANSI();",
        "comment": "Determines whether the file I/O functions are using the ANSI or OEM character set code page. This function is useful for 8-bit console input and output operations."
    },
    "ArrangeIconicWindows": {
        "prototype": "UINT ArrangeIconicWindows(\n  HWND hWnd\n);",
        "comment": "Arranges all the minimized (iconic) child windows of the specified parent window."
    },
    "AssignProcessToJobObject": {
        "prototype": "BOOL AssignProcessToJobObject(\n  [in] HANDLE hJob,\n  [in] HANDLE hProcess\n);",
        "comment": "Assigns a process to an existing job object."
    },
    "AttachConsole": {
        "prototype": "BOOL AttachConsole(\n  _In_ DWORD dwProcessId\n);",
        "comment": "Attaches the calling process to the console of the specified process."
    },
    "AttachThreadInput": {
        "prototype": "BOOL AttachThreadInput(\n  DWORD idAttach,\n  DWORD idAttachTo,\n  BOOL  fAttach\n);",
        "comment": "Attaches or detaches the input processing mechanism of one thread to that of another thread."
    },
    "Beep": {
        "prototype": "BOOL Beep(\n  DWORD dwFreq,\n  DWORD dwDuration\n);",
        "comment": "Generates simple tones on the speaker. The function is synchronous; it performs an alertable wait and does not return control to its caller until the sound finishes."
    },
    "BeginDeferWindowPos": {
        "prototype": "HDWP BeginDeferWindowPos(\n  int nNumWindows\n);",
        "comment": "Allocates memory for a multiple-window- position structure and returns the handle to the structure."
    },
    "BeginPaint": {
        "prototype": "HDC BeginPaint(\n  HWND          hWnd,\n  LPPAINTSTRUCT lpPaint\n);",
        "comment": "The BeginPaint function prepares the specified window for painting and fills a PAINTSTRUCT structure with information about the painting."
    },
    "BeginPath": {
        "prototype": "BOOL BeginPath(\n  HDC hdc\n);",
        "comment": "The BeginPath function opens a path bracket in the specified device context."
    },
    "BeginUpdateResource": {
        "prototype": "HANDLE BeginUpdateResourceW(\n  LPCWSTR pFileName,\n  BOOL    bDeleteExistingResources\n);",
        "comment": "Retrieves a handle that can be used by the UpdateResource function to add, delete, or replace resources in a binary module."
    },
    "bind": {
        "prototype": "int bind(\n  SOCKET         s,\n  const sockaddr *name,\n  int            namelen\n);",
        "comment": "The bind function associates a local address with a socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "BitBlt": {
        "prototype": "BOOL BitBlt(\n  HDC   hdc,\n  int   x,\n  int   y,\n  int   cx,\n  int   cy,\n  HDC   hdcSrc,\n  int   x1,\n  int   y1,\n  DWORD rop\n);",
        "comment": "The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context."
    },
    "BlockInput": {
        "prototype": "BOOL BlockInput(\n  BOOL fBlockIt);",
        "comment": "Blocks keyboard and mouse input events from reaching applications."
    },
    "BluetoothAuthenticateDeviceEx": {
        "prototype": "DWORD BluetoothAuthenticateDeviceEx(\n  HWND                        hwndParentIn,\n  HANDLE                      hRadioIn,\n  BLUETOOTH_DEVICE_INFO       *pbtdiInout,\n  PBLUETOOTH_OOB_DATA_INFO    pbtOobData,\n  AUTHENTICATION_REQUIREMENTS authenticationRequirement\n);",
        "comment": "The BluetoothAuthenticateDeviceEx function sends an authentication request to a remote Bluetooth device. Additionally, this function allows for out-of-band data to be passed into the function call for the device being authenticated."
    },
    "BluetoothDisplayDeviceProperties": {
        "prototype": "BOOL BluetoothDisplayDeviceProperties(\n  HWND                  hwndParent,\n  BLUETOOTH_DEVICE_INFO *pbtdi\n);",
        "comment": "The BluetoothDisplayDeviceProperties function opens the Control Panel device information property sheet.",
        "category": "bluetooth"
    },
    "BluetoothEnableDiscovery": {
        "prototype": "BOOL BluetoothEnableDiscovery(\n  HANDLE hRadio,\n  BOOL   fEnabled\n);",
        "comment": "The BluetoothEnableDiscovery function changes the discovery state of a local Bluetooth radio or radios.",
        "category": "bluetooth"
    },
    "BluetoothEnableIncomingConnections": {
        "prototype": "BOOL BluetoothEnableIncomingConnections(\n  HANDLE hRadio,\n  BOOL   fEnabled\n);",
        "comment": "The BluetoothEnableIncomingConnections function modifies whether a local Bluetooth radio accepts incoming connections.",
        "category": "bluetooth"
    },
    "BluetoothEnumerateInstalledServices": {
        "prototype": "DWORD BluetoothEnumerateInstalledServices(\n  HANDLE                      hRadio,\n  const BLUETOOTH_DEVICE_INFO *pbtdi,\n  DWORD                       *pcServiceInout,\n  GUID                        *pGuidServices\n);",
        "comment": "The BluetoothEnumerateInstalledServices function enumerates the services GUIDs (Globally Unique Identifiers) enabled on a Bluetooth device.",
        "category": "bluetooth"
    },
    "BluetoothFindDeviceClose": {
        "prototype": "BOOL BluetoothFindDeviceClose(\n  HBLUETOOTH_DEVICE_FIND hFind\n);",
        "comment": "The BluetoothFindDeviceClose function closes an enumeration handle associated with a device query.",
        "category": "bluetooth"
    },
    "BluetoothFindFirstDevice": {
        "prototype": "HBLUETOOTH_DEVICE_FIND BluetoothFindFirstDevice(\n  const BLUETOOTH_DEVICE_SEARCH_PARAMS *pbtsp,\n  BLUETOOTH_DEVICE_INFO                *pbtdi\n);",
        "comment": "The BluetoothFindFirstDevice function begins the enumeration Bluetooth devices.",
        "category": "bluetooth"
    },
    "BluetoothFindFirstRadio": {
        "prototype": "HBLUETOOTH_RADIO_FIND BluetoothFindFirstRadio(\n  const BLUETOOTH_FIND_RADIO_PARAMS *pbtfrp,\n  HANDLE                            *phRadio\n);",
        "comment": "The BluetoothFindFirstRadio function begins the enumeration of local Bluetooth radios.",
        "category": "bluetooth"
    },
    "BluetoothFindNextDevice": {
        "prototype": "BOOL BluetoothFindNextDevice(\n  HBLUETOOTH_DEVICE_FIND hFind,\n  BLUETOOTH_DEVICE_INFO  *pbtdi\n);",
        "comment": "The BluetoothFindNextDevice function finds the next Bluetooth device.",
        "category": "bluetooth"
    },
    "BluetoothFindNextRadio": {
        "prototype": "BOOL BluetoothFindNextRadio(\n  HBLUETOOTH_RADIO_FIND hFind,\n  HANDLE                *phRadio\n);",
        "comment": "The BluetoothFindNextRadio function finds the next Bluetooth radio.",
        "category": "bluetooth"
    },
    "BluetoothFindRadioClose": {
        "prototype": "BOOL BluetoothFindRadioClose(\n  HBLUETOOTH_RADIO_FIND hFind\n);",
        "comment": "The BluetoothFindRadioClose function closes the enumeration handle associated with finding Bluetooth radios.",
        "category": "bluetooth"
    },
    "BluetoothGATTAbortReliableWrite": {
        "prototype": "HRESULT BluetoothGATTAbortReliableWrite(\n  HANDLE                             hDevice,\n  BTH_LE_GATT_RELIABLE_WRITE_CONTEXT ReliableWriteContext,\n  ULONG                              Flags\n);",
        "comment": "Specifies the end of reliable write procedures, and the writes should be aborted.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTBeginReliableWrite": {
        "prototype": "HRESULT BluetoothGATTBeginReliableWrite(\n  HANDLE                              hDevice,\n  PBTH_LE_GATT_RELIABLE_WRITE_CONTEXT ReliableWriteContext,\n  ULONG                               Flags\n);",
        "comment": "The BluetoothGATTBeginReliableWrite function specifies that reliable writes are about to begin.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTEndReliableWrite": {
        "prototype": "HRESULT BluetoothGATTEndReliableWrite(\n  HANDLE                             hDevice,\n  BTH_LE_GATT_RELIABLE_WRITE_CONTEXT ReliableWriteContext,\n  ULONG                              Flags\n);",
        "comment": "Specifies the end of reliable writes, and the writes should be committed.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTGetCharacteristics": {
        "prototype": "HRESULT BluetoothGATTGetCharacteristics(\n  HANDLE                      hDevice,\n  PBTH_LE_GATT_SERVICE        Service,\n  USHORT                      CharacteristicsBufferCount,\n  PBTH_LE_GATT_CHARACTERISTIC CharacteristicsBuffer,\n  USHORT                      *CharacteristicsBufferActual,\n  ULONG                       Flags\n);",
        "comment": "Gets all the characteristics available for the specified service.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTGetCharacteristicValue": {
        "prototype": "HRESULT BluetoothGATTGetCharacteristicValue(\n  HANDLE                            hDevice,\n  PBTH_LE_GATT_CHARACTERISTIC       Characteristic,\n  ULONG                             CharacteristicValueDataSize,\n  PBTH_LE_GATT_CHARACTERISTIC_VALUE CharacteristicValue,\n  USHORT                            *CharacteristicValueSizeRequired,\n  ULONG                             Flags\n);",
        "comment": "Gets the value of the specified characteristic.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTGetDescriptors": {
        "prototype": "HRESULT BluetoothGATTGetDescriptors(\n  HANDLE                      hDevice,\n  PBTH_LE_GATT_CHARACTERISTIC Characteristic,\n  USHORT                      DescriptorsBufferCount,\n  PBTH_LE_GATT_DESCRIPTOR     DescriptorsBuffer,\n  USHORT                      *DescriptorsBufferActual,\n  ULONG                       Flags\n);",
        "comment": "Gets all the descriptors available for the specified characteristic.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTGetDescriptorValue": {
        "prototype": "HRESULT BluetoothGATTGetDescriptorValue(\n  HANDLE                        hDevice,\n  PBTH_LE_GATT_DESCRIPTOR       Descriptor,\n  ULONG                         DescriptorValueDataSize,\n  PBTH_LE_GATT_DESCRIPTOR_VALUE DescriptorValue,\n  USHORT                        *DescriptorValueSizeRequired,\n  ULONG                         Flags\n);",
        "comment": "Gets the value of the specified descriptor.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTGetIncludedServices": {
        "prototype": "HRESULT BluetoothGATTGetIncludedServices(\n  HANDLE               hDevice,\n  PBTH_LE_GATT_SERVICE ParentService,\n  USHORT               IncludedServicesBufferCount,\n  PBTH_LE_GATT_SERVICE IncludedServicesBuffer,\n  USHORT               *IncludedServicesBufferActual,\n  ULONG                Flags\n);",
        "comment": "Gets all the included services available for a given service.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTGetServices": {
        "prototype": "HRESULT BluetoothGATTGetServices(\n  HANDLE               hDevice,\n  USHORT               ServicesBufferCount,\n  PBTH_LE_GATT_SERVICE ServicesBuffer,\n  USHORT               *ServicesBufferActual,\n  ULONG                Flags\n);",
        "comment": "The BluetoothGATTGetServices function gets all the primary services available for a server.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTRegisterEvent": {
        "prototype": "HRESULT BluetoothGATTRegisterEvent(\n  HANDLE                           hService,\n  BTH_LE_GATT_EVENT_TYPE           EventType,\n  PVOID                            EventParameterIn,\n  PFNBLUETOOTH_GATT_EVENT_CALLBACK Callback,\n  PVOID                            CallbackContext,\n  BLUETOOTH_GATT_EVENT_HANDLE      *pEventHandle,\n  ULONG                            Flags\n);",
        "comment": "Registers a routine to be called back during a characteristic value change event on the given characteristic identified by its characteristic handle.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTSetCharacteristicValue": {
        "prototype": "HRESULT BluetoothGATTSetCharacteristicValue(\n  HANDLE                             hDevice,\n  PBTH_LE_GATT_CHARACTERISTIC        Characteristic,\n  PBTH_LE_GATT_CHARACTERISTIC_VALUE  CharacteristicValue,\n  BTH_LE_GATT_RELIABLE_WRITE_CONTEXT ReliableWriteContext,\n  ULONG                              Flags\n);",
        "comment": "Writes the specified characteristic value to the Bluetooth device.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTSetDescriptorValue": {
        "prototype": "HRESULT BluetoothGATTSetDescriptorValue(\n  HANDLE                        hDevice,\n  PBTH_LE_GATT_DESCRIPTOR       Descriptor,\n  PBTH_LE_GATT_DESCRIPTOR_VALUE DescriptorValue,\n  ULONG                         Flags\n);",
        "comment": "Writes the specified descriptor value to the Bluetooth device.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGATTUnregisterEvent": {
        "prototype": "HRESULT BluetoothGATTUnregisterEvent(\n  BLUETOOTH_GATT_EVENT_HANDLE EventHandle,\n  ULONG                       Flags\n);",
        "comment": "Unregisters the given characteristic value change event.",
        "category": "bluetooth",
        "minimumWindowsVersion": "WIN8"
    },
    "BluetoothGetDeviceInfo": {
        "prototype": "DWORD BluetoothGetDeviceInfo(\n  HANDLE                hRadio,\n  BLUETOOTH_DEVICE_INFO *pbtdi\n);",
        "comment": "TThe BluetoothGetDeviceInfo function retrieves information about a remote Bluetooth device. The Bluetooth device must have been previously identified through a successful device inquiry function call.",
        "category": "bluetooth"
    },
    "BluetoothGetRadioInfo": {
        "prototype": "DWORD BluetoothGetRadioInfo(\n  HANDLE                hRadio,\n  PBLUETOOTH_RADIO_INFO pRadioInfo\n);",
        "comment": "The BluetoothGetRadioInfo function obtains information about a Bluetooth radio.",
        "category": "bluetooth"
    },
    "BluetoothIsConnectable": {
        "prototype": "BOOL BluetoothIsConnectable(\n  HANDLE hRadio\n);",
        "comment": "The BluetoothIsConnectable function determines whether a Bluetooth radio or radios is connectable.",
        "category": "bluetooth"
    },
    "BluetoothIsDiscoverable": {
        "prototype": "BOOL BluetoothIsDiscoverable(\n  HANDLE hRadio\n);",
        "comment": "The BluetoothIsDiscoverable function determines whether a Bluetooth radio or radios is discoverable.",
        "category": "bluetooth"
    },
    "BluetoothIsVersionAvailable": {
        "prototype": "BOOL BluetoothIsVersionAvailable(\n  UCHAR MajorVersion,\n  UCHAR MinorVersion\n);",
        "comment": "The BluetoothIsVersionAvailable function indicates if the installed Bluetooth binary set supports the requested version.",
        "category": "bluetooth"
    },
    "BluetoothRegisterForAuthenticationEx": {
        "prototype": "DWORD BluetoothRegisterForAuthenticationEx(\n  const BLUETOOTH_DEVICE_INFO            *pbtdiIn,\n  HBLUETOOTH_AUTHENTICATION_REGISTRATION *phRegHandleOut,\n  PFN_AUTHENTICATION_CALLBACK_EX         pfnCallbackIn,\n  PVOID                                  pvParam\n);",
        "comment": "The BluetoothRegisterForAuthenticationEx function registers an application for a pin request, numeric comparison and callback function.",
        "category": "bluetooth"
    },
    "BluetoothRemoveDevice": {
        "prototype": "DWORD BluetoothRemoveDevice(\n  const BLUETOOTH_ADDRESS *pAddress\n);",
        "comment": "The BluetoothRemoveDevice function removes authentication between a Bluetooth device and the computer and clears cached service information for the device.",
        "category": "bluetooth"
    },
    "BluetoothSdpEnumAttributes": {
        "prototype": "BOOL BluetoothSdpEnumAttributes(\n  LPBYTE                                 pSDPStream,\n  ULONG                                  cbStreamSize,\n  PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK pfnCallback,\n  LPVOID                                 pvParam\n);",
        "comment": "The BluetoothSdpEnumAttributes function enumerates through the SDP record stream, and calls the callback function for each attribute in the record.",
        "category": "bluetooth"
    },
    "BluetoothSdpGetAttributeValue": {
        "prototype": "DWORD BluetoothSdpGetAttributeValue(\n  [in]  LPBYTE            pRecordStream,\n  [in]  ULONG             cbRecordLength,\n  [in]  USHORT            usAttributeId,\n  [out] PSDP_ELEMENT_DATA pAttributeData\n);",
        "comment": "The BluetoothSdpGetAttributeValue function retrieves the attribute value for an attribute identifier.",
        "category": "bluetooth"
    },
    "BluetoothSdpGetContainerElementData": {
        "prototype": "DWORD BluetoothSdpGetContainerElementData(\n  [in]      LPBYTE                       pContainerStream,\n  [in]      ULONG                        cbContainerLength,\n  [in, out] HBLUETOOTH_CONTAINER_ELEMENT *pElement,\n  [out]     PSDP_ELEMENT_DATA            pData\n);",
        "comment": "The BluetoothSdpGetContainerElementData function iterates a container stream and returns each element contained within the container element.",
        "category": "bluetooth"
    },
    "BluetoothSdpGetElementData": {
        "prototype": "DWORD BluetoothSdpGetElementData(\n  [in]  LPBYTE            pSdpStream,\n  [in]  ULONG             cbSdpStreamLength,\n  [out] PSDP_ELEMENT_DATA pData\n);",
        "comment": "The BluetoothSdpGetElementData function retrieves and parses a single element from an SDP stream.",
        "category": "bluetooth"
    },
    "BluetoothSdpGetString": {
        "prototype": "DWORD BluetoothSdpGetString(\n  [in]      LPBYTE                      pRecordStream,\n  [in]      ULONG                       cbRecordLength,\n  [in]      const PSDP_STRING_TYPE_DATA pStringData,\n  [in]      USHORT                      usStringOffset,\n  [out]     PWSTR                       pszString,\n  [in, out] PULONG                      pcchStringLength\n);",
        "comment": "The BluetoothSdpGetString function converts a raw string embedded in the SDP record into a Unicode string.",
        "category": "bluetooth"
    },
    "BluetoothSelectDevices": {
        "prototype": "BOOL BluetoothSelectDevices(\n  BLUETOOTH_SELECT_DEVICE_PARAMS *pbtsdp\n);",
        "comment": "The BluetoothSelectDevices function enables Bluetooth device selection.",
        "category": "bluetooth"
    },
    "BluetoothSelectDevicesFree": {
        "prototype": "BOOL BluetoothSelectDevicesFree(\n  BLUETOOTH_SELECT_DEVICE_PARAMS *pbtsdp\n);",
        "comment": "The BluetoothSelectDevicesFree function frees resources associated with a previous call to BluetoothSelectDevices.",
        "category": "bluetooth"
    },
    "BluetoothSendAuthenticationResponseEx": {
        "prototype": "DWORD BluetoothSendAuthenticationResponseEx(\n  [in, optional] HANDLE                           hRadioIn,\n  [in]           PBLUETOOTH_AUTHENTICATE_RESPONSE pauthResponse\n);",
        "comment": "The BluetoothSendAuthenticationResponseEx function is called when an authentication request to send the passkey or a Numeric Comparison response is made.",
        "category": "bluetooth"
    },
    "BluetoothSetServiceState": {
        "prototype": "DWORD BluetoothSetServiceState(\n  HANDLE                      hRadio,\n  const BLUETOOTH_DEVICE_INFO *pbtdi,\n  const GUID                  *pGuidService,\n  DWORD                       dwServiceFlags\n);",
        "comment": "The BluetoothSetServiceState function enables or disables services for a Bluetooth device.",
        "category": "bluetooth"
    },
    "BluetoothUnregisterAuthentication": {
        "prototype": "BOOL BluetoothUnregisterAuthentication(\n  HBLUETOOTH_AUTHENTICATION_REGISTRATION hRegHandle\n);",
        "comment": "The BluetoothUnregisterAuthentication function removes registration for a callback routine that was previously registered with a call to the BluetoothRegisterForAuthentication function.",
        "category": "bluetooth"
    },
    "BluetoothUpdateDeviceRecord": {
        "prototype": "DWORD BluetoothUpdateDeviceRecord(\n  const BLUETOOTH_DEVICE_INFO *pbtdi\n);",
        "comment": "The BluetoothUpdateDeviceRecord function updates the local computer cache about a Bluetooth device.",
        "category": "bluetooth"
    },
    "BringWindowToTop": {
        "prototype": "BOOL BringWindowToTop(\n  HWND hWnd\n);",
        "comment": "Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated."
    },
    "BroadcastSystemMessage": {
        "prototype": "long BroadcastSystemMessageW(\n  DWORD   flags,\n  LPDWORD lpInfo,\n  UINT    Msg,\n  WPARAM  wParam,\n  LPARAM  lParam\n);",
        "comment": "Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components."
    },
    "BroadcastSystemMessageEx": {
        "prototype": "long BroadcastSystemMessageExW(\n  DWORD    flags,\n  LPDWORD  lpInfo,\n  UINT     Msg,\n  WPARAM   wParam,\n  LPARAM   lParam,\n  PBSMINFO pbsmInfo\n);",
        "comment": "Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components."
    },
    "BuildCommDCB": {
        "prototype": "BOOL BuildCommDCBW(\n  LPCWSTR lpDef,\n  LPDCB   lpDCB\n);",
        "comment": "Fills a specified DCB structure with values specified in a device-control string. The device-control string uses the syntax of the mode command."
    },
    "BuildCommDCBAndTimeouts": {
        "prototype": "BOOL BuildCommDCBAndTimeoutsW(\n  LPCWSTR        lpDef,\n  LPDCB          lpDCB,\n  LPCOMMTIMEOUTS lpCommTimeouts\n);",
        "comment": "Translates a device-definition string into appropriate device-control block codes and places them into a device control block. The function can also set up time-out values, including the possibility of no time-outs, for a device; the function's behavior in this regard depends on the contents of the device-definition string."
    },
    "CalculatePopupWindowPosition": {
        "prototype": "BOOL CalculatePopupWindowPosition(\n  const POINT *anchorPoint,\n  const SIZE  *windowSize,\n  UINT        flags,\n  RECT        *excludeRect,\n  RECT        *popupWindowPosition\n);",
        "comment": "Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle. When the specified pop-up window size is smaller than the desktop window size, use the CalculatePopupWindowPosition function to ensure that the pop-up window is fully visible on the desktop window, regardless of the specified anchor point."
    },
    "CallMsgFilter": {
        "prototype": "BOOL CallMsgFilterW(\n  LPMSG lpMsg,\n  int   nCode\n);",
        "comment": "Passes the specified message and hook code to the hook procedures associated with the WH_SYSMSGFILTER and WH_MSGFILTER hooks. A WH_SYSMSGFILTER or WH_MSGFILTER hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar."
    },
    "CallNamedPipe": {
        "prototype": "BOOL CallNamedPipeW(\n  LPCWSTR lpNamedPipeName,\n  LPVOID  lpInBuffer,\n  DWORD   nInBufferSize,\n  LPVOID  lpOutBuffer,\n  DWORD   nOutBufferSize,\n  LPDWORD lpBytesRead,\n  DWORD   nTimeOut\n);",
        "comment": "Connects to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe."
    },
    "CallNextHookEx": {
        "prototype": "LRESULT CallNextHookEx(\n  HHOOK  hhk,\n  int    nCode,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information."
    },
    "CallNtPowerInformation": {
        "prototype": "NTSTATUS CallNtPowerInformation(\n  POWER_INFORMATION_LEVEL InformationLevel,\n  PVOID                   InputBuffer,\n  ULONG                   InputBufferLength,\n  PVOID                   OutputBuffer,\n  ULONG                   OutputBufferLength\n);",
        "comment": "Sets or retrieves power information."
    },
    "CallWindowProc": {
        "prototype": "LRESULT CallWindowProcW(\n  WNDPROC lpPrevWndFunc,\n  HWND    hWnd,\n  UINT    Msg,\n  WPARAM  wParam,\n  LPARAM  lParam\n);",
        "comment": "Passes message information to the specified window procedure."
    },
    "CancelDC": {
        "prototype": "BOOL CancelDC(\n  HDC hdc\n);",
        "comment": "The CancelDC function cancels any pending operation on the specified device context (DC)."
    },
    "CancelIo": {
        "prototype": "BOOL CancelIo(\n  HANDLE hFile\n);",
        "comment": "Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file. The function does not cancel I/O operations that other threads issue for a file handle."
    },
    "CancelIoEx": {
        "prototype": "BOOL CancelIoEx(\n  HANDLE       hFile,\n  LPOVERLAPPED lpOverlapped\n);",
        "comment": "Marks any outstanding I/O operations for the specified file handle. The function only cancels I/O operations in the current process, regardless of which thread created the I/O operation."
    },
    "CancelSynchronousIo": {
        "prototype": "BOOL CancelSynchronousIo(\nHANDLE hThread\n);",
        "comment": "Marks pending synchronous I/O operations that are issued by the specified thread as canceled."
    },
    "CascadeWindows": {
        "prototype": "WORD CascadeWindows(\n  HWND       hwndParent,\n  UINT       wHow,\n  const RECT *lpRect,\n  UINT       cKids,\n  const HWND *lpKids\n);",
        "comment": "Cascades the specified child windows of the specified parent window."
    },
    "ChangeClipboardChain": {
        "prototype": "BOOL ChangeClipboardChain(\n  HWND hWndRemove,\n  HWND hWndNewNext\n);",
        "comment": "Removes a specified window from the chain of clipboard viewers."
    },
    "ChangeDisplaySettings": {
        "prototype": "LONG ChangeDisplaySettingsW(\n  DEVMODEW *lpDevMode,\n  DWORD    dwFlags\n);",
        "comment": "The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode."
    },
    "ChangeDisplaySettingsEx": {
        "prototype": "LONG ChangeDisplaySettingsExW(\n  LPCWSTR  lpszDeviceName,\n  DEVMODEW *lpDevMode,\n  HWND     hwnd,\n  DWORD    dwflags,\n  LPVOID   lParam\n);",
        "comment": "The ChangeDisplaySettingsEx function changes the settings of the specified display device to the specified graphics mode."
    },
    "ChangeServiceConfig2": {
        "prototype": "BOOL ChangeServiceConfig2W(\n  [in]           SC_HANDLE hService,\n  [in]           DWORD     dwInfoLevel,\n  [in, optional] LPVOID    lpInfo\n);",
        "comment": ""
    },
    "ChangeWindowMessageFilter": {
        "prototype": "BOOL ChangeWindowMessageFilter(\n  UINT  message,\n  DWORD dwFlag\n);",
        "comment": "Adds or removes a message from the User Interface Privilege Isolation (UIPI) message filter."
    },
    "ChangeWindowMessageFilterEx": {
        "prototype": "BOOL ChangeWindowMessageFilterEx(\n  HWND                hwnd,\n  UINT                message,\n  DWORD               action,\n  PCHANGEFILTERSTRUCT pChangeFilterStruct\n);",
        "comment": "Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window."
    },
    "CheckDlgButton": {
        "prototype": "BOOL CheckDlgButton(\n  HWND hDlg,\n  int  nIDButton,\n  UINT uCheck\n);",
        "comment": "Changes the check state of a button control."
    },
    "CheckRadioButton": {
        "prototype": "BOOL CheckRadioButton(\n  HWND hDlg,\n  int  nIDFirstButton,\n  int  nIDLastButton,\n  int  nIDCheckButton\n);",
        "comment": "Adds a check mark to (checks) a specified radio button in a group and removes a check mark from (clears) all other radio buttons in the group."
    },
    "CheckRemoteDebuggerPresent": {
        "prototype": "BOOL CheckRemoteDebuggerPresent(\n  HANDLE hProcess,\n  PBOOL  pbDebuggerPresent\n      );",
        "comment": "Determines whether the specified process is being debugged."
    },
    "ChildWindowFromPoint": {
        "prototype": "HWND ChildWindowFromPoint(\n  HWND  hWndParent,\n  POINT Point\n);",
        "comment": "Determines which, if any, of the child windows belonging to a parent window contains the specified point. The search is restricted to immediate child windows. Grandchildren, and deeper descendant windows are not searched."
    },
    "ChildWindowFromPointEx": {
        "prototype": "HWND ChildWindowFromPointEx(\n  HWND  hwnd,\n  POINT pt,\n  UINT  flags\n);",
        "comment": "Determines which, if any, of the child windows belonging to the specified parent window contains the specified point. The function can ignore invisible, disabled, and transparent child windows. Grandchildren and deeper descendants are not searched."
    },
    "ChooseColor": {
        "prototype": "BOOL ChooseColorW(\n  _Inout_ LPCHOOSECOLOR lpcc\n);",
        "comment": "Creates a Color dialog box that enables the user to select a color."
    },
    "ChooseFont": {
        "prototype": "BOOL ChooseFontW(\n  _Inout_ LPCHOOSEFONT lpcf\n);",
        "comment": "Creates a Font dialog box that enables the user to choose attributes for a logical font. These attributes include a font family and associated font style, a point size, effects (underline, strikeout, and text color), and a script (or character set)."
    },
    "Chord": {
        "prototype": "BOOL Chord(\n  HDC hdc,\n  int x1,\n  int y1,\n  int x2,\n  int y2,\n  int x3,\n  int y3,\n  int x4,\n  int y4\n);",
        "comment": "The Chord function draws a chord (a region bounded by the intersection of an ellipse and a line segment, called a secant). The chord is outlined by using the current pen and filled by using the current brush."
    },
    "ClearCommBreak": {
        "prototype": "BOOL ClearCommBreak(\n  HANDLE hFile\n);",
        "comment": "Restores character transmission for a specified communications device and places the transmission line in a nonbreak state."
    },
    "ClearCommError": {
        "prototype": "BOOL ClearCommError(\n  HANDLE    hFile,\n  LPDWORD   lpErrors,\n  LPCOMSTAT lpStat\n);",
        "comment": "Retrieves information about a communications error and reports the current status of a communications device. The function is called when a communications error occurs, and it clears the device's error flag to enable additional input and output (I/O) operations."
    },
    "ClientToScreen": {
        "prototype": "BOOL ClientToScreen(\n  HWND    hWnd,\n  LPPOINT lpPoint\n);",
        "comment": "The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates."
    },
    "ClipCursor": {
        "prototype": "BOOL ClipCursor(\n  const RECT *lpRect\n);",
        "comment": "Confines the cursor to a rectangular area on the screen. If a subsequent cursor position (set by the SetCursorPos function or the mouse) lies outside the rectangle, the system automatically adjusts the position to keep the cursor inside the rectangular area."
    },
    "CloseClipboard": {
        "prototype": "BOOL CloseClipboard();",
        "comment": "Closes the clipboard."
    },
    "CloseFigure": {
        "prototype": "BOOL CloseFigure(\n  HDC hdc);",
        "comment": "The CloseFigure function closes an open figure in a path."
    },
    "CloseGestureInfoHandle": {
        "prototype": "BOOL CloseGestureInfoHandle(\n  HGESTUREINFO hGestureInfo\n);",
        "comment": "Closes resources associated with a gesture information handle."
    },
    "CloseHandle": {
        "prototype": "BOOL CloseHandle(\n  HANDLE hObject\n);",
        "comment": "Closes an open object handle."
    },
    "ClosePrinter": {
        "prototype": "BOOL ClosePrinter(\n  _In_ HANDLE hPrinter\n  );",
        "comment": "The ClosePrinter function closes the specified printer object.",
        "category": "winspool"
    },
    "ClosePseudoConsole": {
        "prototype": "void ClosePseudoConsole(\n  _In_ HPCON hPC\n);",
        "comment": "Closes a pseudoconsole from the given handle.",
        "minimumWindowsVersion": "WIN10_RS5"
    },
    "CloseServiceHandle": {
        "prototype": "BOOL CloseServiceHandle(\n  [in] SC_HANDLE hSCObject\n);",
        "comment": "Closes a handle to a service control manager or service object."
    },
    "closesocket": {
        "prototype": "int closesocket(\n  SOCKET s\n);",
        "comment": "The closesocket function closes an existing socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "CloseSpoolFileHandle": {
        "prototype": "BOOL CloseSpoolFileHandle(\n  _In_ HANDLE hPrinter,\n  _In_ HANDLE hSpoolFile\n);",
        "comment": "The CloseSpoolFileHandle function closes a handle to a spool file associated with the print job currently submitted by the application."
    },
    "CloseThemeData": {
        "prototype": "HRESULT CloseThemeData(\n  HTHEME hTheme\n);",
        "comment": "Closes the theme data handle."
    },
    "CloseTouchInputHandle": {
        "prototype": "BOOL CloseTouchInputHandle(\n  HTOUCHINPUT hTouchInput\n);",
        "comment": "Closes a touch input handle, frees process memory associated with it, and invalidates the handle."
    },
    "CloseWindow": {
        "prototype": "BOOL CloseWindow(\n  HWND hWnd\n);",
        "comment": "Minimizes (but does not destroy) the specified window."
    },
    "CLSIDFromProgID": {
        "prototype": "HRESULT CLSIDFromProgID(\n  LPCOLESTR lpszProgID,\n  LPCLSID   lpclsid\n);",
        "comment": "Looks up a CLSID in the registry, given a ProgID."
    },
    "CLSIDFromProgIDEx": {
        "prototype": "HRESULT CLSIDFromProgIDEx(\n  LPCOLESTR lpszProgID,\n  LPCLSID   lpclsid\n);",
        "comment": "Triggers automatic installation if the COMClassStore policy is enabled."
    },
    "CLSIDFromString": {
        "prototype": "HRESULT CLSIDFromString(\n  LPCOLESTR lpsz,\n  LPCLSID   pclsid\n);",
        "comment": "Converts a string generated by the StringFromCLSID function back into the original CLSID."
    },
    "CoAddRefServerProcess": {
        "prototype": "ULONG CoAddRefServerProcess();",
        "comment": "Increments a global per-process reference count."
    },
    "CoCreateGuid": {
        "prototype": "HRESULT CoCreateGuid(\n  GUID *pguid\n);",
        "comment": "Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers."
    },
    "CoCreateInstance": {
        "prototype": "HRESULT CoCreateInstance(\n  REFCLSID  rclsid,\n  LPUNKNOWN pUnkOuter,\n  DWORD     dwClsContext,\n  REFIID    riid,\n  LPVOID    *ppv\n);",
        "comment": "Creates a single uninitialized object of the class associated with a specified CLSID. Call CoCreateInstance when you want to create only one object on the local system. To create a single object on a remote system, call the CoCreateInstanceEx function. To create multiple objects based on a single CLSID, call the CoGetClassObject function."
    },
    "CoDecrementMTAUsage": {
        "prototype": "HRESULT CoDecrementMTAUsage(\n  [in] CO_MTA_USAGE_COOKIE Cookie\n);",
        "comment": "Releases the increment made by a previous call to the CoIncrementMTAUsage function."
    },
    "CoGetApartmentType": {
        "prototype": "HRESULT CoGetApartmentType(\n  [out] APTTYPE          *pAptType,\n  [out] APTTYPEQUALIFIER *pAptQualifier\n);",
        "comment": "Returns the current apartment type and type qualifier."
    },
    "CoGetClassObject": {
        "prototype": "HRESULT CoGetClassObject(\n  REFCLSID rclsid,\n  DWORD    dwClsContext,\n  LPVOID   pvReserved,\n  REFIID   riid,\n  LPVOID   *ppv\n);",
        "comment": "Provides a pointer to an interface on a class object associated with a specified CLSID. CoGetClassObject locates, and if necessary, dynamically loads the executable code required to do this."
    },
    "CoGetCurrentProcess": {
        "prototype": "DWORD CoGetCurrentProcess();",
        "comment": "Returns a value that is unique to the current thread. CoGetCurrentProcess can be used to avoid thread ID reuse problems."
    },
    "CoIncrementMTAUsage": {
        "prototype": "HRESULT CoIncrementMTAUsage(\n  [out] CO_MTA_USAGE_COOKIE *pCookie\n);",
        "comment": "Keeps MTA support active when no MTA threads are running."
    },
    "CoInitializeEx": {
        "prototype": "HRESULT CoInitializeEx(\n  LPVOID pvReserved,\n  DWORD  dwCoInit\n);",
        "comment": "Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required."
    },
    "CoInitializeSecurity": {
        "prototype": "HRESULT CoInitializeSecurity(\n  PSECURITY_DESCRIPTOR        pSecDesc,\n  LONG                        cAuthSvc,\n  SOLE_AUTHENTICATION_SERVICE *asAuthSvc,\n  void                        *pReserved1,\n  DWORD                       dwAuthnLevel,\n  DWORD                       dwImpLevel,\n  void                        *pAuthList,\n  DWORD                       dwCapabilities,\n  void                        *pReserved3\n);",
        "comment": "Registers security and sets the default security values for the process."
    },
    "CommandLineToArgvW": {
        "prototype": "LPWSTR CommandLineToArgvW(\n  LPCWSTR lpCmdLine,\n  int     *pNumArgs\n);",
        "comment": "Retrieves the command-line string for the current process."
    },
    "CommConfigDialog": {
        "prototype": "BOOL CommConfigDialogW(\n  LPCWSTR      lpszName,\n  HWND         hWnd,\n  LPCOMMCONFIG lpCC\n);",
        "comment": "Displays a driver-supplied configuration dialog box."
    },
    "CommitSpoolData": {
        "prototype": "HANDLE CommitSpoolData(\n  _In_ HANDLE hPrinter,\n  _In_ HANDLE hSpoolFile,\n       DWORD  cbCommit\n);",
        "comment": "The CommitSpoolData function notifies the print spooler that a specified amount of data has been written to a specified spool file and is ready to be rendered."
    },
    "CompareObjectHandles": {
        "prototype": "BOOL CompareObjectHandles(\n  HANDLE hFirstObjectHandle,\n  HANDLE hSecondObjectHandle\n);",
        "comment": "Compares two object handles to determine if they refer to the same underlying kernel object.",
        "category": "kernel32",
        "minimumWindowsVersion": "WIN10_TH1"
    },
    "ConfigurePort": {
        "prototype": "BOOL ConfigurePortW(\n  _In_ LPTSTR pName,\n  _In_ HWND   hWnd,\n  _In_ LPTSTR pPortName\n);",
        "comment": "The ConfigurePort function displays the port-configuration dialog box for a port on the specified server."
    },
    "connect": {
        "prototype": "int connect(\n  SOCKET         s,\n  const sockaddr *name,\n  int            namelen\n);",
        "comment": "The connect function establishes a connection to a specified socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "ConnectNamedPipe": {
        "prototype": "BOOL ConnectNamedPipe(\n  HANDLE       hNamedPipe,\n  LPOVERLAPPED lpOverlapped);",
        "comment": "Enables a named pipe server process to wait for a client process to connect to an instance of a named pipe. A client process connects by calling either the CreateFile or CallNamedPipe function."
    },
    "ConnectToPrinterDlg": {
        "prototype": "HANDLE ConnectToPrinterDlg(\n  _In_ HWND  hwnd,\n  _In_ DWORD Flags\n);",
        "comment": "The ConnectToPrinterDlg function displays a dialog box that lets users browse and connect to printers on a network. If the user selects a printer, the function attempts to create a connection to it; if a suitable driver is not installed on the server, the user is given the option of creating a printer locally."
    },
    "ContinueDebugEvent": {
        "prototype": "BOOL ContinueDebugEvent(\n  DWORD dwProcessId,\n  DWORD dwThreadId,\n  DWORD dwContinueStatus\n);",
        "comment": "Enables a debugger to continue a thread that previously reported a debugging event."
    },
    "ControlService": {
        "prototype": "BOOL ControlService(\n  [in]  SC_HANDLE        hService,\n  [in]  DWORD            dwControl,\n  [out] LPSERVICE_STATUS lpServiceStatus\n);",
        "comment": "Sends a control code to a service."
    },
    "ControlServiceEx": {
        "prototype": "BOOL ControlServiceExW(\n  [in]      SC_HANDLE hService,\n  [in]      DWORD     dwControl,\n  [in]      DWORD     dwInfoLevel,\n  [in, out] PVOID     pControlParams\n);",
        "comment": "Sends a control code to a service."
    },
    "ConvertInterfaceGuidToLuid": {
        "prototype": "ConvertInterfaceGuidToLuid(\n  [in]  const GUID *InterfaceGuid,\n  [out] PNET_LUID  InterfaceLuid\n);",
        "comment": "The ConvertInterfaceGuidToLuid function converts a globally unique identifier (GUID) for a network interface to the locally unique identifier (LUID) for the interface."
    },
    "CopyAcceleratorTable": {
        "prototype": "int CopyAcceleratorTableW(\n  HACCEL  hAccelSrc,\n  LPACCEL lpAccelDst,\n  int     cAccelEntries\n);",
        "comment": "Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data."
    },
    "CopyIcon": {
        "prototype": "HICON CopyIcon(\n  HICON hIcon\n);",
        "comment": "Copies the specified icon from another module to the current module."
    },
    "CopyImage": {
        "prototype": "HANDLE CopyImage(\n  HANDLE h,\n  UINT   type,\n  int    cx,\n  int    cy,\n  UINT   flags\n);",
        "comment": "Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image."
    },
    "CopyRect": {
        "prototype": "BOOL CopyRect(\n  LPRECT     lprcDst,\n  const RECT *lprcSrc\n);",
        "comment": "The CopyRect function copies the coordinates of one rectangle to another."
    },
    "CoSetProxyBlanket": {
        "prototype": "HRESULT CoSetProxyBlanket(\n  IUnknown                 *pProxy,\n  DWORD                    dwAuthnSvc,\n  DWORD                    dwAuthzSvc,\n  OLECHAR                  *pServerPrincName,\n  DWORD                    dwAuthnLevel,\n  DWORD                    dwImpLevel,\n  RPC_AUTH_IDENTITY_HANDLE pAuthInfo,\n  DWORD                    dwCapabilities\n);",
        "comment": "Sets the authentication information that will be used to make calls on the specified proxy. This is a helper function for IClientSecurity::SetBlanket."
    },
    "CoTaskMemAlloc": {
        "prototype": "LPVOID CoTaskMemAlloc(\n  SIZE_T cb\n);",
        "comment": "Allocates a block of task memory in the same way that IMalloc::Alloc does."
    },
    "CoTaskMemFree": {
        "prototype": "void CoTaskMemFree(\n  _Frees_ptr_opt_ LPVOID pv\n);",
        "comment": "Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function."
    },
    "CoTaskMemRealloc": {
        "prototype": "LPVOID CoTaskMemRealloc(\n  LPVOID pv,\n  SIZE_T cb\n);",
        "comment": "Changes the size of a previously allocated block of task memory."
    },
    "CoUninitialize": {
        "prototype": "void CoUninitialize();",
        "comment": "Closes the COM library on the current thread, unloads all DLLs loaded by the thread, frees any other resources that the thread maintains, and forces all RPC connections on the thread to close."
    },
    "CountClipboardFormats": {
        "prototype": "int CountClipboardFormats();",
        "comment": "Retrieves the number of different data formats currently on the clipboard."
    },
    "CoWaitForMultipleHandles": {
        "prototype": "HRESULT CoWaitForMultipleHandles(\n  DWORD    dwFlags,\n  DWORD    dwTimeout,\n  ULONG    cHandles,\n  LPHANDLE pHandles,\n  LPDWORD  lpdwindex\n);",
        "comment": "Waits for specified handles to be signaled or for a specified timeout period to elapse."
    },
    "CoWaitForMultipleObjects": {
        "prototype": "HRESULT CoWaitForMultipleObjects(\n  DWORD        dwFlags,\n  DWORD        dwTimeout,\n  ULONG        cHandles,\n  const HANDLE *pHandles,\n  LPDWORD      lpdwindex\n);",
        "comment": "A replacement for CoWaitForMultipleHandles. This replacement API hides the options for CoWaitForMultipleHandles that are not supported in ASTA.",
        "minimumWindowsVersion": "WIN10_TH2"
    },
    "CreateAcceleratorTable": {
        "prototype": "HACCEL CreateAcceleratorTableW(\n  LPACCEL paccel,\n  int     cAccel\n);",
        "comment": "Creates an accelerator table."
    },
    "CreateActCtx": {
        "prototype": "HANDLE CreateActCtxW(\n  PCACTCTXW pActCtx\n);",
        "comment": "The CreateActCtx function creates an activation context."
    },
    "CreateBitmap": {
        "prototype": "HBITMAP CreateBitmap(\n  [in] int        nWidth,\n  [in] int        nHeight,\n  [in] UINT       nPlanes,\n  [in] UINT       nBitCount,\n  [in] const VOID *lpBits\n);",
        "comment": "The CreateBitmap function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel)."
    },
    "CreateBitmapIndirect": {
        "prototype": "HBITMAP CreateBitmapIndirect(\n  [in] const BITMAP *pbm\n);",
        "comment": "The CreateBitmapIndirect function creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel)."
    },
    "CreateCaret": {
        "prototype": "BOOL CreateCaret(\n  [in]           HWND    hWnd,\n  [in, optional] HBITMAP hBitmap,\n  [in]           int     nWidth,\n  [in]           int     nHeight\n);",
        "comment": "Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap."
    },
    "CreateCompatibleBitmap": {
        "prototype": "HBITMAP CreateCompatibleBitmap(\n  HDC hdc,\n  int cx,\n  int cy\n);",
        "comment": "The CreateCompatibleBitmap function creates a bitmap compatible with the device that is associated with the specified device context."
    },
    "CreateCompatibleDC": {
        "prototype": "HDC CreateCompatibleDC(\n  HDC hdc\n);",
        "comment": "The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device."
    },
    "CreateConsoleScreenBuffer": {
        "prototype": "HANDLE CreateConsoleScreenBuffer(\n  _In_             DWORD               dwDesiredAccess,\n  _In_             DWORD               dwShareMode,\n  _In_opt_   const SECURITY_ATTRIBUTES *lpSecurityAttributes,\n  _In_             DWORD               dwFlags,\n  _Reserved_       LPVOID              lpScreenBufferData\n);",
        "comment": "Creates a console screen buffer."
    },
    "CreateCursor": {
        "prototype": "HCURSOR CreateCursor(\n  [in, optional] HINSTANCE  hInst,\n  [in]           int        xHotSpot,\n  [in]           int        yHotSpot,\n  [in]           int        nWidth,\n  [in]           int        nHeight,\n  [in]           const VOID *pvANDPlane,\n  [in]           const VOID *pvXORPlane\n);",
        "comment": "Creates a monochrome cursor having the specified size, bit patterns, and hot spot."
    },
    "CreateDC": {
        "prototype": "HDC CreateDCW(\n  LPCWSTR        pwszDriver,\n  LPCWSTR        pwszDevice,\n  LPCWSTR        pszPort,\n  const DEVMODEW *pdm\n);",
        "comment": "The CreateDC function creates a device context (DC) for a device using the specified name."
    },
    "CreateDesktop": {
        "prototype": "HDESK CreateDesktopW(\n  LPCWSTR               lpszDesktop,\n  LPCWSTR               lpszDevice,\n  DEVMODEW              *pDevmode,\n  DWORD                 dwFlags,\n  ACCESS_MASK           dwDesiredAccess,\n  LPSECURITY_ATTRIBUTES lpsa\n);",
        "comment": "Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the SetProcessWindowStation function."
    },
    "CreateDesktopEx": {
        "prototype": "HDESK CreateDesktopExW(\n  LPCWSTR               lpszDesktop,\n  LPCWSTR               lpszDevice,\n  DEVMODEW              *pDevmode,\n  DWORD                 dwFlags,\n  ACCESS_MASK           dwDesiredAccess,\n  LPSECURITY_ATTRIBUTES lpsa,\n  ULONG                 ulHeapSize,\n  PVOID                 pvoid\n);",
        "comment": "Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the SetProcessWindowStation function."
    },
    "CreateDialogIndirectParam": {
        "prototype": "HWND CreateDialogIndirectParamW(\n  HINSTANCE       hInstance,\n  LPCDLGTEMPLATEW lpTemplate,\n  HWND            hWndParent,\n  DLGPROC         lpDialogFunc,\n  LPARAM          dwInitParam\n);",
        "comment": "Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls."
    },
    "CreateDIBitmap": {
        "prototype": "HBITMAP CreateDIBitmap(\n  HDC                    hdc,\n  const BITMAPINFOHEADER *pbmih,\n  DWORD                  flInit,\n  const VOID             *pjBits,\n  const BITMAPINFO       *pbmi,\n  UINT                   iUsage\n);",
        "comment": "The CreateDIBitmap function creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits."
    },
    "CreateDIBPatternBrushPt": {
        "prototype": "HBRUSH CreateDIBPatternBrushPt(\n  const VOID *lpPackedDIB,\n  UINT       iUsage\n);",
        "comment": "The CreateDIBPatternBrushPt function creates a logical brush that has the pattern specified by the device-independent bitmap (DIB)."
    },
    "CreateDIBSection": {
        "prototype": "HBITMAP CreateDIBSection(\n  HDC              hdc,\n  const BITMAPINFO *pbmi,\n  UINT             usage,\n  VOID             **ppvBits,\n  HANDLE           hSection,\n  DWORD            offset);",
        "comment": "The CreateDIBSection function creates a DIB that applications can write to directly. The function gives you a pointer to the location of the bitmap bit values. You can supply a handle to a file-mapping object that the function will use to create the bitmap, or you can let the system allocate the memory for the bitmap."
    },
    "CreateDirectory": {
        "prototype": "BOOL CreateDirectoryW(\n  LPCWSTR               lpPathName,\n  LPSECURITY_ATTRIBUTES lpSecurityAttributes\n);",
        "comment": "Creates a new directory. If the underlying file system supports security on files and directories, the function applies a specified security descriptor to the new directory."
    },
    "CreateEllipticRgn": {
        "prototype": "HRGN CreateEllipticRgn(\n  int x1,\n  int y1,\n  int x2,\n  int y2\n);",
        "comment": "The CreateEllipticRgn function creates an elliptical region."
    },
    "CreateEvent": {
        "prototype": "HANDLE CreateEventW(\n  LPSECURITY_ATTRIBUTES lpEventAttributes,\n  BOOL bManualReset,\n  BOOL  bInitialState,\n  LPCWSTR lpName\n);",
        "comment": "Creates or opens a named or unnamed event object."
    },
    "CreateEventEx": {
        "prototype": "HANDLE CreateEventExW(\n  LPSECURITY_ATTRIBUTES lpEventAttributes,\n  LPCWSTR               lpName,\n  DWORD                 dwFlags,\n  DWORD                 dwDesiredAccess\n);",
        "comment": "Creates or opens a named or unnamed event object and returns a handle to the object."
    },
    "CreateFile": {
        "prototype": "HANDLE CreateFileW(\n  LPCWSTR               lpFileName,\n  DWORD                 dwDesiredAccess,\n  DWORD                 dwShareMode,\n  LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n  DWORD                 dwCreationDisposition,\n  DWORD                 dwFlagsAndAttributes,\n  HANDLE                hTemplateFile\n);",
        "comment": "Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe. The function returns a handle that can be used to access the file or device for various types of I/O depending on the file or device and the flags and attributes specified."
    },
    "CreateFile2": {
        "prototype": "HANDLE CreateFile2(\n  [in]           LPCWSTR                           lpFileName,\n  [in]           DWORD                             dwDesiredAccess,\n  [in]           DWORD                             dwShareMode,\n  [in]           DWORD                             dwCreationDisposition,\n  [in, optional] LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams\n);",
        "comment": "Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe. The function returns a handle that can be used to access the file or device for various types of I/O depending on the file or device and the flags and attributes specified.",
        "minimumWindowsVersion": "WIN81"
    },
    "CreateFontIndirect": {
        "prototype": "HFONT CreateFontIndirectW(\n  const LOGFONTW *lplf\n);",
        "comment": "The CreateFontIndirect function creates a logical font that has the specified characteristics. The font can subsequently be selected as the current font for any device context."
    },
    "CreateHalftonePalette": {
        "prototype": "HPALETTE CreateHalftonePalette(\n  HDC hdc\n);",
        "comment": "The CreateHalftonePalette function creates a halftone palette for the specified device context (DC)."
    },
    "CreateHatchBrush": {
        "prototype": "HBRUSH CreateHatchBrush(\n  int      iHatch,\n  COLORREF color\n);",
        "comment": "The CreateHatchBrush function creates a logical brush that has the specified hatch pattern and color."
    },
    "CreateIcon": {
        "prototype": "HICON CreateIcon(\n  HINSTANCE  hInstance,\n  int        nWidth,\n  int        nHeight,\n  BYTE       cPlanes,\n  BYTE       cBitsPixel,\n  const BYTE *lpbANDbits,\n  const BYTE *lpbXORbits\n);",
        "comment": "Creates an icon that has the specified size, colors, and bit patterns."
    },
    "CreateIconFromResource": {
        "prototype": "HICON CreateIconFromResource(\n  [in] PBYTE presbits,\n  [in] DWORD dwResSize,\n  [in] BOOL  fIcon,\n  [in] DWORD dwVer\n);",
        "comment": "Creates an icon or cursor from resource bits describing the icon."
    },
    "CreateIconFromResourceEx": {
        "prototype": "HICON CreateIconFromResourceEx(\n  [in] PBYTE presbits,\n  [in] DWORD dwResSize,\n  [in] BOOL  fIcon,\n  [in] DWORD dwVer,\n  [in] int   cxDesired,\n  [in] int   cyDesired,\n  [in] UINT  Flags\n);",
        "comment": "Creates an icon or cursor from resource bits describing the icon."
    },
    "CreateIconIndirect": {
        "prototype": "HICON CreateIconIndirect(\n  [in] PICONINFO piconinfo\n);",
        "comment": "Creates an icon or cursor from an ICONINFO structure."
    },
    "CreateIoCompletionPort": {
        "prototype": "HANDLE CreateIoCompletionPort(\n  HANDLE    FileHandle,\n  HANDLE    ExistingCompletionPort,\n  ULONG_PTR CompletionKey,\n  DWORD     NumberOfConcurrentThreads\n);",
        "comment": "Creates an input/output (I/O) completion port and associates it with a specified file handle, or creates an I/O completion port that is not yet associated with a file handle, allowing association at a later time."
    },
    "CreateJobObject": {
        "prototype": "HANDLE CreateJobObjectW(\n  [in, optional] LPSECURITY_ATTRIBUTES lpJobAttributes,\n  [in, optional] LPCWSTR               lpName\n);",
        "comment": "Creates or opens a job object."
    },
    "CreateMDIWindow": {
        "prototype": "HWND CreateMDIWindowW(\n  LPCWSTR   lpClassName,\n  LPCWSTR   lpWindowName,\n  DWORD     dwStyle,\n  int       X,\n  int       Y,\n  int       nWidth,\n  int       nHeight,\n  HWND      hWndParent,\n  HINSTANCE hInstance,\n  LPARAM    lParam\n);",
        "comment": "Creates a multiple-document interface (MDI) child window."
    },
    "CreateMenu": {
        "prototype": "HMENU CreateMenu();",
        "comment": "Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions."
    },
    "CreateNamedPipe": {
        "prototype": "HANDLE CreateNamedPipeW(\n  LPCWSTR                lpName,\n  DWORD                 dwOpenMode,\n  DWORD                 dwPipeMode,\n  DWORD                 nMaxInstances,\n  DWORD                 nOutBufferSize,\n  DWORD                 nInBufferSize,\n  DWORD                 nDefaultTimeOut,\n  LPSECURITY_ATTRIBUTES lpSecurityAttributes);",
        "comment": "Creates an instance of a named pipe and returns a handle for subsequent pipe operations. A named pipe server process uses this function either to create the first instance of a specific named pipe and establish its basic attributes or to create a new instance of an existing named pipe."
    },
    "CreatePen": {
        "prototype": "HPEN CreatePen(\n  int      iStyle,\n  int      cWidth,\n  COLORREF color\n);",
        "comment": "The CreatePen function creates a logical pen that has the specified style, width, and color. The pen can subsequently be selected into a device context and used to draw lines and curves."
    },
    "CreatePipe": {
        "prototype": "BOOL CreatePipe(\n  PHANDLE               hReadPipe,\n  PHANDLE               hWritePipe,\n  LPSECURITY_ATTRIBUTES lpPipeAttributes,\n  DWORD                 nSize\n);",
        "comment": "Creates an anonymous pipe, and returns handles to the read and write ends of the pipe."
    },
    "CreatePopupMenu": {
        "prototype": "HMENU CreatePopupMenu();",
        "comment": "Creates a drop-down menu, submenu, or shortcut menu. The menu is initially empty. You can insert or append menu items by using the InsertMenuItem function. You can also use the InsertMenu function to insert menu items and the AppendMenu function to append menu items."
    },
    "CreateProcess": {
        "prototype": "BOOL CreateProcessW(\n  LPCWSTR               lpApplicationName,\n  LPWSTR                lpCommandLine,\n  LPSECURITY_ATTRIBUTES lpProcessAttributes,\n  LPSECURITY_ATTRIBUTES lpThreadAttributes,\n  BOOL                  bInheritHandles,\n  DWORD                 dwCreationFlags,\n  LPVOID                lpEnvironment,\n  LPCWSTR               lpCurrentDirectory,\n  LPSTARTUPINFOW        lpStartupInfo,\n  LPPROCESS_INFORMATION lpProcessInformation\n);",
        "comment": "Creates a new process and its primary thread. The new process runs in the security context of the calling process."
    },
    "CreatePseudoConsole": {
        "prototype": "HRESULT CreatePseudoConsole(\n  _In_ COORD size,\n  _In_ HANDLE hInput,\n  _In_ HANDLE hOutput,\n  _In_ DWORD dwFlags,\n  _Out_ HPCON* phPC\n);",
        "comment": "Creates a new pseudoconsole object for the calling process.",
        "minimumWindowsVersion": "WIN10_RS5"
    },
    "CreateRemoteThread": {
        "prototype": "HANDLE CreateRemoteThread(\n  HANDLE hProcess,\n  LPSECURITY_ATTRIBUTES lpThreadAttributes,\n  SIZE_T dwStackSize,\n  LPTHREAD_START_ROUTINE lpStartAddress,\n  LPVOID lpParameter,\n  DWORD dwCreationFlags,\n  LPDWORD lpThreadId\n);",
        "comment": "Creates a thread that runs in the virtual address space of another process. Use the CreateRemoteThreadEx function to create a thread that runs in the virtual address space of another process and optionally specify extended attributes."
    },
    "CreateRemoteThreadEx": {
        "prototype": "HANDLE CreateRemoteThreadEx(\n  HANDLE hProcess,\n  LPSECURITY_ATTRIBUTES lpThreadAttributes,\n  SIZE_T dwStackSize,\n  LPTHREAD_START_ROUTINE lpStartAddress,\n  LPVOID lpParameter,\n  DWORD dwCreationFlags,\n  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,\n  LPDWORD lpThreadId\n);",
        "comment": "Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity."
    },
    "CreateSolidBrush": {
        "prototype": "HBRUSH CreateSolidBrush(\n  COLORREF color\n);",
        "comment": "The CreateSolidBrush function creates a logical brush that has the specified solid color."
    },
    "CreateStreamOnHGlobal": {
        "prototype": "HRESULT CreateStreamOnHGlobal(\n  [in]  HGLOBAL  hGlobal,\n  [in]  BOOL     fDeleteOnRelease,\n  [out] LPSTREAM *ppstm\n);",
        "comment": "The CreateStreamOnHGlobal function creates a stream object that uses an HGLOBAL memory handle to store the stream contents. This object is the OLE-provided implementation of the IStream interface."
    },
    "CreateThread": {
        "prototype": "HANDLE CreateThread(\n  LPSECURITY_ATTRIBUTES lpThreadAttributes,\n  SIZE_T dwStackSize,\n  LPTHREAD_START_ROUTINE lpStartAddress,\n  LPVOID lpParameter,\n  DWORD dwCreationFlags,\n  LPDWORD lpThreadId\n);",
        "comment": "Creates a thread to execute within the virtual address space of the calling process."
    },
    "CreateWindowEx": {
        "prototype": "HWND CreateWindowExW(\n  DWORD     dwExStyle,\n  LPCWSTR   lpClassName,\n  LPCWSTR   lpWindowName,\n  DWORD     dwStyle,\n  int       X,\n  int       Y,\n  int       nWidth,\n  int       nHeight,\n  HWND      hWndParent,\n  HMENU     hMenu,\n  HINSTANCE hInstance,\n  LPVOID    lpParam\n);",
        "comment": "Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu."
    },
    "CreateWindowStation": {
        "prototype": "HWINSTA CreateWindowStationW(\n  LPCWSTR               lpwinsta,\n  DWORD                 dwFlags,\n  ACCESS_MASK           dwDesiredAccess,\n  LPSECURITY_ATTRIBUTES lpsa\n);",
        "comment": "Creates a window station object, associates it with the calling process, and assigns it to the current session."
    },
    "CredDelete": {
        "prototype": "BOOL CredDeleteW(\n  LPCWSTR TargetName,\n  DWORD   Type,\n  DWORD   Flags\n);",
        "comment": "The CredDelete function deletes a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled."
    },
    "CredFree": {
        "prototype": "void CredFree(\n  PVOID Buffer\n);",
        "comment": "The CredFree function frees a buffer returned by any of the credentials management functions."
    },
    "CredRead": {
        "prototype": "BOOL CredReadW(\n  LPCWSTR      TargetName,\n  DWORD        Type,\n  DWORD        Flags,\n  PCREDENTIALW *Credential\n);",
        "comment": "The CredRead function reads a credential from the user's credential set. The credential set used is the one associated with the logon session of the current token. The token must not have the user's SID disabled."
    },
    "CredWrite": {
        "prototype": "BOOL CredWriteW(\n  PCREDENTIALW Credential,\n  DWORD        Flags\n);",
        "comment": "The CredWrite function creates a new credential or modifies an existing credential in the user's credential set. The new credential is associated with the logon session of the current token. The token must not have the user's security identifier (SID) disabled."
    },
    "CryptProtectData": {
        "prototype": "BOOL CryptProtectData(\n  [in]           DATA_BLOB                 *pDataIn,\n  [in, optional] LPCWSTR                   szDataDescr,\n  [in, optional] DATA_BLOB                 *pOptionalEntropy,\n  [in]           PVOID                     pvReserved,\n  [in, optional] CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct,\n  [in]           DWORD                     dwFlags,\n  [out]          DATA_BLOB                 *pDataOut\n);",
        "comment": "The CryptProtectData function performs encryption on the data in a DATA_BLOB structure. Typically, only a user with the same logon credential as the user who encrypted the data can decrypt the data. In addition, the encryption and decryption usually must be done on the same computer."
    },
    "CryptProtectMemory": {
        "prototype": "BOOL CryptProtectMemory(\n  [in, out] LPVOID pDataIn,\n  [in]      DWORD  cbDataIn,\n  [in]      DWORD  dwFlags\n);",
        "comment": "The CryptProtectMemory function encrypts memory to prevent others from viewing sensitive information in your process. For example, use the CryptProtectMemory function to encrypt memory that contains a password. Encrypting the password prevents others from viewing it when the process is paged out to the swap file. Otherwise, the password is in plaintext and viewable by others."
    },
    "CryptUnprotectData": {
        "prototype": "BOOL CryptUnprotectData(\n  [in]            DATA_BLOB                 *pDataIn,\n  [out, optional] LPWSTR                    *ppszDataDescr,\n  [in, optional]  DATA_BLOB                 *pOptionalEntropy,\n                  PVOID                     pvReserved,\n  [in, optional]  CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct,\n  [in]            DWORD                     dwFlags,\n  [out]           DATA_BLOB                 *pDataOut\n);",
        "comment": "The CryptUnprotectData function decrypts and does an integrity check of the data in a DATA_BLOB structure. Usually, the only user who can decrypt the data is a user with the same logon credentials as the user who encrypted the data. In addition, the encryption and decryption must be done on the same computer."
    },
    "CryptUnprotectMemory": {
        "prototype": "BOOL CryptUnprotectMemory(\n  [in, out] LPVOID pDataIn,\n  [in]      DWORD  cbDataIn,\n  [in]      DWORD  dwFlags\n);",
        "comment": "The CryptUnprotectMemory function decrypts memory that was encrypted using the CryptProtectMemory function."
    },
    "CryptUpdateProtectedState": {
        "prototype": "BOOL CryptUpdateProtectedState(\n  [in]  PSID    pOldSid,\n  [in]  LPCWSTR pwszOldPassword,\n  [in]  DWORD   dwFlags,\n  [out] DWORD   *pdwSuccessCount,\n  [out] DWORD   *pdwFailureCount\n);",
        "comment": "The CryptUpdateProtectedState function migrates the current user's master keys after the user's security identifier (SID) has changed. This function can be used to preserve encrypted data after a user has been moved from one domain to another."
    },
    "DeactivateActCtx": {
        "prototype": "BOOL DeactivateActCtx(\n  DWORD     dwFlags,\n  ULONG_PTR ulCookie\n);",
        "comment": "The DeactivateActCtx function deactivates the activation context corresponding to the specified cookie."
    },
    "DebugBreak": {
        "prototype": "void DebugBreak();",
        "comment": "Causes a breakpoint exception to occur in the current process. This allows the calling thread to signal the debugger to handle the exception."
    },
    "DebugBreakProcess": {
        "prototype": "BOOL DebugBreakProcess(\n  HANDLE Process\n);",
        "comment": "Causes a breakpoint exception to occur in the specified process. This allows the calling thread to signal the debugger to handle the exception."
    },
    "DebugSetProcessKillOnExit": {
        "prototype": "BOOL DebugSetProcessKillOnExit(\n  BOOL KillOnExit\n);",
        "comment": "Sets the action to be performed when the calling thread exits."
    },
    "DecryptFile": {
        "prototype": "BOOL DecryptFileW(\n  LPCWSTR lpFileName,\n  DWORD   dwReserved\n);",
        "comment": "Decrypts an encrypted file or directory."
    },
    "DeferWindowPos": {
        "prototype": "HDWP DeferWindowPos(\n  HDWP hWinPosInfo,\n  HWND hWnd,\n  HWND hWndInsertAfter,\n  int  x,\n  int  y,\n  int  cx,\n  int  cy,\n  UINT uFlags\n);",
        "comment": "Updates the specified multiple-window – position structure for the specified window. The function then returns a handle to the updated structure. The EndDeferWindowPos function uses the information in this structure to change the position and size of a number of windows simultaneously. The BeginDeferWindowPos function creates the structure."
    },
    "DefineDosDevice": {
        "prototype": "BOOL DefineDosDeviceW(\n  [in]           DWORD   dwFlags,\n  [in]           LPCWSTR lpDeviceName,\n  [in, optional] LPCWSTR lpTargetPath\n);",
        "comment": "Defines, redefines, or deletes MS-DOS device names."
    },
    "DefMDIChildProc": {
        "prototype": "LRESULT DefMDIChildProcW(\n  HWND   hWnd,\n  UINT   uMsg,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the DefMDIChildProc function, not to the DefWindowProc function."
    },
    "DefRawInputProc": {
        "prototype": "LRESULT DefRawInputProc(\n  PRAWINPUT *paRawInput,\n  INT       nInput,\n  UINT      cbSizeHeader\n);",
        "comment": "Unlike DefWindowProcA and DefWindowProcW, this function doesn't do any processing. DefRawInputProc only checks whether cbSizeHeader's value corresponds to the expected size of RAWINPUTHEADER."
    },
    "DefSubclassProc": {
        "prototype": "LRESULT DefSubclassProc(\n  HWND   hWnd,\n  UINT   uMsg,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Calls the next handler in a window's subclass chain. The last handler in the subclass chain calls the original window procedure for the window."
    },
    "DefWindowProc": {
        "prototype": "LRESULT DefWindowProcW(\n  HWND   hWnd,\n  UINT   Msg,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure."
    },
    "DeleteDC": {
        "prototype": "BOOL DeleteDC(\n  HDC hdc\n);",
        "comment": "The DeleteDC function deletes the specified device context (DC)."
    },
    "DeleteFile": {
        "prototype": "BOOL DeleteFileW(\n  LPCWSTR lpFileName\n);",
        "comment": "Deletes an existing file."
    },
    "DeleteForm": {
        "prototype": "BOOL DeleteFormW(\n  _In_ HANDLE hPrinter,\n  _In_ LPTSTR pFormName\n);",
        "comment": "The DeleteForm function removes a form name from the list of supported forms."
    },
    "DeleteIPAddress": {
        "prototype": "DWORD DeleteIPAddress(\n  ULONG NTEContext\n);",
        "comment": "The DeleteIPAddress function deletes an IP address previously added using AddIPAddress."
    },
    "DeleteMenu": {
        "prototype": "BOOL DeleteMenu(\n  HMENU hMenu,\n  UINT  uPosition,\n  UINT  uFlags\n);",
        "comment": "Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu."
    },
    "DeleteObject": {
        "prototype": "BOOL DeleteObject(\n  HGDIOBJ ho\n);",
        "comment": "The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid."
    },
    "DeletePrinter": {
        "prototype": "BOOL DeletePrinter(\n  _Inout_ HANDLE hPrinter\n);",
        "comment": "The DeletePrinter function deletes the specified printer object.",
        "category": "winspool"
    },
    "DeletePrinterConnection": {
        "prototype": "BOOL DeletePrinterConnectionW(\n  _In_ LPTSTR pName\n);",
        "comment": "The DeletePrinterConnection function deletes a connection to a printer that was established by a call to AddPrinterConnection or ConnectToPrinterDlg."
    },
    "DeletePrinterData": {
        "prototype": "DWORD DeletePrinterDataW(\n  _In_ HANDLE hPrinter,\n  _In_ LPTSTR pValueName\n);",
        "comment": "The DeletePrinterData function deletes specified configuration data for a printer. A printer's configuration data consists of a set of named and typed values. The DeletePrinterData function deletes one of these values, specified by its value name."
    },
    "DeletePrinterDataEx": {
        "prototype": "DWORD DeletePrinterDataExW(\n  _In_ HANDLE  hPrinter,\n  _In_ LPCTSTR pKeyName,\n  _In_ LPCTSTR pValueName\n);",
        "comment": "The DeletePrinterDataEx function deletes a specified value from the configuration data for a printer. A printer's configuration data consists of a set of named and typed values stored in a hierarchy of registry keys. The function deletes a specified value under a specified key."
    },
    "DeletePrinterKey": {
        "prototype": "DWORD DeletePrinterKeyW(\n  _In_ HANDLE  hPrinter,\n  _In_ LPCTSTR pKeyName\n);",
        "comment": "The DeletePrinterKey function deletes a specified key and all its subkeys for a specified printer."
    },
    "DeleteService": {
        "prototype": "BOOL DeleteService(\n  [in] SC_HANDLE hService\n);",
        "comment": "Marks the specified service for deletion from the service control manager database."
    },
    "DeleteVolumeMountPoint": {
        "prototype": "BOOL DeleteVolumeMountPointW(\n  [in] LPCWSTR lpszVolumeMountPoint\n);",
        "comment": "Deletes a drive letter or mounted folder."
    },
    "DestroyAcceleratorTable": {
        "prototype": "BOOL DestroyAcceleratorTable(\n  [in] HACCEL hAccel\n);",
        "comment": "Destroys an accelerator table."
    },
    "DestroyCaret": {
        "prototype": "BOOL DestroyCaret();",
        "comment": "Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen."
    },
    "DestroyCursor": {
        "prototype": "BOOL DestroyCursor(\n  HCURSOR hCursor\n);",
        "comment": "Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor."
    },
    "DestroyIcon": {
        "prototype": "BOOL DestroyIcon(\n  HICON hIcon\n);",
        "comment": "Destroys an icon and frees any memory the icon occupied."
    },
    "DestroyMenu": {
        "prototype": "BOOL DestroyMenu(\n  HMENU hMenu\n);",
        "comment": "Destroys the specified menu and frees any memory that the menu occupies."
    },
    "DestroyPhysicalMonitor": {
        "prototype": "_BOOL DestroyPhysicalMonitor(\n  HANDLE hMonitor\n);",
        "comment": "Closes a handle to a physical monitor. Call this function to close a monitor handle obtained from the GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9 function."
    },
    "DestroyPhysicalMonitors": {
        "prototype": "_BOOL DestroyPhysicalMonitors(\n  DWORD              dwPhysicalMonitorArraySize,\n  LPPHYSICAL_MONITOR pPhysicalMonitorArray\n);",
        "comment": "Closes an array of physical monitor handles. Call this function to close an array of monitor handles obtained from the GetPhysicalMonitorsFromHMONITOR or GetPhysicalMonitorsFromIDirect3DDevice9 function."
    },
    "DestroyWindow": {
        "prototype": "BOOL DestroyWindow(\n  HWND hWnd\n);",
        "comment": "Destroys the specified window. The function sends WM_DESTROY and WM_NCDESTROY messages to the window to deactivate it and remove the keyboard focus from it. The function also destroys the window's menu, flushes the thread message queue, destroys timers, removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain)."
    },
    "DeviceIoControl": {
        "prototype": "BOOL DeviceIoControl(\n  HANDLE       hDevice,\n  DWORD        dwIoControlCode,\n  LPVOID       lpInBuffer,\n  DWORD        nInBufferSize,\n  LPVOID       lpOutBuffer,\n  DWORD        nOutBufferSize,\n  LPDWORD      lpBytesReturned,\n  LPOVERLAPPED lpOverlapped\n);",
        "comment": "Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation."
    },
    "DialogBoxIndirectParam": {
        "prototype": "INT_PTR DialogBoxIndirectParamW(\n  HINSTANCE       hInstance,\n  LPCDLGTEMPLATEW hDialogTemplate,\n  HWND            hWndParent,\n  DLGPROC         lpDialogFunc,\n  LPARAM          dwInitParam\n);",
        "comment": "Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the lParam parameter of the WM_INITDIALOG message. An application can use this value to initialize dialog box controls."
    },
    "DisableProcessWindowsGhosting": {
        "prototype": "void DisableProcessWindowsGhosting();",
        "comment": "Disables the window ghosting feature for the calling GUI process. Window ghosting is a Windows Manager feature that lets the user minimize, move, or close the main window of an application that is not responding."
    },
    "DisableThreadLibraryCalls": {
        "prototype": "BOOL DisableThreadLibraryCalls(\n  HMODULE hLibModule\n);",
        "comment": "Disables the DLL_THREAD_ATTACH and DLL_THREAD_DETACH notifications for the specified dynamic-link library (DLL). This can reduce the size of the working set for some applications."
    },
    "DisconnectNamedPipe": {
        "prototype": "BOOL DisconnectNamedPipe(\n  HANDLE hNamedPipe);",
        "comment": "Disconnects the server end of a named pipe instance from a client process."
    },
    "DispatchMessage": {
        "prototype": "LRESULT DispatchMessageW(\n  const MSG *lpMsg\n);",
        "comment": "Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function."
    },
    "DnsHostnameToComputerName": {
        "prototype": "BOOL DnsHostnameToComputerNameW(\n  LPCWSTR Hostname,\n  LPWSTR  ComputerName,\n  LPDWORD nSize\n);",
        "comment": "Converts a DNS-style host name to a NetBIOS-style computer name."
    },
    "DocumentProperties": {
        "prototype": "LONG DocumentPropertiesW(\n  _In_  HWND     hWnd,\n  _In_  HANDLE   hPrinter,\n  _In_  LPTSTR   pDeviceName,\n  _Out_ PDEVMODE pDevModeOutput,\n  _In_  PDEVMODE pDevModeInput,\n  _In_  DWORD    fMode\n);",
        "comment": "The DocumentProperties function retrieves or modifies printer initialization information or displays a printer-configuration property sheet for the specified printer."
    },
    "DosDateTimeToFileTime": {
        "prototype": "BOOL DosDateTimeToFileTime(\n  WORD       wFatDate,\n  WORD       wFatTime,\n  LPFILETIME lpFileTime\n);",
        "comment": "Converts MS-DOS date and time values to a file time."
    },
    "DosDateTimeToVariantTime": {
        "prototype": "INT DosDateTimeToVariantTime(\n  USHORT wDosDate,\n  USHORT wDosTime,\n  DOUBLE *pvtime\n);",
        "comment": "Converts the MS-DOS representation of time to the date and time representation stored in a variant."
    },
    "DragDetect": {
        "prototype": "BOOL DragDetect(\n  HWND  hwnd,\n  POINT pt);",
        "comment": "Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point."
    },
    "DrawAnimatedRects": {
        "prototype": "BOOL DrawAnimatedRects(\n  HWND       hwnd,\n  int        idAni,\n  const RECT *lprcFrom,\n  const RECT *lprcTo);",
        "comment": "Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window."
    },
    "DrawCaption": {
        "prototype": "BOOL DrawCaption(\n  HWND       hwnd,\n  HDC        hdc,\n  const RECT *lprect,\n  UINT       flags\n);",
        "comment": "The DrawCaption function draws a window caption."
    },
    "DrawEdge": {
        "prototype": "BOOL DrawEdge(\n  HDC    hdc,\n  LPRECT qrc,\n  UINT   edge,\n  UINT   grfFlags);",
        "comment": "The DrawEdge function draws one or more edges of rectangle."
    },
    "DrawEscape": {
        "prototype": "int DrawEscape(\n  HDC    hdc,\n  int    iEscape,\n  int    cjIn,\n  LPCSTR lpIn\n);",
        "comment": "The DrawEscape function provides drawing capabilities of the specified video display that are not directly available through the graphics device interface (GDI)."
    },
    "DrawFocusRect": {
        "prototype": "BOOL DrawFocusRect(\n  HDC        hDC,\n  const RECT *lprc);",
        "comment": "The DrawFocusRect function draws a rectangle in the style used to indicate that the rectangle has the focus."
    },
    "DrawFrameControl": {
        "prototype": "BOOL DrawFrameControl(\n  HDC    ,\n  LPRECT ,\n  UINT   ,\n  UINT);",
        "comment": "The DrawFrameControl function draws a frame control of the specified type and style."
    },
    "DrawIcon": {
        "prototype": "BOOL DrawIcon(\n  HDC   hDC,\n  int   X,\n  int   Y,\n  HICON hIcon\n);",
        "comment": "Draws an icon or cursor into the specified device context."
    },
    "DrawState": {
        "prototype": "BOOL DrawStateW(\n  HDC           hdc,\n  HBRUSH        hbrFore,\n  DRAWSTATEPROC qfnCallBack,\n  LPARAM        lData,\n  WPARAM        wData,\n  int           x,\n  int           y,\n  int           cx,\n  int           cy,\n  UINT          uFlags);",
        "comment": "The DrawState function displays an image and applies a visual effect to indicate a state, such as a disabled or default state."
    },
    "DrawStatusText": {
        "prototype": "void DrawStatusTextW(\n  HDC     hDC,\n  LPCRECT lprc,\n  LPCWSTR pszText,\n  UINT    uFlags\n);",
        "comment": "The DrawStatusText function draws the specified text in the style of a status window with borders."
    },
    "DrawText": {
        "prototype": "int DrawTextW(\n  HDC     hdc,\n  LPCWSTR lpchText,\n  int     cchText,\n  LPRECT  lprc,\n  UINT    format\n);",
        "comment": "The DrawText function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth)."
    },
    "DrawTextEx": {
        "prototype": "int DrawTextExW(\n  HDC              hdc,\n  LPWSTR           lpchText,\n  int              cchText,\n  LPRECT           lprc,\n  UINT             format,\n  LPDRAWTEXTPARAMS lpdtp\n);",
        "comment": "The DrawTextEx function draws formatted text in the specified rectangle."
    },
    "DrawThemeBackground": {
        "prototype": "HRESULT DrawThemeBackground(\n  HTHEME  hTheme,\n  HDC     hdc,\n  int     iPartId,\n  int     iStateId,\n  LPCRECT pRect,\n  LPCRECT pClipRect\n);",
        "comment": "Draws the border and fill defined by the visual style for the specified control part."
    },
    "DrawThemeEdge": {
        "prototype": "HRESULT DrawThemeEdge(\n  HTHEME  hTheme,\n  HDC     hdc,\n  int     iPartId,\n  int     iStateId,\n  LPCRECT pDestRect,\n  UINT    uEdge,\n  UINT    uFlags,\n  LPRECT  pContentRect\n);",
        "comment": "Draws one or more edges defined by the visual style of a rectangle."
    },
    "DrawThemeIcon": {
        "prototype": "HRESULT DrawThemeIcon(\n  HTHEME     hTheme,\n  HDC        hdc,\n  int        iPartId,\n  int        iStateId,\n  LPCRECT    pRect,\n  HIMAGELIST himl,\n  int        iImageIndex\n);",
        "comment": "Draws an image from an image list with the icon effect defined by the visual style."
    },
    "DrawThemeParentBackground": {
        "prototype": "HRESULT DrawThemeParentBackground(\n  HWND       hwnd,\n  HDC        hdc,\n  const RECT *prc\n);",
        "comment": "Draws the part of a parent control that is covered by a partially-transparent or alpha-blended child control."
    },
    "DrawThemeParentBackgroundEx": {
        "prototype": "HRESULT DrawThemeParentBackgroundEx(\n  HWND       hwnd,\n  HDC        hdc,\n  DWORD      dwFlags,\n  const RECT *prc\n);",
        "comment": "Used by partially-transparent or alpha-blended child controls to draw the part of their parent in front of which they appear. Sends a WM_ERASEBKGND message followed by a WM_PRINTCLIENT."
    },
    "DrawThemeTextEx": {
        "prototype": "HRESULT DrawThemeTextEx(\n  HTHEME        hTheme,\n  HDC           hdc,\n  int           iPartId,\n  int           iStateId,\n  LPCWSTR       pszText,\n  int           cchText,\n  DWORD         dwTextFlags,\n  LPRECT        pRect,\n  const DTTOPTS *pOptions\n);",
        "comment": "Draws text using the color and font defined by the visual style."
    },
    "DuplicateHandle": {
        "prototype": "BOOL DuplicateHandle(\n  HANDLE   hSourceProcessHandle,\n  HANDLE   hSourceHandle,\n  HANDLE   hTargetProcessHandle,\n  LPHANDLE lpTargetHandle,\n  DWORD    dwDesiredAccess,\n  BOOL     bInheritHandle,\n  DWORD    dwOptions\n);",
        "comment": "Duplicates an object handle."
    },
    "DwmEnableBlurBehindWindow": {
        "prototype": "DWMAPI DwmEnableBlurBehindWindow(\n  HWND                 hWnd,\n  const DWM_BLURBEHIND *pBlurBehind\n);",
        "comment": "Enables the blur effect on a specified window."
    },
    "DwmEnableMMCSS": {
        "prototype": "DWMAPI DwmEnableMMCSS(\n  BOOL fEnableMMCSS\n);",
        "comment": "Notifies the Desktop Window Manager (DWM) to opt in to or out of Multimedia Class Schedule Service (MMCSS) scheduling while the calling process is alive."
    },
    "DwmExtendFrameIntoClientArea": {
        "prototype": "DWMAPI DwmExtendFrameIntoClientArea(\n  HWND          hWnd,\n  const MARGINS *pMarInset\n);",
        "comment": "Extends the window frame into the client area."
    },
    "DwmFlush": {
        "prototype": "DWMAPI DwmFlush();",
        "comment": "Issues a flush call that blocks the caller until the next present, when all of the Microsoft DirectX surface updates that are currently outstanding have been made. This compensates for very complex scenes or calling processes with very low priority."
    },
    "DwmGetColorizationColor": {
        "prototype": "DWMAPI DwmGetColorizationColor(\n  DWORD *pcrColorization,\n  BOOL  *pfOpaqueBlend\n);",
        "comment": "Retrieves the current color used for Desktop Window Manager (DWM) glass composition. This value is based on the current color scheme and can be modified by the user. Applications can listen for color changes by handling the WM_DWMCOLORIZATIONCOLORCHANGED notification."
    },
    "DwmGetTransportAttributes": {
        "prototype": "DWMAPI DwmGetTransportAttributes(\n  BOOL  *pfIsRemoting,\n  BOOL  *pfIsConnected,\n  DWORD *pDwGeneration\n);",
        "comment": "Retrieves transport attributes."
    },
    "DwmGetWindowAttribute": {
        "prototype": "DWMAPI DwmGetWindowAttribute(\n  HWND  hwnd,\n  DWORD dwAttribute,\n  PVOID pvAttribute,\n  DWORD cbAttribute\n);",
        "comment": "Retrieves the current value of a specified Desktop Window Manager (DWM) attribute applied to a window."
    },
    "DwmInvalidateIconicBitmaps": {
        "prototype": "DWMAPI DwmInvalidateIconicBitmaps(\n  HWND hwnd\n);",
        "comment": "Called by an application to indicate that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed."
    },
    "DwmRenderGesture": {
        "prototype": "DWMAPI DwmRenderGesture(\n  GESTURE_TYPE gt,\n  UINT         cContacts,\n  const DWORD  *pdwPointerID,\n  const POINT  *pPoints\n);",
        "comment": "Notifies Desktop Window Manager (DWM) that a touch contact has been recognized as a gesture, and that DWM should draw feedback for that gesture.",
        "minimumWindowsVersion": "WIN8"
    },
    "DwmSetWindowAttribute": {
        "prototype": "DWMAPI DwmSetWindowAttribute(\n  HWND    hwnd,\n  DWORD   dwAttribute,\n  LPCVOID pvAttribute,\n  DWORD   cbAttribute\n);",
        "comment": "Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window."
    },
    "DwmShowContact": {
        "prototype": "DWMAPI DwmShowContact(\n  DWORD           dwPointerID,\n  DWM_SHOWCONTACT eShowContact\n);",
        "comment": "Called by an app or framework to specify the visual feedback type to draw in response to a particular touch or pen contact.",
        "minimumWindowsVersion": "WIN8"
    },
    "Ellipse": {
        "prototype": "BOOL Ellipse(\n  HDC hdc,\n  int left,\n  int top,\n  int right,\n  int bottom\n);",
        "comment": "The Ellipse function draws an ellipse. The center of the ellipse is the center of the specified bounding rectangle. The ellipse is outlined by using the current pen and is filled by using the current brush."
    },
    "EmptyClipboard": {
        "prototype": "BOOL EmptyClipboard();",
        "comment": "Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open."
    },
    "EmptyWorkingSet": {
        "prototype": "BOOL K32EmptyWorkingSet(\n  [in] HANDLE hProcess\n);",
        "comment": "Removes as many pages as possible from the working set of the specified process."
    },
    "EnableMenuItem": {
        "prototype": "BOOL EnableMenuItem(\n  HMENU hMenu,\n  UINT  uIDEnableItem,\n  UINT  uEnable\n);",
        "comment": "Enables, disables, or grays the specified menu item."
    },
    "EnableMouseInPointer": {
        "prototype": "BOOL EnableMouseInPointer(\n  [in] BOOL fEnable\n);",
        "comment": "Enables the mouse to act as a pointer input device and send WM_POINTER messages.",
        "minimumWindowsVersion": "WIN8"
    },
    "EnableNonClientDpiScaling": {
        "prototype": "BOOL EnableNonClientDpiScaling(\n  HWND hwnd\n);",
        "comment": "In high-DPI displays, enables automatic display scaling of the non-client area portions of the specified top-level window. Must be called during the initialization of that window.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "EnableScrollBar": {
        "prototype": "BOOL EnableScrollBar(\n  HWND hWnd,\n  UINT wSBflags,\n  UINT wArrows\n);",
        "comment": "The EnableScrollBar function enables or disables one or both scroll bar arrows."
    },
    "EnableThemeDialogTexture": {
        "prototype": "HRESULT EnableThemeDialogTexture(\n  HWND  hwnd,\n  DWORD dwFlags\n);",
        "comment": "Enables or disables the visual style of the background of a dialog window."
    },
    "EnableWindow": {
        "prototype": "BOOL EnableWindow(\n  HWND hWnd,\n  BOOL bEnable\n);",
        "comment": "Enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input."
    },
    "EncryptFile": {
        "prototype": "BOOL EncryptFileW(\n  LPCWSTR lpFileName\n);",
        "comment": "Encrypts a file or directory. All data streams in a file are encrypted. All new files created in an encrypted directory are encrypted."
    },
    "EndDeferWindowPos": {
        "prototype": "BOOL EndDeferWindowPos(\n  HDWP hWinPosInfo\n);",
        "comment": "Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle."
    },
    "EndDialog": {
        "prototype": "BOOL EndDialog(\n  HWND    hDlg,\n  INT_PTR nResult\n);",
        "comment": "Destroys a modal dialog box, causing the system to end any processing for the dialog box."
    },
    "EndDocPrinter": {
        "prototype": "BOOL EndDocPrinter(\n  _In_ HANDLE hPrinter\n);",
        "comment": "The EndDocPrinter function ends a print job for the specified printer.",
        "category": "winspool"
    },
    "EndMenu": {
        "prototype": "BOOL EndMenu();",
        "comment": "Ends the calling thread's active menu."
    },
    "EndPagePrinter": {
        "prototype": "BOOL EndPagePrinter(\n  _In_ HANDLE hPrinter\n);",
        "comment": "The EndPagePrinter function notifies the print spooler that the application is at the end of a page in a print job.",
        "category": "winspool"
    },
    "EndPaint": {
        "prototype": "BOOL EndPaint(\n  HWND              hWnd,\n  const PAINTSTRUCT *lpPaint\n);",
        "comment": "The EndPaint function marks the end of painting in the specified window. This function is required for each call to the BeginPaint function, but only after painting is complete."
    },
    "EndPath": {
        "prototype": "BOOL EndPath(\n  HDC hdc\n);",
        "comment": "The EndPath function closes a path bracket and selects the path defined by the bracket into the specified device context."
    },
    "EndUpdateResource": {
        "prototype": "BOOL EndUpdateResourceW(\n  HANDLE hUpdate,\n  BOOL   fDiscard\n);",
        "comment": "Commits or discards changes made prior to a call to UpdateResource."
    },
    "EnumChildWindows": {
        "prototype": "BOOL EnumChildWindows(\n  HWND        hWndParent,\n  WNDENUMPROC lpEnumFunc,\n  LPARAM      lParam\n);",
        "comment": "Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE."
    },
    "EnumClipboardFormats": {
        "prototype": "UINT EnumClipboardFormats(\n  UINT format\n);",
        "comment": "Enumerates the data formats currently available on the clipboard."
    },
    "EnumDependentServices": {
        "prototype": "BOOL EnumDependentServicesW(\n  [in]            SC_HANDLE              hService,\n  [in]            DWORD                  dwServiceState,\n  [out, optional] LPENUM_SERVICE_STATUSW lpServices,\n  [in]            DWORD                  cbBufSize,\n  [out]           LPDWORD                pcbBytesNeeded,\n  [out]           LPDWORD                lpServicesReturned\n);",
        "comment": "Retrieves the name and status of each service that depends on the specified service; that is, the specified service must be running before the dependent services can run."
    },
    "EnumDesktopWindows": {
        "prototype": "BOOL EnumDesktopWindows(\n  HDESK       hDesktop,\n  WNDENUMPROC lpfn,\n  LPARAM      lParam\n);",
        "comment": "Enumerates all top-level windows associated with the specified desktop. It passes the handle to each window, in turn, to an application-defined callback function."
    },
    "EnumDeviceDrivers": {
        "prototype": "BOOL K32EnumDeviceDrivers(\n  [out] LPVOID  *lpImageBase,\n  [in]  DWORD   cb,\n  [out] LPDWORD lpcbNeeded\n);",
        "comment": "Retrieves the load address for each device driver in the system."
    },
    "EnumDisplayDevices": {
        "prototype": "BOOL EnumDisplayDevicesW(\n  [in]  LPCWSTR          lpDevice,\n  [in]  DWORD            iDevNum,\n  [out] PDISPLAY_DEVICEW lpDisplayDevice,\n  [in]  DWORD            dwFlags\n);",
        "comment": "The EnumDisplayDevices function lets you obtain information about the display devices in the current session."
    },
    "EnumDisplayMonitors": {
        "prototype": "BOOL EnumDisplayMonitors(\n  HDC             hdc,\n  LPCRECT         lprcClip,\n  MONITORENUMPROC lpfnEnum,\n  LPARAM          dwData\n);",
        "comment": "The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors."
    },
    "EnumDisplaySettings": {
        "prototype": "BOOL EnumDisplaySettingsW(\n  [in]  LPCWSTR  lpszDeviceName,\n  [in]  DWORD    iModeNum,\n  [out] DEVMODEW *lpDevMode\n);",
        "comment": "The EnumDisplaySettings function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function."
    },
    "EnumDisplaySettingsEx": {
        "prototype": "BOOL EnumDisplaySettingsExW(\n  [in]  LPCWSTR  lpszDeviceName,\n  [in]  DWORD    iModeNum,\n  [out] DEVMODEW *lpDevMode,\n  [in]  DWORD    dwFlags\n);",
        "comment": "The EnumDisplaySettingsEx function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function."
    },
    "EnumFontFamiliesEx": {
        "prototype": "int EnumFontFamiliesExW(\n  HDC           hdc,\n  LPLOGFONTW    lpLogfont,\n  FONTENUMPROCW lpProc,\n  LPARAM        lParam,\n  DWORD         dwFlags\n);",
        "comment": "The EnumFontFamiliesEx function enumerates all uniquely-named fonts in the system that match the font characteristics specified by the LOGFONT structure. EnumFontFamiliesEx enumerates fonts based on typeface name, character set, or both."
    },
    "EnumForms": {
        "prototype": "BOOL EnumFormsW(\n  _In_  HANDLE  hPrinter,\n  _In_  DWORD   Level,\n  _Out_ LPBYTE  pForm,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pcbNeeded,\n  _Out_ LPDWORD pcReturned\n);",
        "comment": "The EnumForms function enumerates the forms supported by the specified printer."
    },
    "EnumJobs": {
        "prototype": "BOOL EnumJobsW(\n  _In_  HANDLE  hPrinter,\n  _In_  DWORD   FirstJob,\n  _In_  DWORD   NoJobs,\n  _In_  DWORD   Level,\n  _Out_ LPBYTE  pJob,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pcbNeeded,\n  _Out_ LPDWORD pcReturned\n);",
        "comment": "The EnumJobs function retrieves information about a specified set of print jobs for a specified printer."
    },
    "EnumPageFiles": {
        "prototype": "BOOL K32EnumPageFilesW(\n  [out] PENUM_PAGE_FILE_CALLBACKW pCallBackRoutine,\n  [in]  LPVOID                    pContext\n);",
        "comment": "Calls the callback routine for each installed pagefile in the system."
    },
    "EnumPrinterData": {
        "prototype": "DWORD EnumPrinterDataW(\n  _In_  HANDLE  hPrinter,\n  _In_  DWORD   dwIndex,\n  _Out_ LPTSTR  pValueName,\n  _In_  DWORD   cbValueName,\n  _Out_ LPDWORD pcbValueName,\n  _Out_ LPDWORD pType,\n  _Out_ LPBYTE  pData,\n  _In_  DWORD   cbData,\n  _Out_ LPDWORD pcbData\n);",
        "comment": "The EnumPrinterData function enumerates configuration data for a specified printer."
    },
    "EnumPrinterDataEx": {
        "prototype": "DWORD EnumPrinterDataExW(\n  _In_  HANDLE  hPrinter,\n  _In_  LPCTSTR pKeyName,\n  _Out_ LPBYTE  pEnumValues,\n  _In_  DWORD   cbEnumValues,\n  _Out_ LPDWORD pcbEnumValues,\n  _Out_ LPDWORD pnEnumValues\n);",
        "comment": "The EnumPrinterDataEx function enumerates all value names and data for a specified printer and key."
    },
    "EnumPrinterKey": {
        "prototype": "DWORD EnumPrinterKeyW(\n  _In_  HANDLE  hPrinter,\n  _In_  LPCTSTR pKeyName,\n  _Out_ LPTSTR  pSubkey,\n  _In_  DWORD   cbSubkey,\n  _Out_ LPDWORD pcbSubkey\n);",
        "comment": "The EnumPrinterKey function enumerates the subkeys of a specified key for a specified printer."
    },
    "EnumPrinters": {
        "prototype": "BOOL EnumPrintersW(\n   _In_  DWORD   Flags,\n   _In_  LPTSTR  Name,\n   _In_  DWORD   Level,\n   _Out_ LPBYTE  pPrinterEnum,\n   _In_  DWORD   cbBuf,\n   _Out_ LPDWORD pcbNeeded,\n   _Out_ LPDWORD pcReturned\n);",
        "comment": "The EnumPrinters function enumerates available printers, print servers, domains, or print providers."
    },
    "EnumProcesses": {
        "prototype": "BOOL K32EnumProcesses(\n  DWORD   *lpidProcess,\n  DWORD   cb,\n  LPDWORD lpcbNeeded\n);",
        "comment": "Retrieves the process identifier for each process object in the system."
    },
    "EnumProcessModules": {
        "prototype": "BOOL K32EnumProcessModules(\n  HANDLE  hProcess,\n  HMODULE *lphModule,\n  DWORD   cb,\n  LPDWORD lpcbNeeded\n);",
        "comment": "Retrieves a handle for each module in the specified process."
    },
    "EnumProcessModulesEx": {
        "prototype": "BOOL K32EnumProcessModulesEx(\n  HANDLE  hProcess,\n  HMODULE *lphModule,\n  DWORD   cb,\n  LPDWORD lpcbNeeded,\n  DWORD   dwFilterFlag\n);",
        "comment": "Retrieves a handle for each module in the specified process that meets the specified filter criteria."
    },
    "EnumResourceNames": {
        "prototype": "BOOL EnumResourceNamesW(\n  HMODULE          hModule,\n  LPCWSTR          lpType,\n  ENUMRESNAMEPROCW lpEnumFunc,\n  LONG_PTR         lParam\n);",
        "comment": "Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a language-neutral Portable Executable (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable language resources. It is also possible for hModule to specify an .mui file, in which case only that file is searched for resources."
    },
    "EnumResourceTypes": {
        "prototype": "BOOL EnumResourceTypesW(\n  HMODULE          hModule,\n  ENUMRESTYPEPROCW lpEnumFunc,\n  LONG_PTR         lParam\n);",
        "comment": "Enumerates resource types within a binary module. Starting with Windows Vista, this is typically a language-neutral Portable Executable (LN file), and the enumeration also includes resources from one of the corresponding language-specific resource files (.mui files)—if one exists—that contain localizable language resources. It is also possible to use hModule to specify a .mui file, in which case only that file is searched for resource types."
    },
    "EnumServicesStatus": {
        "prototype": "BOOL EnumServicesStatusW(\n  [in]                SC_HANDLE              hSCManager,\n  [in]                DWORD                  dwServiceType,\n  [in]                DWORD                  dwServiceState,\n  [out, optional]     LPENUM_SERVICE_STATUSW lpServices,\n  [in]                DWORD                  cbBufSize,\n  [out]               LPDWORD                pcbBytesNeeded,\n  [out]               LPDWORD                lpServicesReturned,\n  [in, out, optional] LPDWORD                lpResumeHandle\n);",
        "comment": "Enumerates services in the specified service control manager database. The name and status of each service are provided."
    },
    "EnumServicesStatusEx": {
        "prototype": "BOOL EnumServicesStatusExW(\n  [in]                SC_HANDLE    hSCManager,\n  [in]                SC_ENUM_TYPE InfoLevel,\n  [in]                DWORD        dwServiceType,\n  [in]                DWORD        dwServiceState,\n  [out, optional]     LPBYTE       lpServices,\n  [in]                DWORD        cbBufSize,\n  [out]               LPDWORD      pcbBytesNeeded,\n  [out]               LPDWORD      lpServicesReturned,\n  [in, out, optional] LPDWORD      lpResumeHandle,\n  [in, optional]      LPCWSTR      pszGroupName\n);",
        "comment": "Enumerates services in the specified service control manager database. The name and status of each service are provided, along with additional data based on the specified information level."
    },
    "EnumSystemFirmwareTables": {
        "prototype": "UINT EnumSystemFirmwareTables(\n  DWORD FirmwareTableProviderSignature,\n  PVOID pFirmwareTableEnumBuffer,\n  DWORD BufferSize\n);",
        "comment": "Enumerates all system firmware tables of the specified type."
    },
    "EnumThreadWindows": {
        "prototype": "BOOL EnumThreadWindows(\n  DWORD       dwThreadId,\n  WNDENUMPROC lpfn,\n  LPARAM      lParam\n);",
        "comment": "Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. EnumThreadWindows continues until the last window is enumerated or the callback function returns FALSE."
    },
    "EnumWindows": {
        "prototype": "BOOL EnumWindows(\n  WNDENUMPROC lpEnumFunc,\n  LPARAM      lParam\n);",
        "comment": "Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE."
    },
    "EqualRect": {
        "prototype": "BOOL EqualRect(\n  const RECT *lprc1,\n  const RECT *lprc2\n);",
        "comment": "The EqualRect function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners."
    },
    "EscapeCommFunction": {
        "prototype": "BOOL EscapeCommFunction(\n  HANDLE hFile,\n  DWORD  dwFunc\n);",
        "comment": "Directs the specified communications device to perform an extended function."
    },
    "ExcludeUpdateRgn": {
        "prototype": "int ExcludeUpdateRgn(\n  HDC  hDC,\n  HWND hWnd\n);",
        "comment": "The ExcludeUpdateRgn function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region."
    },
    "ExitProcess": {
        "prototype": "void ExitProcess(\n  UINT uExitCode\n);",
        "comment": "Ends the calling process and all its threads."
    },
    "ExitThread": {
        "prototype": "void ExitThread(\n  DWORD dwExitCode\n);",
        "comment": "Ends the calling thread."
    },
    "ExtCreatePen": {
        "prototype": "HPEN ExtCreatePen(\n  DWORD          iPenStyle,\n  DWORD          cWidth,\n  const LOGBRUSH *plbrush,\n  DWORD          cStyle,\n  const DWORD    *pstyle\n);",
        "comment": "The ExtCreatePen function creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes."
    },
    "ExtractAssociatedIcon": {
        "prototype": "HICON ExtractAssociatedIconW(\n  HINSTANCE hInst,\n  LPWSTR    pszIconPath,\n  WORD      *piIcon\n);",
        "comment": "Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file."
    },
    "ExtTextOut": {
        "prototype": "BOOL ExtTextOutW(\n  HDC        hdc,\n  int        x,\n  int        y,\n  UINT       options,\n  const RECT *lprect,\n  LPCWSTR    lpString,\n  UINT       c,\n  const INT  *lpDx\n);",
        "comment": "The ExtTextOut function draws text using the currently selected font, background color, and text color. You can optionally provide dimensions to be used for clipping, opaquing, or both."
    },
    "FileEncryptionStatus": {
        "prototype": "BOOL FileEncryptionStatusW(\n  LPCWSTR lpFileName,\n  LPDWORD lpStatus\n);",
        "comment": "Retrieves the encryption status of the specified file."
    },
    "FileTimeToDosDateTime": {
        "prototype": "BOOL FileTimeToDosDateTime(\n  const FILETIME *lpFileTime,\n  LPWORD         lpFatDate,\n  LPWORD         lpFatTime\n);",
        "comment": "Converts a file time to MS-DOS date and time values."
    },
    "FileTimeToSystemTime": {
        "prototype": "BOOL FileTimeToSystemTime(\n  const FILETIME *lpFileTime,\n  LPSYSTEMTIME   lpSystemTime\n);",
        "comment": "Converts a file time to system time format. System time is based on Coordinated Universal Time (UTC)."
    },
    "FillConsoleOutputAttribute": {
        "prototype": "BOOL FillConsoleOutputAttribute(\n  _In_  HANDLE  hConsoleOutput,\n  _In_  WORD    wAttribute,\n  _In_  DWORD   nLength,\n  _In_  COORD   dwWriteCoord,\n  _Out_ LPDWORD lpNumberOfAttrsWritten\n);",
        "comment": "Sets the character attributes for a specified number of character cells, beginning at the specified coordinates in a screen buffer."
    },
    "FillConsoleOutputCharacter": {
        "prototype": "BOOL FillConsoleOutputCharacterW(\n  _In_  HANDLE  hConsoleOutput,\n  _In_  WCHAR   cCharacter,\n  _In_  DWORD   nLength,\n  _In_  COORD   dwWriteCoord,\n  _Out_ LPDWORD lpNumberOfCharsWritten\n);",
        "comment": "Writes a character to the console screen buffer a specified number of times, beginning at the specified coordinates."
    },
    "FillPath": {
        "prototype": "BOOL FillPath(\n  HDC hdc\n);",
        "comment": "The FillPath function closes any open figures in the current path and fills the path's interior by using the current brush and polygon-filling mode."
    },
    "FillRect": {
        "prototype": "int FillRect(\n  HDC        hDC,\n  const RECT *lprc,\n  HBRUSH     hbr\n);",
        "comment": "The FillRect function fills a rectangle by using the specified brush. This function includes the left and top borders, but excludes the right and bottom borders of the rectangle."
    },
    "FindClose": {
        "prototype": "BOOL FindClose(\n  HANDLE hFindFile\n);",
        "comment": "Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions."
    },
    "FindCloseChangeNotification": {
        "prototype": "BOOL FindCloseChangeNotification(\n  HANDLE hChangeHandle\n);",
        "comment": "Stops change notification handle monitoring."
    },
    "FindClosePrinterChangeNotification": {
        "prototype": "BOOL FindClosePrinterChangeNotification(\n  _In_ HANDLE hChange\n);",
        "comment": "The FindClosePrinterChangeNotification function closes a change notification object created by calling the FindFirstPrinterChangeNotification function. The printer or print server associated with the change notification object will no longer be monitored by that object.",
        "category": "winspool"
    },
    "FindExecutable": {
        "prototype": "HINSTANCE FindExecutableW(\n  LPCWSTR lpFile,\n  LPCWSTR lpDirectory,\n  LPWSTR  lpResult\n);",
        "comment": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file."
    },
    "FindFirstChangeNotification": {
        "prototype": "HANDLE FindFirstChangeNotificationW(\n  LPCWSTR lpPathName,\n  BOOL    bWatchSubtree,\n  DWORD   dwNotifyFilter\n);",
        "comment": "Creates a change notification handle and sets up initial change notification filter conditions. A wait on a notification handle succeeds when a change matching the filter conditions occurs in the specified directory or subtree. The function does not report changes to the specified directory itself."
    },
    "FindFirstFile": {
        "prototype": "HANDLE FindFirstFileW(\n  LPCWSTR            lpFileName,\n  LPWIN32_FIND_DATAW lpFindFileData\n);",
        "comment": "Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used)."
    },
    "FindFirstFileEx": {
        "prototype": "HANDLE FindFirstFileExW(\n  [in]  LPCWSTR            lpFileName,\n  [in]  FINDEX_INFO_LEVELS fInfoLevelId,\n  [out] LPVOID             lpFindFileData,\n  [in]  FINDEX_SEARCH_OPS  fSearchOp,\n        LPVOID             lpSearchFilter,\n  [in]  DWORD              dwAdditionalFlags\n);",
        "comment": "Searches a directory for a file or subdirectory with a name and attributes that match those specified."
    },
    "FindFirstFileName": {
        "prototype": "HANDLE FindFirstFileNameW(\n  [in]      LPCWSTR lpFileName,\n  [in]      DWORD   dwFlags,\n  [in, out] LPDWORD StringLength,\n  [in, out] PWSTR   LinkName\n);",
        "comment": "Creates an enumeration of all the hard links to the specified file. The FindFirstFileNameW function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function."
    },
    "FindFirstPrinterChangeNotification": {
        "prototype": "HANDLE FindFirstPrinterChangeNotification(\n  _In_     HANDLE hPrinter,\n           DWORD  fdwFilter,\n           DWORD  fdwOptions,\n  _In_opt_ LPVOID pPrinterNotifyOptions\n);",
        "comment": "The FindFirstPrinterChangeNotification function creates a change notification object and returns a handle to the object. You can then use this handle in a call to one of the wait functions to monitor changes to the printer or print server."
    },
    "FindFirstStream": {
        "prototype": "HANDLE FindFirstStreamW(\n  [in]  LPCWSTR            lpFileName,\n  [in]  STREAM_INFO_LEVELS InfoLevel,\n  [out] LPVOID             lpFindStreamData,\n        DWORD              dwFlags\n);",
        "comment": "Enumerates the first stream with a ::$DATA stream type in the specified file or directory."
    },
    "FindFirstVolume": {
        "prototype": "HANDLE FindFirstVolumeW(\n  LPWSTR lpszVolumeName,\n  DWORD  cchBufferLength\n);",
        "comment": "Retrieves the name of a volume on a computer. FindFirstVolume is used to begin scanning the volumes of a computer."
    },
    "FindNextChangeNotification": {
        "prototype": "BOOL FindNextChangeNotification(\n  HANDLE hChangeHandle\n);",
        "comment": "Requests that the operating system signal a change notification handle the next time it detects an appropriate change."
    },
    "FindNextFile": {
        "prototype": "BOOL FindNextFileW(\n  HANDLE             hFindFile,\n  LPWIN32_FIND_DATAW lpFindFileData\n);",
        "comment": "Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions."
    },
    "FindNextFileName": {
        "prototype": "BOOL FindNextFileNameW(\n  [in]      HANDLE  hFindStream,\n  [in, out] LPDWORD StringLength,\n  [in, out] PWSTR   LinkName\n);",
        "comment": "Continues enumerating the hard links to a file using the handle returned by a successful call to the FindFirstFileNameW function."
    },
    "FindNextPrinterChangeNotification": {
        "prototype": "BOOL FindNextPrinterChangeNotification(\n  _In_      HANDLE hChange,\n  _Out_opt_ PDWORD pdwChange,\n  _In_opt_  LPVOID pPrinterNotifyOptions,\n  _Out_opt_ LPVOID *ppPrinterNotifyInfo\n);",
        "comment": "The FindNextPrinterChangeNotification function retrieves information about the most recent change notification for a change notification object associated with a printer or print server. Call this function when a wait operation on the change notification object is satisfied."
    },
    "FindNextStream": {
        "prototype": "BOOL FindNextStreamW(\n  [in]  HANDLE hFindStream,\n  [out] LPVOID lpFindStreamData\n);",
        "comment": "Continues a stream search started by a previous call to the FindFirstStreamW function."
    },
    "FindNextVolume": {
        "prototype": "BOOL FindNextVolumeW(\n  HANDLE hFindVolume,\n  LPWSTR lpszVolumeName,\n  DWORD  cchBufferLength\n);",
        "comment": "Continues a volume search started by a call to the FindFirstVolume function. FindNextVolume finds one volume per call."
    },
    "FindPackagesByPackageFamily": {
        "prototype": "LONG FindPackagesByPackageFamily(\n  PCWSTR packageFamilyName,\n  UINT32 packageFilters,\n  UINT32 *count,\n  PWSTR  *packageFullNames,\n  UINT32 *bufferLength,\n  WCHAR  *buffer,\n  UINT32 *packageProperties\n);",
        "comment": "Finds the packages with the specified family name for the current user.",
        "minimumWindowsVersion": "WIN81"
    },
    "FindResource": {
        "prototype": "HRSRC FindResourceW(\n  HMODULE hModule,\n  LPCWSTR  lpName,\n  LPCWSTR  lpType\n);",
        "comment": "Determines the location of a resource with the specified type and name in the specified module."
    },
    "FindResourceEx": {
        "prototype": "HRSRC FindResourceExW(\n  HMODULE hModule,\n  LPCWSTR  lpType,\n  LPCWSTR  lpName,\n  WORD    wLanguage\n);",
        "comment": "Determines the location of the resource with the specified type, name, and language in the specified module."
    },
    "FindStringOrdinal": {
        "prototype": "int FindStringOrdinal(\n  [in] DWORD   dwFindStringOrdinalFlags,\n  [in] LPCWSTR lpStringSource,\n  [in] int     cchSource,\n  [in] LPCWSTR lpStringValue,\n  [in] int     cchValue,\n  [in] BOOL    bIgnoreCase\n);",
        "comment": "Locates a Unicode string (wide characters) in another Unicode string for a non-linguistic comparison."
    },
    "FindText": {
        "prototype": "HWND FindTextW(\n  LPFINDREPLACEW Arg1\n);",
        "comment": "Creates a system-defined modeless Find dialog box that lets the user specify a string to search for and options to use when searching for text in a document."
    },
    "FindVolumeClose": {
        "prototype": "BOOL FindVolumeClose(\n  HANDLE hFindVolume\n);",
        "comment": "Closes the specified volume search handle. The FindFirstVolume and FindNextVolume functions use this search handle to locate volumes."
    },
    "FindWindow": {
        "prototype": "HWND FindWindowW(\n  LPCWSTR lpClassName,\n  LPCWSTR lpWindowName\n);",
        "comment": "Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search."
    },
    "FindWindowEx": {
        "prototype": "HWND FindWindowExW(\n  HWND    hWndParent,\n  HWND    hWndChildAfter,\n  LPCWSTR lpszClass,\n  LPCWSTR lpszWindow\n);",
        "comment": "Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search."
    },
    "FlattenPath": {
        "prototype": "BOOL FlattenPath(\n  HDC hdc\n);",
        "comment": "The FlattenPath function transforms any curves in the path that is selected into the current device context (DC), turning each curve into a sequence of lines."
    },
    "FlushConsoleInputBuffer": {
        "prototype": "BOOL FlushConsoleInputBuffer(\n  _In_ HANDLE hConsoleInput\n);",
        "comment": "Flushes the console input buffer. All input records currently in the input buffer are discarded."
    },
    "FlushPrinter": {
        "prototype": "BOOL FlushPrinter(\n  _In_  HANDLE  hPrinter,\n  _In_  LPVOID  pBuf,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pcWritten,\n  _In_  DWORD   cSleep\n);",
        "comment": "The FlushPrinter function sends a buffer to the printer in order to clear it from a transient state."
    },
    "FormatMessage": {
        "prototype": "DWORD FormatMessageW(\n  DWORD   dwFlags,\n  LPCVOID lpSource,\n  DWORD   dwMessageId,\n  DWORD   dwLanguageId,\n  LPWSTR  lpBuffer,\n  DWORD   nSize,\n  va_list *Arguments\n);",
        "comment": "Formats a message string. The function requires a message definition as input. The message definition can come from a buffer passed into the function. It can come from a message table resource in an already-loaded module. Or the caller can ask the function to search the system's message table resource(s) for the message definition. The function finds the message definition in a message table resource based on a message identifier and a language identifier. The function copies the formatted message text to an output buffer, processing any embedded insert sequences if requested."
    },
    "FrameRect": {
        "prototype": "int FrameRect(\n  HDC        hDC,\n  const RECT *lprc,\n  HBRUSH     hbr\n);",
        "comment": "The FrameRect function draws a border around the specified rectangle by using the specified brush. The width and height of the border are always one logical unit."
    },
    "FreeConsole": {
        "prototype": "BOOL FreeConsole(void);",
        "comment": "Detaches the calling process from its console."
    },
    "FreeLibrary": {
        "prototype": "BOOL FreeLibrary(\n  HMODULE hLibModule\n);",
        "comment": "Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid."
    },
    "FreeLibraryAndExitThread": {
        "prototype": "void FreeLibraryAndExitThread(\n  [in] HMODULE hLibModule,\n  [in] DWORD   dwExitCode\n);",
        "comment": "Decrements the reference count of a loaded dynamic-link library (DLL) by one, then calls ExitThread to terminate the calling thread. The function does not return."
    },
    "FreeMemoryJobObject": {
        "prototype": "void FreeMemoryJobObject(\n  [in] _Frees_ptr_ VOID *Buffer\n);",
        "comment": "Frees memory that a function related to job objects allocated."
    },
    "FreePrinterNotifyInfo": {
        "prototype": "BOOL FreePrinterNotifyInfo(\n  _In_ PPRINTER_NOTIFY_INFO pPrinterNotifyInfo\n);",
        "comment": "The FreePrinterNotifyInfo function frees a system-allocated buffer created by the FindNextPrinterChangeNotification function."
    },
    "GetActiveObject": {
        "prototype": "HRESULT GetActiveObject(\n  REFCLSID rclsid,\n  void     *pvReserved,\n  IUnknown **ppunk\n);",
        "comment": "Retrieves a pointer to a running object that has been registered with OLE."
    },
    "GetActiveProcessorCount": {
        "prototype": "DWORD GetActiveProcessorCount(\n  WORD GroupNumber\n);",
        "comment": "Returns the number of active processors in a processor group or in the system."
    },
    "GetActiveProcessorGroupCount": {
        "prototype": "WORD GetActiveProcessorGroupCount();",
        "comment": "Returns the number of active processor groups in the system."
    },
    "GetActiveWindow": {
        "prototype": "HWND GetActiveWindow();",
        "comment": "Retrieves the window handle to the active window attached to the calling thread's message queue."
    },
    "GetAdapterIndex": {
        "prototype": "DWORD GetAdapterIndex(\n  LPWSTR AdapterName,\n  PULONG IfIndex\n);",
        "comment": "The GetAdapterIndex function obtains the index of an adapter, given its name."
    },
    "GetAdaptersAddresses": {
        "prototype": "ULONG GetAdaptersAddresses(\n  ULONG                 Family,\n  ULONG                 Flags,\n  PVOID                 Reserved,\n  PIP_ADAPTER_ADDRESSES AdapterAddresses,\n  PULONG                SizePointer\n);",
        "comment": "The GetAdaptersAddresses function retrieves the addresses associated with the adapters on the local computer."
    },
    "GetAddrInfoW": {
        "prototype": "INT GetAddrInfoW(\n  PCWSTR          pNodeName,\n  PCWSTR          pServiceName,\n  const ADDRINFOW *pHints,\n  PADDRINFOW      *ppResult\n);",
        "comment": "The GetAddrInfoW function provides protocol-independent translation from a Unicode host name to an address.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "GetAltTabInfo": {
        "prototype": "BOOL GetAltTabInfoW(\n  [in, optional]  HWND        hwnd,\n  [in]            int         iItem,\n  [in, out]       PALTTABINFO pati,\n  [out, optional] LPWSTR      pszItemText,\n  [in]            UINT        cchItemText\n);",
        "comment": "Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window."
    },
    "GetAncestor": {
        "prototype": "HWND GetAncestor(\n  HWND hwnd,\n  UINT gaFlags\n);",
        "comment": "Retrieves the handle to the ancestor of the specified window."
    },
    "GetAsyncKeyState": {
        "prototype": "SHORT GetAsyncKeyState(\n  int vKey\n);",
        "comment": "Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState."
    },
    "GetAwarenessFromDpiAwarenessContext": {
        "prototype": "DPI_AWARENESS GetAwarenessFromDpiAwarenessContext(\n  DPI_AWARENESS_CONTEXT value\n);",
        "comment": "Retrieves the DPI_AWARENESS value from a DPI_AWARENESS_CONTEXT.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "GetBinaryType": {
        "prototype": "BOOL GetBinaryTypeW(\n  LPCWSTR lpApplicationName,\n  LPDWORD lpBinaryType);",
        "comment": "Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file."
    },
    "GetCapture": {
        "prototype": "HWND GetCapture();",
        "comment": "Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders."
    },
    "GetCaretBlinkTime": {
        "prototype": "UINT GetCaretBlinkTime();",
        "comment": "Retrieves the time required to invert the caret's pixels. The user can set this value."
    },
    "GetCaretPos": {
        "prototype": "BOOL GetCaretPos(\n  LPPOINT lpPoint\n);",
        "comment": "Copies the caret's position to the specified POINT structure."
    },
    "GetClassFile": {
        "prototype": "HRESULT GetClassFile(\n  LPCOLESTR szFilename,\n  CLSID     *pclsid\n);",
        "comment": "Returns the CLSID associated with the specified file name."
    },
    "GetClassInfo": {
        "prototype": "BOOL GetClassInfoW(\n  HINSTANCE   hInstance,\n  LPCWSTR     lpClassName,\n  LPWNDCLASSW lpWndClass\n);",
        "comment": "Retrieves information about a window class."
    },
    "GetClassInfoEx": {
        "prototype": "BOOL GetClassInfoExW(\n  HINSTANCE     hInstance,\n  LPCWSTR       lpszClass,\n  LPWNDCLASSEXW lpwcx\n);",
        "comment": "Retrieves information about a window class, including a handle to the small icon associated with the window class. The GetClassInfo function does not retrieve a handle to the small icon."
    },
    "GetClassLongPtr": {
        "prototype": "ULONG_PTR GetClassLongPtrW(\n  HWND hWnd,\n  int  nIndex\n);",
        "comment": "Retrieves the specified value from the WNDCLASSEX structure associated with the specified window."
    },
    "GetClassName": {
        "prototype": "int GetClassNameW(\n  [in]  HWND   hWnd,\n  [out] LPWSTR lpClassName,\n  [in]  int    nMaxCount\n);",
        "comment": "Retrieves the name of the class to which the specified window belongs."
    },
    "GetClientRect": {
        "prototype": "BOOL GetClientRect(\n  HWND   hWnd,\n  LPRECT lpRect\n);",
        "comment": "Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0)."
    },
    "GetClipboardData": {
        "prototype": "HANDLE GetClipboardData(\n  UINT uFormat\n);",
        "comment": "Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously."
    },
    "GetClipboardFormatName": {
        "prototype": "int GetClipboardFormatNameW(\n  UINT format,\n  LPWSTR lpszFormatName,\n  int cchMaxCount\n);",
        "comment": "Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer."
    },
    "GetClipboardOwner": {
        "prototype": "HWND GetClipboardOwner();",
        "comment": "Retrieves the window handle of the current owner of the clipboard."
    },
    "GetClipboardSequenceNumber": {
        "prototype": "DWORD GetClipboardSequenceNumber();",
        "comment": "Retrieves the clipboard sequence number for the current window station."
    },
    "GetClipboardViewer": {
        "prototype": "HWND GetClipboardViewer();",
        "comment": "Retrieves the handle to the first window in the clipboard viewer chain."
    },
    "GetClipCursor": {
        "prototype": "BOOL GetClipCursor(\n  LPRECT lpRect\n);",
        "comment": "Retrieves the screen coordinates of the rectangular area to which the cursor is confined."
    },
    "GetCommandLine": {
        "prototype": "LPWSTR GetCommandLineW();",
        "comment": "Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values."
    },
    "GetCommConfig": {
        "prototype": "BOOL GetCommConfig(\n  HANDLE       hCommDev,\n  LPCOMMCONFIG lpCC,\n  LPDWORD      lpdwSize\n);",
        "comment": "Retrieves the current configuration of a communications device."
    },
    "GetCommMask": {
        "prototype": "BOOL GetCommMask(\n  HANDLE  hFile,\n  LPDWORD lpEvtMask\n);",
        "comment": "Retrieves the value of the event mask for a specified communications device."
    },
    "GetCommModemStatus": {
        "prototype": "BOOL GetCommModemStatus(\n  HANDLE  hFile,\n  LPDWORD lpModemStat\n);",
        "comment": "Retrieves the modem control-register values."
    },
    "GetCommPorts": {
        "prototype": "ULONG GetCommPorts(\n  PULONG lpPortNumbers,\n  ULONG  uPortNumbersCount,\n  PULONG puPortNumbersFound\n);",
        "comment": "Gets an array that contains the well-formed COM ports.",
        "category": "kernel32",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "GetCommProperties": {
        "prototype": "BOOL GetCommProperties(\n  HANDLE     hFile,\n  LPCOMMPROP lpCommProp\n);",
        "comment": "Retrieves information about the communications properties for a specified communications device."
    },
    "GetCommState": {
        "prototype": "BOOL GetCommState(\n  HANDLE hFile,\n  LPDCB  lpDCB\n);",
        "comment": "Retrieves the current control settings for a specified communications device."
    },
    "GetCommTimeouts": {
        "prototype": "BOOL GetCommTimeouts(\n  HANDLE         hFile,\n  LPCOMMTIMEOUTS lpCommTimeouts\n);",
        "comment": "Retrieves the time-out parameters for all read and write operations on a specified communications device."
    },
    "GetCompressedFileSize": {
        "prototype": "DWORD GetCompressedFileSizeW(\n  LPCWSTR lpFileName,\n  LPDWORD lpFileSizeHigh\n);",
        "comment": "Retrieves the actual number of bytes of disk storage used to store a specified file. If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse size of the specified file."
    },
    "GetComputerName": {
        "prototype": "BOOL GetComputerNameW(\n  LPWSTR  lpBuffer,\n  LPDWORD nSize\n);",
        "comment": "Retrieves the NetBIOS name of the local computer. This name is established at system startup, when the system reads it from the registry."
    },
    "GetComputerNameEx": {
        "prototype": "BOOL GetComputerNameExW(\n  COMPUTER_NAME_FORMAT NameType,\n  LPWSTR               lpBuffer,\n  LPDWORD              nSize\n);",
        "comment": "Retrieves a NetBIOS or DNS name associated with the local computer. The names are established at system startup, when the system reads them from the registry."
    },
    "GetConsoleCP": {
        "prototype": "UINT GetConsoleCP(void);",
        "comment": "Retrieves the input code page used by the console associated with the calling process. A console uses its input code page to translate keyboard input into the corresponding character value."
    },
    "GetConsoleCursorInfo": {
        "prototype": "BOOL GetConsoleCursorInfo(\n  _In_  HANDLE               hConsoleOutput,\n  _Out_ PCONSOLE_CURSOR_INFO lpConsoleCursorInfo\n);",
        "comment": "Retrieves information about the size and visibility of the cursor for the specified console screen buffer."
    },
    "GetConsoleMode": {
        "prototype": "BOOL GetConsoleMode(\n  _In_  HANDLE  hConsoleHandle,\n  _Out_ LPDWORD lpMode\n);",
        "comment": "Retrieves the current input mode of a console's input buffer or the current output mode of a console screen buffer."
    },
    "GetConsoleOutputCP": {
        "prototype": "UINT GetConsoleOutputCP(void);",
        "comment": "Retrieves the output code page used by the console associated with the calling process. A console uses its output code page to translate the character values written by the various output functions into the images displayed in the console window."
    },
    "GetConsoleScreenBufferInfo": {
        "prototype": "BOOL GetConsoleScreenBufferInfo(\n  _In_  HANDLE                      hConsoleOutput,\n  _Out_ PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo\n);",
        "comment": "Retrieves information about the specified console screen buffer."
    },
    "GetConsoleSelectionInfo": {
        "prototype": "BOOL GetConsoleSelectionInfo(\n  _Out_ PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo\n);",
        "comment": "Retrieves information about the current console selection."
    },
    "GetConsoleTitle": {
        "prototype": "DWORD GetConsoleTitleW(\n  _Out_ LPTSTR lpConsoleTitle,\n  _In_  DWORD  nSize\n);",
        "comment": "Retrieves the title for the current console window."
    },
    "GetConsoleWindow": {
        "prototype": "HWND GetConsoleWindow(void);",
        "comment": "Retrieves the window handle used by the console associated with the calling process."
    },
    "GetCurrentActCtx": {
        "prototype": "BOOL GetCurrentActCtx(\n  HANDLE *lphActCtx\n);",
        "comment": "The GetCurrentActCtx function returns the handle to the active activation context of the calling thread."
    },
    "GetCurrentProcess": {
        "prototype": "HANDLE GetCurrentProcess();",
        "comment": "Retrieves a pseudo handle for the current process."
    },
    "GetCurrentProcessId": {
        "prototype": "DWORD GetCurrentProcessId();",
        "comment": "Retrieves the process identifier of the calling process."
    },
    "GetCurrentProcessorNumber": {
        "prototype": "DWORD GetCurrentProcessorNumber();",
        "comment": "Retrieves the number of the processor the current thread was running on during the call to this function."
    },
    "GetCurrentThemeName": {
        "prototype": "HRESULT GetCurrentThemeName(\n  LPWSTR pszThemeFileName,\n  int    cchMaxNameChars,\n  LPWSTR pszColorBuff,\n  int    cchMaxColorChars,\n  LPWSTR pszSizeBuff,\n  int    cchMaxSizeChars\n);",
        "comment": "Retrieves the name of the current visual style, and optionally retrieves the color scheme name and size name."
    },
    "GetCurrentThread": {
        "prototype": "HANDLE GetCurrentThread();",
        "comment": "Retrieves a pseudo handle for the calling thread."
    },
    "GetCurrentThreadId": {
        "prototype": "DWORD GetCurrentThreadId();",
        "comment": "Retrieves the thread identifier of the calling thread."
    },
    "GetCursor": {
        "prototype": "HCURSOR GetCursor();",
        "comment": "Retrieves a handle to the current cursor."
    },
    "GetCursorInfo": {
        "prototype": "BOOL GetCursorInfo(\n  PCURSORINFO pci\n);",
        "comment": "Retrieves information about the global cursor."
    },
    "GetCursorPos": {
        "prototype": "BOOL GetCursorPos(\n  LPPOINT lpPoint\n);",
        "comment": "Retrieves the position of the mouse cursor, in screen coordinates."
    },
    "GetDC": {
        "prototype": "HDC GetDC(\n  HWND hWnd\n);",
        "comment": "The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI."
    },
    "GetDCEx": {
        "prototype": "HDC GetDCEx(\n  HWND  hWnd,\n  HRGN  hrgnClip,\n  DWORD flags\n);",
        "comment": "The GetDCEx function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI."
    },
    "GetDefaultCommConfig": {
        "prototype": "BOOL GetDefaultCommConfigW(\n  LPCWSTR      lpszName,\n  LPCOMMCONFIG lpCC,\n  LPDWORD      lpdwSize\n);",
        "comment": "Retrieves the default configuration for the specified communications device."
    },
    "GetDefaultPrinter": {
        "prototype": "BOOL GetDefaultPrinterW(\n  _In_    LPTSTR  pszBuffer,\n  _Inout_ LPDWORD pcchBuffer\n);",
        "comment": "The GetDefaultPrinter function retrieves the printer name of the default printer for the current user on the local computer."
    },
    "GetDesktopWindow": {
        "prototype": "HWND GetDesktopWindow();",
        "comment": "Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted."
    },
    "GetDeviceCaps": {
        "prototype": "int GetDeviceCaps(\n  HDC hdc,\n  int index\n);",
        "comment": "The GetDeviceCaps function retrieves device-specific information for the specified device."
    },
    "GetDeviceDriverBaseName": {
        "prototype": "DWORD K32GetDeviceDriverBaseNameW(\n  [in]  LPVOID ImageBase,\n  [out] LPWSTR lpBaseName,\n  [in]  DWORD  nSize\n);",
        "comment": "Retrieves the base name of the specified device driver."
    },
    "GetDeviceDriverFileName": {
        "prototype": "DWORD K32GetDeviceDriverFileNameW(\n  [in]  LPVOID ImageBase,\n  [out] LPWSTR lpFilename,\n  [in]  DWORD  nSize\n);",
        "comment": "Retrieves the path available for the specified device driver."
    },
    "GetDialogBaseUnits": {
        "prototype": "long GetDialogBaseUnits();",
        "comment": "Retrieves the system's dialog base units, which are the average width and height of characters in the system font. For dialog boxes that use the system font, you can use these values to convert between dialog template units, as specified in dialog box templates, and pixels. For dialog boxes that do not use the system font, the conversion from dialog template units to pixels depends on the font used by the dialog box."
    },
    "GetDialogControlDpiChangeBehavior": {
        "prototype": "DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS GetDialogControlDpiChangeBehavior(\n  HWND hWnd\n);",
        "comment": "Retrieves and per-monitor DPI scaling behavior overrides of a child window in a dialog.",
        "minimumWindowsVersion": "WIN10_RS2"
    },
    "GetDialogDpiChangeBehavior": {
        "prototype": "DIALOG_DPI_CHANGE_BEHAVIORS GetDialogDpiChangeBehavior(\n  HWND hDlg\n);",
        "comment": "Returns the flags that might have been set on a given dialog by an earlier call to SetDialogDpiChangeBehavior. If that function was never called on the dialog, the return value will be zero.",
        "minimumWindowsVersion": "WIN10_RS2"
    },
    "GetDIBits": {
        "prototype": "int GetDIBits(\n  HDC          hdc,\n  HBITMAP      hbm,\n  UINT         start,\n  UINT         cLines,\n  LPVOID       lpvBits,\n  LPBITMAPINFO lpbmi,\n  UINT         usage\n);",
        "comment": "The GetDIBits function retrieves the bits of the specified compatible bitmap and copies them into a buffer as a DIB using the specified format."
    },
    "GetDiskFreeSpace": {
        "prototype": "BOOL GetDiskFreeSpaceW(\n  LPCWSTR lpRootPathName,\n  LPDWORD lpSectorsPerCluster,\n  LPDWORD lpBytesPerSector,\n  LPDWORD lpNumberOfFreeClusters,\n  LPDWORD lpTotalNumberOfClusters\n);",
        "comment": "Retrieves information about the specified disk, including the amount of free space on the disk."
    },
    "GetDiskFreeSpaceEx": {
        "prototype": "BOOL GetDiskFreeSpaceExW(\n  [in, optional]  LPCWSTR         lpDirectoryName,\n  [out, optional] PULARGE_INTEGER lpFreeBytesAvailableToCaller,\n  [out, optional] PULARGE_INTEGER lpTotalNumberOfBytes,\n  [out, optional] PULARGE_INTEGER lpTotalNumberOfFreeBytes\n);",
        "comment": "Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread."
    },
    "GetDisplayAutoRotationPreferences": {
        "prototype": "BOOL GetDisplayAutoRotationPreferences(\n  ORIENTATION_PREFERENCE *pOrientation\n);",
        "comment": "Retrieves the screen auto-rotation preferences for the current process.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetDlgItem": {
        "prototype": "HWND GetDlgItem(\n  HWND hDlg,\n  int  nIDDlgItem\n);",
        "comment": "Retrieves a handle to a control in the specified dialog box."
    },
    "GetDlgItemInt": {
        "prototype": "UINT GetDlgItemInt(\n  HWND hDlg,\n  int  nIDDlgItem,\n  BOOL *lpTranslated,\n  BOOL bSigned\n);",
        "comment": "Translates the text of a specified control in a dialog box into an integer value."
    },
    "GetDlgItemText": {
        "prototype": "UINT GetDlgItemTextW(\n  HWND   hDlg,\n  int    nIDDlgItem,\n  LPWSTR lpString,\n  int    cchMax\n);",
        "comment": "Retrieves the title or text associated with a control in a dialog box."
    },
    "GetDllDirectory": {
        "prototype": "DWORD GetDllDirectoryW(\n  DWORD  nBufferLength,\n  LPWSTR lpBuffer\n);",
        "comment": "Retrieves the application-specific portion of the search path used to locate DLLs for the application."
    },
    "GetDoubleClickTime": {
        "prototype": "UINT GetDoubleClickTime();",
        "comment": "Retrieves the current double-click time for the mouse. A double-click is a series of two clicks of the mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second click of a double-click. The maximum double-click time is 5000 milliseconds."
    },
    "GetDpiForMonitor": {
        "prototype": "HRESULT GetDpiForMonitor(\n  HMONITOR         hmonitor,\n  MONITOR_DPI_TYPE dpiType,\n  UINT             *dpiX,\n  UINT             *dpiY\n  );",
        "comment": "Queries the dots per inch (dpi) of a display.",
        "category": "user32",
        "minimumWindowsVersion": "WIN81"
    },
    "GetDpiForSystem": {
        "prototype": "UINT GetDpiForSystem();",
        "comment": "Returns the system DPI.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "GetDpiForWindow": {
        "prototype": "UINT GetDpiForWindow(\n  HWND hwnd\n);",
        "comment": "Returns the dots per inch (dpi) value for the associated window.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "GetDpiFromDpiAwarenessContext": {
        "prototype": "UINT GetDpiFromDpiAwarenessContext(\n  DPI_AWARENESS_CONTEXT value);",
        "comment": "Retrieves the DPI from a given DPI_AWARENESS_CONTEXT handle. This enables you to determine the DPI of a thread without needed to examine a window created within that thread.",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "GetDriveType": {
        "prototype": "UINT GetDriveTypeW(\n  LPCWSTR lpRootPathName\n);",
        "comment": "Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive."
    },
    "GetEnvironmentVariable": {
        "prototype": "DWORD GetEnvironmentVariableW(\n  LPCTSTR lpName,\n  LPTSTR  lpBuffer,\n  DWORD   nSize\n);",
        "comment": "Retrieves the contents of the specified variable from the environment block of the calling process."
    },
    "GetExitCodeProcess": {
        "prototype": "BOOL GetExitCodeProcess(\n  HANDLE  hProcess,\n  LPDWORD lpExitCode);",
        "comment": "Retrieves the termination status of the specified process."
    },
    "GetFileAttributes": {
        "prototype": "DWORD GetFileAttributesW(\n  LPCWSTR lpFileName\n);",
        "comment": "Retrieves file system attributes for a specified file or directory."
    },
    "GetFileAttributesEx": {
        "prototype": "BOOL GetFileAttributesExW(\n  LPCWSTR                lpFileName,\n  GET_FILEEX_INFO_LEVELS fInfoLevelId,\n  LPVOID                 lpFileInformation\n);",
        "comment": "Retrieves attributes for a specified file or directory."
    },
    "GetFileInformationByHandle": {
        "prototype": "BOOL GetFileInformationByHandle(\n  HANDLE                       hFile,\n  LPBY_HANDLE_FILE_INFORMATION lpFileInformation\n);",
        "comment": "Retrieves file information for the specified file."
    },
    "GetFileSize": {
        "prototype": "DWORD GetFileSize(\n  HANDLE  hFile,\n  LPDWORD lpFileSizeHigh\n);",
        "comment": "Retrieves the size of the specified file, in bytes. It is recommended that you use GetFileSizeEx."
    },
    "GetFileSizeEx": {
        "prototype": "BOOL GetFileSizeEx(\n  HANDLE         hFile,\n  PLARGE_INTEGER lpFileSize\n);",
        "comment": "Retrieves the size of the specified file."
    },
    "GetFileType": {
        "prototype": "DWORD GetFileType(\n  HANDLE hFile\n);",
        "comment": "Retrieves the file type of the specified file."
    },
    "GetFileVersionInfo": {
        "prototype": "BOOL GetFileVersionInfoW(\n  LPCWSTR lptstrFilename,\n  DWORD   dwHandle,\n  DWORD   dwLen,\n  LPVOID  lpData\n);",
        "comment": "Retrieves version information for the specified file."
    },
    "GetFileVersionInfoEx": {
        "prototype": "BOOL GetFileVersionInfoExW(\n  DWORD   dwFlags,\n  LPCWSTR lpwstrFilename,\n  DWORD   dwHandle,\n  DWORD   dwLen,\n  LPVOID  lpData\n);",
        "comment": "Retrieves version information for the specified file."
    },
    "GetFileVersionInfoSize": {
        "prototype": "DWORD GetFileVersionInfoSizeW(\n  LPCWSTR lptstrFilename,\n  LPDWORD lpdwHandle\n);",
        "comment": "Determines whether the operating system can retrieve version information for a specified file. If version information is available, GetFileVersionInfoSize returns the size, in bytes, of that information."
    },
    "GetFileVersionInfoSizeEx": {
        "prototype": "DWORD GetFileVersionInfoSizeExW(\n  DWORD   dwFlags,\n  LPCWSTR lpwstrFilename,\n  LPDWORD lpdwHandle\n);",
        "comment": "Determines whether the operating system can retrieve version information for a specified file. If version information is available, GetFileVersionInfoSizeEx returns the size, in bytes, of that information."
    },
    "GetFinalPathNameByHandle": {
        "prototype": "DWORD GetFinalPathNameByHandleW(\n  HANDLE hFile,\n  LPWSTR lpszFilePath,\n  DWORD  cchFilePath,\n  DWORD  dwFlags\n);",
        "comment": "Retrieves the final path for the specified file."
    },
    "GetFocus": {
        "prototype": "HWND GetFocus();",
        "comment": "Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue."
    },
    "GetForegroundWindow": {
        "prototype": "HWND GetForegroundWindow();",
        "comment": "Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads."
    },
    "GetForm": {
        "prototype": "BOOL GetFormW(\n  _In_  HANDLE  hPrinter,\n  _In_  LPWSTR  pFormName,\n  _In_  DWORD   Level,\n  _Out_ LPBYTE  pForm,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pcbNeeded\n);",
        "comment": "The GetForm function retrieves information about a specified form."
    },
    "GetFullPathName": {
        "prototype": "DWORD GetFullPathNameW(\n  LPCWSTR lpFileName,\n  DWORD   nBufferLength,\n  LPWSTR  lpBuffer,\n  LPWSTR  *lpFilePart\n);",
        "comment": "Retrieves the full path and file name of the specified file."
    },
    "GetGestureConfig": {
        "prototype": "BOOL GetGestureConfig(\n  HWND           hwnd,\n  DWORD          dwReserved,\n  DWORD          dwFlags,\n  PUINT          pcIDs,\n  PGESTURECONFIG pGestureConfig,\n  UINT           cbSize\n);",
        "comment": "Retrieves the configuration for which Windows Touch gesture messages are sent from a window."
    },
    "GetGestureExtraArgs": {
        "prototype": "BOOL GetGestureExtraArgs(\n  HGESTUREINFO hGestureInfo,\n  UINT         cbExtraArgs,\n  PBYTE        pExtraArgs\n);",
        "comment": "Retrieves additional information about a gesture from its GESTUREINFO handle."
    },
    "GetGestureInfo": {
        "prototype": "BOOL GetGestureInfo(\n  HGESTUREINFO hGestureInfo,\n  PGESTUREINFO pGestureInfo\n);",
        "comment": "Retrieves a GESTUREINFO structure given a handle to the gesture information."
    },
    "GetGUIThreadInfo": {
        "prototype": "BOOL GetGUIThreadInfo(\n  [in]      DWORD          idThread,\n  [in, out] PGUITHREADINFO pgui\n);",
        "comment": "Retrieves information about the active window or a specified GUI thread."
    },
    "GetHandleInformation": {
        "prototype": "BOOL GetHandleInformation(\n  HANDLE  hObject,\n  LPDWORD lpdwFlags\n);",
        "comment": "Retrieves certain properties of an object handle."
    },
    "GetHGlobalFromStream": {
        "prototype": "HRESULT GetHGlobalFromStream(\n  [in]  LPSTREAM pstm,\n  [out] HGLOBAL  *phglobal\n);",
        "comment": "The GetHGlobalFromStream function retrieves the global memory handle to a stream that was created through a call to the CreateStreamOnHGlobal function."
    },
    "gethostbyaddr": {
        "prototype": "hostent* gethostbyaddr(\n   const char *addr,\n   int        len,\n   int        type\n);",
        "comment": "The gethostbyaddr function retrieves the host information corresponding to a network address.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "gethostbyname": {
        "prototype": "hostent* gethostbyname(\n  const char *name\n);",
        "comment": "The gethostbyname function retrieves host information corresponding to a host name from a host database.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "gethostname": {
        "prototype": "int gethostname(\n  char *name,\n  int  namelen\n);",
        "comment": "The gethostname function retrieves the standard host name for the local computer.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "GetIconInfo": {
        "prototype": "BOOL GetIconInfo(\n  HICON     hIcon,\n  PICONINFO piconinfo\n);",
        "comment": "Retrieves information about the specified icon or cursor."
    },
    "GetIconInfoEx": {
        "prototype": "BOOL GetIconInfoExW(\n  HICON        hicon,\n  PICONINFOEXW piconinfo\n);",
        "comment": "Retrieves the opacity and transparency color key of a layered window."
    },
    "GetInputState": {
        "prototype": "BOOL GetInputState();",
        "comment": "Determines whether there are mouse-button or keyboard messages in the calling thread's message queue."
    },
    "GetIntegratedDisplaySize": {
        "prototype": "HRESULT GetIntegratedDisplaySize(\n  double *sizeInInches\n);",
        "comment": "Retrieves the best estimate of the diagonal size of the built-in screen, in inches.",
        "category": "kernel32",
        "minimumWindowsVersion": "WIN10_TH1"
    },
    "GetInterfaceInfo": {
        "prototype": "DWORD GetInterfaceInfo(\n  PIP_INTERFACE_INFO pIfTable,\n  PULONG             dwOutBufLen\n);",
        "comment": "The GetInterfaceInfo function obtains the list of the network interface adapters with IPv4 enabled on the local system."
    },
    "GetJob": {
        "prototype": "BOOL GetJobW(\n  _In_  HANDLE  hPrinter,\n  _In_  DWORD   JobId,\n  _In_  DWORD   Level,\n  _Out_ LPBYTE  pJob,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pcbNeeded\n);",
        "comment": "The GetJob function retrieves information about a specified print job."
    },
    "GetKeyboardLayout": {
        "prototype": "HKL GetKeyboardLayout(\n  DWORD idThread\n);",
        "comment": "Retrieves the active input locale identifier (formerly called the keyboard layout)."
    },
    "GetKeyboardLayoutList": {
        "prototype": "int GetKeyboardLayoutList(\n  int nBuff,\n  HKL *lpList\n);",
        "comment": "Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. The function copies the identifiers to the specified buffer."
    },
    "GetKeyboardLayoutName": {
        "prototype": "BOOL GetKeyboardLayoutNameW(\n  LPWSTR pwszKLID\n);",
        "comment": "Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the system."
    },
    "GetKeyboardState": {
        "prototype": "BOOL GetKeyboardState(\n  PBYTE lpKeyState\n);",
        "comment": "Copies the status of the 256 virtual keys to the specified buffer."
    },
    "GetKeyboardType": {
        "prototype": "int GetKeyboardType(\n  int nTypeFlag\n);",
        "comment": "Retrieves information about the current keyboard."
    },
    "GetKeyNameText": {
        "prototype": "int GetKeyNameTextW(\n  LONG   lParam,\n  LPWSTR lpString,\n  int    cchSize\n);",
        "comment": "Retrieves a string that represents the name of a key."
    },
    "GetKeyState": {
        "prototype": "SHORT GetKeyState(\n  int nVirtKey\n);",
        "comment": "Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off—alternating each time the key is pressed)."
    },
    "GetLargestConsoleWindowSize": {
        "prototype": "COORD GetLargestConsoleWindowSize(\n  _In_ HANDLE hConsoleOutput\n);",
        "comment": "Retrieves the size of the largest possible console window, based on the current font and the size of the display."
    },
    "GetLastError": {
        "prototype": "DWORD GetLastError();",
        "comment": "Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite each other's last-error code."
    },
    "GetLastInputInfo": {
        "prototype": "BOOL GetLastInputInfo(\n  PLASTINPUTINFO plii\n);",
        "comment": "Retrieves the time of the last input event."
    },
    "GetLayeredWindowAttributes": {
        "prototype": "BOOL GetLayeredWindowAttributes(\n  HWND     hwnd,\n  COLORREF *pcrKey,\n  BYTE     *pbAlpha,\n  DWORD    *pdwFlags\n);",
        "comment": "Retrieves the opacity and transparency color key of a layered window."
    },
    "GetLocaleInfoEx": {
        "prototype": "int GetLocaleInfoEx(\n  LPCWSTR lpLocaleName,\n  LCTYPE  LCType,\n  LPWSTR  lpLCData,\n  int     cchData\n);",
        "comment": "Retrieves information about a locale specified by name."
    },
    "GetLocalTime": {
        "prototype": "void GetLocalTime(\n  LPSYSTEMTIME lpSystemTime\n);",
        "comment": "Retrieves the current local date and time."
    },
    "GetLogicalDrives": {
        "prototype": "DWORD GetLogicalDrives();",
        "comment": "Retrieves a bitmask representing the currently available disk drives."
    },
    "GetLogicalDriveStrings": {
        "prototype": "DWORD GetLogicalDriveStringsW(\n  DWORD  nBufferLength,\n  LPWSTR lpBuffer\n);",
        "comment": "Fills a buffer with strings that specify valid drives in the system."
    },
    "GetLogicalProcessorInformation": {
        "prototype": "BOOL GetLogicalProcessorInformation(\n  PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,\n  PDWORD ReturnedLength\n);",
        "comment": "Retrieves information about logical processors and related hardware."
    },
    "GetLongPathName": {
        "prototype": "DWORD GetLongPathNameW(\n  [in]  LPCWSTR lpszShortPath,\n  [out] LPWSTR  lpszLongPath,\n  [in]  DWORD   cchBuffer\n);",
        "comment": "Converts the specified path to its long form."
    },
    "GetMachineTypeAttributes": {
        "prototype": "HRESULT GetMachineTypeAttributes(\n  USHORT Machine,\n  MACHINE_ATTRIBUTES *MachineTypeAttributes\n);",
        "comment": "Queries if the specified architecture is supported on the current system, either natively or by any form of compatibility or emulation layer.",
        "minimumWindowsVersion": "WIN11_21H2"
    },
    "GetMappedFileName": {
        "prototype": "DWORD K32GetMappedFileNameW(\n  [in]  HANDLE hProcess,\n  [in]  LPVOID lpv,\n  [out] LPWSTR lpFilename,\n  [in]  DWORD  nSize\n);",
        "comment": "Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file."
    },
    "GetMaximumProcessorCount": {
        "prototype": "DWORD GetMaximumProcessorCount(\n  WORD GroupNumber\n);",
        "comment": "Returns the maximum number of logical processors that a processor group or the system can have."
    },
    "GetMaximumProcessorGroupCount": {
        "prototype": "WORD GetMaximumProcessorGroupCount();",
        "comment": "Returns the maximum number of processor groups that the system can have."
    },
    "GetMenu": {
        "prototype": "HMENU GetMenu(\n  HWND hWnd\n);",
        "comment": "Retrieves a handle to the menu assigned to the specified window."
    },
    "GetMenuBarInfo": {
        "prototype": "BOOL GetMenuBarInfo(\n  [in]      HWND         hwnd,\n  [in]      LONG         idObject,\n  [in]      LONG         idItem,\n  [in, out] PMENUBARINFO pmbi\n);",
        "comment": "Retrieves information about the specified menu bar."
    },
    "GetMenuDefaultItem": {
        "prototype": "UINT GetMenuDefaultItem(\n  [in] HMENU hMenu,\n  [in] UINT  fByPos,\n  [in] UINT  gmdiFlags\n);",
        "comment": "Determines the default menu item on the specified menu."
    },
    "GetMenuInfo": {
        "prototype": "HMENU GetMenuInfo(\n  HMENU hMenu,\n  LPMENUINFO lpMenuInfo\n);",
        "comment": "Retrieves information about a specified menu."
    },
    "GetMenuItemCount": {
        "prototype": "int GetMenuItemCount(\n  HMENU hMenu\n);",
        "comment": "Determines the number of items in the specified menu."
    },
    "GetMenuItemID": {
        "prototype": "UINT GetMenuItemID(\n  [in] HMENU hMenu,\n  [in] int   nPos\n);",
        "comment": "Retrieves the menu item identifier of a menu item located at the specified position in a menu."
    },
    "GetMenuItemInfo": {
        "prototype": "BOOL GetMenuItemInfoW(\n  HMENU           hmenu,\n  UINT            item,\n  BOOL            fByPosition,\n  LPMENUITEMINFOW lpmii\n);",
        "comment": "Retrieves information about a menu item."
    },
    "GetMenuItemRect": {
        "prototype": "BOOL GetMenuItemRect(\n  HWND   hWnd,\n  HMENU  hMenu,\n  UINT   uItem,\n  LPRECT lprcItem\n);",
        "comment": "Retrieves the bounding rectangle for the specified menu item."
    },
    "GetMenuState": {
        "prototype": "UINT GetMenuState(\n  HMENU hMenu,\n  UINT  uId,\n  UINT  uFlags\n);",
        "comment": "Retrieves the menu flags associated with the specified menu item. If the menu item opens a submenu, this function also returns the number of items in the submenu."
    },
    "GetMenuString": {
        "prototype": "int GetMenuStringW(\n  HMENU  hMenu,\n  UINT   uIDItem,\n  LPWSTR lpString,\n  int    cchMax,\n  UINT   flags\n);",
        "comment": "Copies the text string of the specified menu item into the specified buffer."
    },
    "GetMessage": {
        "prototype": "BOOL GetMessageW(\n  LPMSG lpMsg,\n  HWND  hWnd,\n  UINT  wMsgFilterMin,\n  UINT  wMsgFilterMax\n);",
        "comment": "Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval."
    },
    "GetMessageExtraInfo": {
        "prototype": "LPARAM GetMessageExtraInfo();",
        "comment": "Retrieves the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue."
    },
    "GetMessagePos": {
        "prototype": "DWORD GetMessagePos();",
        "comment": "Retrieves the cursor position for the last message retrieved by the GetMessage function."
    },
    "GetMessageTime": {
        "prototype": "LONG GetMessageTime();",
        "comment": "Retrieves the message time for the last message retrieved by the GetMessage function. The time is a long integer that specifies the elapsed time, in milliseconds, from the time the system was started to the time the message was created (that is, placed in the thread's message queue)."
    },
    "GetModuleBaseName": {
        "prototype": "DWORD K32GetModuleBaseNameW(\n  HANDLE  hProcess,\n  HMODULE hModule,\n  LPWSTR  lpBaseName,\n  DWORD   nSize\n);",
        "comment": "Retrieves the base name of the specified module."
    },
    "GetModuleFileName": {
        "prototype": "DWORD GetModuleFileNameW(\n  HMODULE hModule,\n  LPWSTR  lpFilename,\n  DWORD   nSize\n);",
        "comment": "Retrieves the fully qualified path for the file that contains the specified module. The module must have been loaded by the current process."
    },
    "GetModuleFileNameEx": {
        "prototype": "DWORD K32GetModuleFileNameExW(\n  HANDLE  hProcess,\n  HMODULE hModule,\n  LPWSTR  lpFilename,\n  DWORD   nSize\n);",
        "comment": "Retrieves the fully qualified path for the file containing the specified module."
    },
    "GetModuleHandle": {
        "prototype": "HMODULE GetModuleHandleW(\n  LPCWSTR lpModuleName\n);",
        "comment": "Retrieves a module handle for the specified module. The module must have been loaded by the calling process."
    },
    "GetModuleHandleEx": {
        "prototype": "BOOL GetModuleHandleExW(\n  [in]           DWORD   dwFlags,\n  [in, optional] LPCWSTR lpModuleName,\n  [out]          HMODULE *phModule\n);",
        "comment": "Retrieves a module handle for the specified module and increments the module's reference count unless GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT is specified. The module must have been loaded by the calling process."
    },
    "GetModuleInformation": {
        "prototype": "BOOL K32GetModuleInformation(\n  [in]  HANDLE       hProcess,\n  [in]  HMODULE      hModule,\n  [out] LPMODULEINFO lpmodinfo,\n  [in]  DWORD        cb\n);",
        "comment": "Retrieves information about the specified module in the MODULEINFO structure."
    },
    "GetMonitorBrightness": {
        "prototype": "_BOOL GetMonitorBrightness(\n  HANDLE  hMonitor,\n  LPDWORD pdwMinimumBrightness,\n  LPDWORD pdwCurrentBrightness,\n  LPDWORD pdwMaximumBrightness\n);",
        "comment": "Retrieves a monitor's minimum, maximum, and current brightness settings."
    },
    "GetMonitorCapabilities": {
        "prototype": "_BOOL GetMonitorCapabilities(\n  HANDLE  hMonitor,\n  LPDWORD pdwMonitorCapabilities,\n  LPDWORD pdwSupportedColorTemperatures\n);",
        "comment": "Retrieves the configuration capabilities of a monitor. Call this function to find out which high-level monitor configuration functions are supported by the monitor."
    },
    "GetMonitorColorTemperature": {
        "prototype": "_BOOL GetMonitorColorTemperature(\n  HANDLE                 hMonitor,\n  LPMC_COLOR_TEMPERATURE pctCurrentColorTemperature\n);",
        "comment": "Retrieves a monitor's current color temperature."
    },
    "GetMonitorContrast": {
        "prototype": "_BOOL GetMonitorContrast(\n  HANDLE  hMonitor,\n  LPDWORD pdwMinimumContrast,\n  LPDWORD pdwCurrentContrast,\n  LPDWORD pdwMaximumContrast\n);",
        "comment": "Retrieves a monitor's minimum, maximum, and current contrast settings."
    },
    "GetMonitorDisplayAreaPosition": {
        "prototype": "_BOOL GetMonitorDisplayAreaPosition(\n  HANDLE           hMonitor,\n  MC_POSITION_TYPE ptPositionType,\n  LPDWORD          pdwMinimumPosition,\n  LPDWORD          pdwCurrentPosition,\n  LPDWORD          pdwMaximumPosition\n);",
        "comment": "Retrieves a monitor's minimum, maximum, and current horizontal or vertical position."
    },
    "GetMonitorDisplayAreaSize": {
        "prototype": "_BOOL GetMonitorDisplayAreaSize(\n  HANDLE       hMonitor,\n  MC_SIZE_TYPE stSizeType,\n  LPDWORD      pdwMinimumWidthOrHeight,\n  LPDWORD      pdwCurrentWidthOrHeight,\n  LPDWORD      pdwMaximumWidthOrHeight\n);",
        "comment": "Retrieves a monitor's minimum, maximum, and current width or height."
    },
    "GetMonitorInfo": {
        "prototype": "BOOL GetMonitorInfoW(\n  HMONITOR      hMonitor,\n  LPMONITORINFO lpmi\n);",
        "comment": "The GetMonitorInfo function retrieves information about a display monitor."
    },
    "GetMonitorRedGreenOrBlueDrive": {
        "prototype": "_BOOL GetMonitorRedGreenOrBlueDrive(\n  HANDLE        hMonitor,\n  MC_DRIVE_TYPE dtDriveType,\n  LPDWORD       pdwMinimumDrive,\n  LPDWORD       pdwCurrentDrive,\n  LPDWORD       pdwMaximumDrive\n);",
        "comment": "Retrieves a monitor's red, green, or blue drive value."
    },
    "GetMonitorRedGreenOrBlueGain": {
        "prototype": "_BOOL GetMonitorRedGreenOrBlueGain(\n  HANDLE       hMonitor,\n  MC_GAIN_TYPE gtGainType,\n  LPDWORD      pdwMinimumGain,\n  LPDWORD      pdwCurrentGain,\n  LPDWORD      pdwMaximumGain\n);",
        "comment": "Retrieves a monitor's red, green, or blue gain value."
    },
    "GetMonitorTechnologyType": {
        "prototype": "_BOOL GetMonitorTechnologyType(\n  HANDLE                       hMonitor,\n  LPMC_DISPLAY_TECHNOLOGY_TYPE pdtyDisplayTechnologyType\n);",
        "comment": "Retrieves the type of technology used by a monitor."
    },
    "GetMouseMovePointsEx": {
        "prototype": "int GetMouseMovePointsEx(\n  UINT             cbSize,\n  LPMOUSEMOVEPOINT lppt,\n  LPMOUSEMOVEPOINT lpptBuf,\n  int              nBufPoints,\n  DWORD            resolution\n);",
        "comment": "Retrieves a history of up to 64 previous coordinates of the mouse or pen."
    },
    "GetNamedPipeClientComputerName": {
        "prototype": "BOOL GetNamedPipeClientComputerNameW(\n  HANDLE Pipe,\n  LPWSTR ClientComputerName,\n  ULONG  ClientComputerNameLength\n);",
        "comment": "Retrieves the client computer name for the specified named pipe."
    },
    "GetNamedPipeClientProcessId": {
        "prototype": "BOOL GetNamedPipeClientProcessId(\n  HANDLE Pipe,\n  PULONG ClientProcessId\n);",
        "comment": "Retrieves the client process identifier for the specified named pipe."
    },
    "GetNamedPipeClientSessionId": {
        "prototype": "BOOL GetNamedPipeClientSessionId(\n  HANDLE Pipe,\n  PULONG ClientSessionId\n);",
        "comment": "Retrieves the client process identifier for the specified named pipe."
    },
    "GetNamedPipeHandleState": {
        "prototype": "BOOL GetNamedPipeHandleStateW(\n  HANDLE  hNamedPipe,\n  LPDWORD lpState,\n  LPDWORD lpCurInstances,\n  LPDWORD lpMaxCollectionCount,\n  LPDWORD lpCollectDataTimeout,\n  LPWSTR  lpUserName,\n  DWORD   nMaxUserNameSize\n);",
        "comment": "Retrieves information about a specified named pipe. The information returned can vary during the lifetime of an instance of the named pipe."
    },
    "GetNamedPipeInfo": {
        "prototype": "BOOL GetNamedPipeInfo(\n  HANDLE  hNamedPipe,\n  LPDWORD lpFlags,\n  LPDWORD lpOutBufferSize,\n  LPDWORD lpInBufferSize,\n  LPDWORD lpMaxInstances);",
        "comment": "Retrieves information about the specified named pipe."
    },
    "getnameinfo": {
        "prototype": "INT getnameinfo(\n  const SOCKADDR *pSockaddr,\n  socklen_t      SockaddrLength,\n  PCHAR          pNodeBuffer,\n  DWORD          NodeBufferSize,\n  PCHAR          pServiceBuffer,\n  DWORD          ServiceBufferSize,\n  INT            Flags\n);",
        "comment": "The getnameinfo function provides protocol-independent name resolution from an address to an ANSI host name and from a port number to the ANSI service name.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "GetNativeSystemInfo": {
        "prototype": "void GetNativeSystemInfo(\n  LPSYSTEM_INFO lpSystemInfo\n);",
        "comment": "Retrieves information about the current system to an application running under WOW64. If the function is called from a 64-bit application, or on a 64-bit system that does not have an Intel64 or x64 processor (such as ARM64), it is equivalent to the GetSystemInfo function."
    },
    "GetNearestColor": {
        "prototype": "COLORREF GetNearestColor(\n  HDC      hdc,\n  COLORREF color\n);",
        "comment": "The GetNearestColor function retrieves a color value identifying a color from the system palette that will be displayed when the specified color value is used."
    },
    "GetNextDlgGroupItem": {
        "prototype": "HWND GetNextDlgGroupItem(\n  HWND hDlg,\n  HWND hCtl,\n  BOOL bPrevious\n);",
        "comment": "Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box."
    },
    "GetNextDlgTabItem": {
        "prototype": "HWND GetNextDlgTabItem(\n  HWND hDlg,\n  HWND hCtl,\n  BOOL bPrevious\n);",
        "comment": "Retrieves a handle to the first control that has the WS_TABSTOP style that precedes (or follows) the specified control."
    },
    "GetNumberOfConsoleInputEvents": {
        "prototype": "BOOL GetNumberOfConsoleInputEvents(\n  HANDLE hConsoleInput,\n  LPDWORD lpcNumberOfEvents\n);",
        "comment": "Retrieves the number of unread input records in the console's input buffer."
    },
    "GetNumberOfPhysicalMonitorsFromHMONITOR": {
        "prototype": "_BOOL GetNumberOfPhysicalMonitorsFromHMONITOR(\n  HMONITOR hMonitor,\n  LPDWORD  pdwNumberOfPhysicalMonitors\n);",
        "comment": "Retrieves the number of physical monitors associated with an HMONITOR monitor handle. Call this function before calling GetPhysicalMonitorsFromHMONITOR."
    },
    "GetObject": {
        "prototype": "int GetObjectW(\n  HANDLE h,\n  int    c,\n  LPVOID pv\n);",
        "comment": "The GetObject function retrieves information for the specified graphics object."
    },
    "GetOpenClipboardWindow": {
        "prototype": "HWND GetOpenClipboardWindow();",
        "comment": "Retrieves the handle to the window that currently has the clipboard open."
    },
    "GetOpenFileName": {
        "prototype": "BOOL GetOpenFileNameW(\n  LPOPENFILENAMEW Arg1\n);",
        "comment": "Creates an Open dialog box that lets the user specify the drive, directory, and the name of a file or set of files to be opened."
    },
    "GetOverlappedResult": {
        "prototype": "BOOL GetOverlappedResult(\n  HANDLE       hFile,\n  LPOVERLAPPED lpOverlapped,\n  LPDWORD      lpNumberOfBytesTransferred,\n  BOOL         bWait\n);",
        "comment": "Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device. To specify a timeout interval or wait on an alertable thread, use GetOverlappedResultEx."
    },
    "GetOverlappedResultEx": {
        "prototype": "BOOL GetOverlappedResultEx(\n  HANDLE       hFile,\n  LPOVERLAPPED lpOverlapped,\n  LPDWORD      lpNumberOfBytesTransferred,\n  DWORD        dwMilliseconds,\n  BOOL         bAlertable\n);",
        "comment": "Retrieves the results of an overlapped operation on the specified file, named pipe, or communications device within the specified time-out interval. The calling thread can perform an alertable wait.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetParent": {
        "prototype": "HWND GetParent(\n  HWND hWnd\n);",
        "comment": "Retrieves a handle to the specified window's parent or owner."
    },
    "GetPath": {
        "prototype": "int GetPath(\n  HDC     hdc,\n  LPPOINT apt,\n  LPBYTE  aj,\n  int     cpt\n);",
        "comment": "The GetPath function retrieves the coordinates defining the endpoints of lines and the control points of curves found in the path that is selected into the specified device context."
    },
    "getpeername": {
        "prototype": "int getpeername(\n  SOCKET   s,\n  sockaddr *name,\n  int      *namelen\n);",
        "comment": "The getpeername function retrieves the address of the peer to which a socket is connected.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "GetPerAdapterInfo": {
        "prototype": "DWORD GetPerAdapterInfo(\n  ULONG                IfIndex,\n  PIP_PER_ADAPTER_INFO pPerAdapterInfo,\n  PULONG               pOutBufLen\n);",
        "comment": "The GetPerAdapterInfo function retrieves information about the adapter corresponding to the specified interface."
    },
    "GetPerformanceInfo": {
        "prototype": "BOOL K32GetPerformanceInfo(\n  [out] PPERFORMANCE_INFORMATION pPerformanceInformation,\n  [in]  DWORD                    cb\n);",
        "comment": "Retrieves the performance values contained in the PERFORMANCE_INFORMATION structure."
    },
    "GetPhysicalCursorPos": {
        "prototype": "BOOL GetPhysicalCursorPos(\n  LPPOINT lpPoint\n);",
        "comment": "Retrieves the position of the cursor in physical coordinates."
    },
    "GetPhysicallyInstalledSystemMemory": {
        "prototype": "BOOL GetPhysicallyInstalledSystemMemory(\n  PULONGLONG TotalMemoryInKilobytes\n);",
        "comment": "Retrieves the amount of RAM that is physically installed on the computer."
    },
    "GetPhysicalMonitorsFromHMONITOR": {
        "prototype": "_BOOL GetPhysicalMonitorsFromHMONITOR(\n  HMONITOR           hMonitor,\n  DWORD              dwPhysicalMonitorArraySize,\n  LPPHYSICAL_MONITOR pPhysicalMonitorArray\n);",
        "comment": "Retrieves the physical monitors associated with an HMONITOR monitor handle."
    },
    "GetPixel": {
        "prototype": "COLORREF GetPixel(\n  HDC hdc,\n  int x,\n  int y);",
        "comment": "The GetPixel function retrieves the red, green, blue (RGB) color value of the pixel at the specified coordinates."
    },
    "GetPointerCursorId": {
        "prototype": "BOOL GetPointerCursorId(\n  [in]  UINT32 pointerId,\n  [out] UINT32 *cursorId\n);",
        "comment": "Retrieves the cursor identifier associated with the specified pointer.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerFrameInfo": {
        "prototype": "BOOL GetPointerFrameInfo(\n  [in]      UINT32       pointerId,\n  [in, out] UINT32       *pointerCount,\n  [out]     POINTER_INFO *pointerInfo\n);",
        "comment": "Gets the entire frame of information for the specified pointers associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerFrameInfoHistory": {
        "prototype": "BOOL GetPointerFrameInfoHistory(\n  [in]      UINT32       pointerId,\n  [in, out] UINT32       *entriesCount,\n  [in, out] UINT32       *pointerCount,\n  [out]     POINTER_INFO *pointerInfo\n);",
        "comment": "Gets the entire frame of information (including coalesced input frames) for the specified pointers associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerFramePenInfo": {
        "prototype": "BOOL GetPointerFramePenInfo(\n  [in]      UINT32           pointerId,\n  [in, out] UINT32           *pointerCount,\n  [out]     POINTER_PEN_INFO *penInfo\n);",
        "comment": "Gets the entire frame of pen-based information for the specified pointers (of type PT_PEN) associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerFramePenInfoHistory": {
        "prototype": "BOOL GetPointerFramePenInfoHistory(\n  [in]            UINT32           pointerId,\n  [in, out]       UINT32           *entriesCount,\n  [in, out]       UINT32           *pointerCount,\n  [out, optional] POINTER_PEN_INFO *penInfo\n);",
        "comment": "Gets the entire frame of pen-based information (including coalesced input frames) for the specified pointers (of type PT_PEN) associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerFrameTouchInfo": {
        "prototype": "BOOL GetPointerFrameTouchInfo(\n  [in]      UINT32             pointerId,\n  [in, out] UINT32             *pointerCount,\n  [out]     POINTER_TOUCH_INFO *touchInfo\n);",
        "comment": "Gets the entire frame of touch-based information for the specified pointers (of type PT_TOUCH) associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerFrameTouchInfoHistory": {
        "prototype": "BOOL GetPointerFrameTouchInfoHistory(\n  [in]      UINT32             pointerId,\n  [in, out] UINT32             *entriesCount,\n  [in, out] UINT32             *pointerCount,\n  [out]     POINTER_TOUCH_INFO *touchInfo\n);",
        "comment": "Gets the entire frame of touch-based information (including coalesced input frames) for the specified pointers (of type PT_TOUCH) associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerInfo": {
        "prototype": "BOOL GetPointerInfo(\n  [in]  UINT32       pointerId,\n  [out] POINTER_INFO *pointerInfo\n);",
        "comment": "Gets the information for the specified pointer associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerInfoHistory": {
        "prototype": "BOOL GetPointerInfoHistory(\n  [in]            UINT32       pointerId,\n  [in, out]       UINT32       *entriesCount,\n  [out, optional] POINTER_INFO *pointerInfo\n);",
        "comment": "Gets the information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer. The most recent input is included in the returned history and is the same as the most recent input returned by the GetPointerInfo function.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerInputTransform": {
        "prototype": "BOOL GetPointerInputTransform(\n  [in]  UINT32          pointerId,\n  [in]  UINT32          historyCount,\n  [out] INPUT_TRANSFORM *inputTransform\n);",
        "comment": "Gets one or more transforms for the pointer information coordinates associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerPenInfo": {
        "prototype": "BOOL GetPointerPenInfo(\n  [in]  UINT32           pointerId,\n  [out] POINTER_PEN_INFO *penInfo\n);",
        "comment": "Gets the pen-based information for the specified pointer (of type PT_PEN) associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerPenInfoHistory": {
        "prototype": "BOOL GetPointerPenInfoHistory(\n  [in]            UINT32           pointerId,\n  [in, out]       UINT32           *entriesCount,\n  [out, optional] POINTER_PEN_INFO *penInfo\n);",
        "comment": "Gets the pen-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type PT_PEN). The most recent input is included in the returned history and is the same as the most recent input returned by the GetPointerPenInfo function.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerTouchInfo": {
        "prototype": "BOOL GetPointerTouchInfo(\n  [in]  UINT32             pointerId,\n  [out] POINTER_TOUCH_INFO *touchInfo\n);",
        "comment": "Gets the touch-based information for the specified pointer (of type PT_TOUCH) associated with the current message.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerTouchInfoHistory": {
        "prototype": "BOOL GetPointerTouchInfoHistory(\n  [in]            UINT32             pointerId,\n  [in, out]       UINT32             *entriesCount,\n  [out, optional] POINTER_TOUCH_INFO *touchInfo\n);",
        "comment": "Gets the touch-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type PT_TOUCH). The most recent input is included in the returned history and is the same as the most recent input returned by the GetPointerTouchInfo function.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPointerType": {
        "prototype": "BOOL GetPointerType(\n  [in]  UINT32             pointerId,\n  [out] POINTER_INPUT_TYPE *pointerType\n);",
        "comment": "Retrieves the pointer type for a specified pointer.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetPrinter": {
        "prototype": "BOOL GetPrinterW(\n  _In_  HANDLE  hPrinter,\n  _In_  DWORD   Level,\n  _Out_ LPBYTE  pPrinter,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pcbNeeded\n);",
        "comment": "The GetPrinter function retrieves information about a specified printer."
    },
    "GetPrinterData": {
        "prototype": "DWORD GetPrinterDataW(\n  _In_  HANDLE  hPrinter,\n  _In_  LPTSTR  pValueName,\n  _Out_ LPDWORD pType,\n  _Out_ LPBYTE  pData,\n  _In_  DWORD   nSize,\n  _Out_ LPDWORD pcbNeeded\n);",
        "comment": "The GetPrinterData function retrieves configuration data for the specified printer or print server."
    },
    "GetPrinterDataEx": {
        "prototype": "DWORD GetPrinterDataExW(\n  _In_  HANDLE  hPrinter,\n  _In_  LPCTSTR pKeyName,\n  _In_  LPCTSTR pValueName,\n  _Out_ LPDWORD pType,\n  _Out_ LPBYTE  pData,\n  _In_  DWORD   nSize,\n  _Out_ LPDWORD pcbNeeded\n);",
        "comment": "The GetPrinterDataEx function retrieves configuration data for the specified printer or print server. GetPrinterDataEx can retrieve values that the SetPrinterData function stored. In addition, GetPrinterDataEx can retrieve values that the SetPrinterDataEx function stored under a specified key."
    },
    "GetPrintExecutionData": {
        "prototype": "BOOL GetPrintExecutionData(\n  _Out_ PRINT_EXECUTION_DATA *pData\n);",
        "comment": "The GetPrintExecutionData retrieves the current print context."
    },
    "GetPriorityClipboardFormat": {
        "prototype": "int GetPriorityClipboardFormat(\n  UINT *paFormatPriorityList,\n  int  cFormats\n);",
        "comment": "Retrieves the first available clipboard format in the specified list."
    },
    "GetProcAddress": {
        "prototype": "FARPROC GetProcAddress(\n  HMODULE hModule,\n  LPCSTR  lpProcName\n);",
        "comment": "Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL)."
    },
    "GetProcessDpiAwareness": {
        "prototype": "HRESULT GetProcessDpiAwareness(\n  HANDLE                hprocess,\n  PROCESS_DPI_AWARENESS *value\n);",
        "comment": "Retrieves the dots per inch (dpi) awareness of the specified process.",
        "category": "user32",
        "minimumWindowsVersion": "WIN81"
    },
    "GetProcessHeap": {
        "prototype": "HANDLE GetProcessHeap();",
        "comment": "Retrieves a handle to the default heap of the calling process. This handle can then be used in subsequent calls to the heap functions."
    },
    "GetProcessHeaps": {
        "prototype": "DWORD GetProcessHeaps(\n  DWORD   NumberOfHeaps,\n  PHANDLE ProcessHeaps\n);",
        "comment": "Returns the number of active heaps and retrieves handles to all of the active heaps for the calling process."
    },
    "GetProcessId": {
        "prototype": "DWORD GetProcessId(\n  HANDLE Process\n);",
        "comment": "Retrieves the process identifier of the specified process."
    },
    "GetProcessImageFileName": {
        "prototype": "DWORD K32GetProcessImageFileNameW(\n  [in]  HANDLE hProcess,\n  [out] LPWSTR lpImageFileName,\n  [in]  DWORD  nSize\n);",
        "comment": "Retrieves the name of the executable file for the specified process."
    },
    "GetProcessShutdownParameters": {
        "prototype": "BOOL GetProcessShutdownParameters(\n  LPDWORD lpdwLevel,\n  LPDWORD lpdwFlags\n);",
        "comment": "Retrieves the shutdown parameters for the currently calling process."
    },
    "GetProcessTimes": {
        "prototype": "BOOL GetProcessTimes(\n  HANDLE hProcess,\n  LPFILETIME lpCreationTime,\n  LPFILETIME lpExitTime,\n  LPFILETIME lpKernelTime,\n  LPFILETIME lpUserTime\n);",
        "comment": "Retrieves timing information for the specified process."
    },
    "GetProcessVersion": {
        "prototype": "DWORD GetProcessVersion(\n  DWORD ProcessId\n);",
        "comment": "Retrieves the major and minor version numbers of the system on which the specified process expects to run."
    },
    "GetProcessWindowStation": {
        "prototype": "HWINSTA GetProcessWindowStation();",
        "comment": "Retrieves a handle to the current window station for the calling process."
    },
    "GetProcessWorkingSetSize": {
        "prototype": "BOOL GetProcessWorkingSetSize(\n  HANDLE  hProcess,\n  PSIZE_T lpMinimumWorkingSetSize,\n  PSIZE_T lpMaximumWorkingSetSize\n);",
        "comment": "Retrieves the minimum and maximum working set sizes of the specified process."
    },
    "GetProductInfo": {
        "prototype": "BOOL GetProductInfo(\n  DWORD  dwOSMajorVersion,\n  DWORD  dwOSMinorVersion,\n  DWORD  dwSpMajorVersion,\n  DWORD  dwSpMinorVersion,\n  PDWORD pdwReturnedProductType\n);",
        "comment": "Retrieves the product type for the operating system on the local computer, and maps the type to the product types supported by the specified operating system."
    },
    "GetProp": {
        "prototype": "HANDLE GetPropW(\n  HWND    hWnd,\n  LPCWSTR lpString\n);",
        "comment": "Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the SetProp function."
    },
    "getprotobyname": {
        "prototype": "protoent* getprotobyname(\n  const char *name\n);",
        "comment": "The getprotobyname function retrieves the protocol information corresponding to a protocol name.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "getprotobynumber": {
        "prototype": "protoent* getprotobynumber(\n  int number\n);",
        "comment": "The getprotobynumber function retrieves protocol information corresponding to a protocol number.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "GetQueuedCompletionStatus": {
        "prototype": "BOOL GetQueuedCompletionStatus(\n  HANDLE       CompletionPort,\n  LPDWORD      lpNumberOfBytesTransferred,\n  PULONG_PTR   lpCompletionKey,\n  LPOVERLAPPED *lpOverlapped,\n  DWORD        dwMilliseconds\n);",
        "comment": "Attempts to dequeue an I/O completion packet from the specified I/O completion port. If there is no completion packet queued, the function waits for a pending I/O operation associated with the completion port to complete."
    },
    "GetQueuedCompletionStatusEx": {
        "prototype": "BOOL GetQueuedCompletionStatusEx(\n  HANDLE             CompletionPort,\n  LPOVERLAPPED_ENTRY lpCompletionPortEntries,\n  ULONG              ulCount,\n  PULONG             ulNumEntriesRemoved,\n  DWORD              dwMilliseconds,\n  BOOL               fAlertable\n);",
        "comment": "Retrieves multiple completion port entries simultaneously. It waits for pending I/O operations that are associated with the specified completion port to complete."
    },
    "GetRawInputBuffer": {
        "prototype": "UINT GetRawInputBuffer(\n  PRAWINPUT pData,\n  PUINT     pcbSize,\n  UINT      cbSizeHeader\n);",
        "comment": "Performs a buffered read of the raw input messages data found in the calling thread's message queue."
    },
    "GetRawInputData": {
        "prototype": "UINT GetRawInputData(\n  HRAWINPUT hRawInput,\n  UINT      uiCommand,\n  LPVOID    pData,\n  PUINT     pcbSize,\n  UINT      cbSizeHeader\n);",
        "comment": "Retrieves the raw input from the specified device."
    },
    "GetRawInputDeviceInfo": {
        "prototype": "UINT GetRawInputDeviceInfoW(\n  HANDLE hDevice,\n  UINT   uiCommand,\n  LPVOID pData,\n  PUINT  pcbSize\n);",
        "comment": "Retrieves information about the raw input device."
    },
    "GetRawInputDeviceList": {
        "prototype": "UINT GetRawInputDeviceList(\n  PRAWINPUTDEVICELIST pRawInputDeviceList,\n  PUINT               puiNumDevices,\n  UINT                cbSize\n);",
        "comment": "Enumerates the raw input devices attached to the system."
    },
    "GetRegisteredRawInputDevices": {
        "prototype": "UINT GetRegisteredRawInputDevices(\n  PRAWINPUTDEVICE pRawInputDevices,\n  PUINT           puiNumDevices,\n  UINT            cbSize\n);",
        "comment": "Retrieves the information about the raw input devices for the current application."
    },
    "GetRestrictedErrorInfo": {
        "prototype": "HRESULT GetRestrictedErrorInfo(\n  [out] IRestrictedErrorInfo **ppRestrictedErrorInfo\n);",
        "comment": "Gets the restricted error information object set by a previous call to SetRestrictedErrorInfo in the current logical thread.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "GetSaveFileName": {
        "prototype": "BOOL GetSaveFileNameW(\n  LPOPENFILENAMEW Arg1\n);",
        "comment": "Creates a Save dialog box that lets the user specify the drive, directory, and name of a file to save."
    },
    "GetScaleFactorForMonitor": {
        "prototype": "HRESULT GetScaleFactorForMonitor(\n  HMONITOR            hMon,\n  DEVICE_SCALE_FACTOR *pScale\n);",
        "comment": "Gets the scale factor of a specific monitor.",
        "category": "user32",
        "minimumWindowsVersion": "WIN81"
    },
    "GetScrollBarInfo": {
        "prototype": "BOOL GetScrollBarInfo(\n  HWND           hwnd,\n  LONG           idObject,\n  PSCROLLBARINFO psbi\n);",
        "comment": "The GetScrollBarInfo function retrieves information about the specified scroll bar."
    },
    "GetScrollInfo": {
        "prototype": "BOOL GetScrollInfo(\n  HWND         hwnd,\n  int          nBar,\n  LPSCROLLINFO lpsi\n);",
        "comment": "The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb)."
    },
    "getservbyname": {
        "prototype": "servent* getservbyname(\n  const char *name,\n  const char *proto\n);",
        "comment": "The getservbyname function retrieves service information corresponding to a service name and protocol.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "getservbyport": {
        "prototype": "servent* getservbyport(\n  int        port,\n  const char *proto\n);",
        "comment": "The getservbyport function retrieves service information corresponding to a port and protocol.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "GetServiceDirectory": {
        "prototype": "DWORD GetServiceDirectory(\n  SERVICE_STATUS_HANDLE  hServiceStatus,\n  SERVICE_DIRECTORY_TYPE eDirectoryType,\n  PWCHAR                 lpPathBuffer,\n  DWORD                  cchPathBufferLength,\n  DWORD                  *lpcchRequiredBufferLength\n);",
        "comment": "Returns a path for a per-service filesystem location for a service to read and/or write state to.",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "GetServiceDisplayName": {
        "prototype": "BOOL GetServiceDisplayNameW(\n  [in]            SC_HANDLE hSCManager,\n  [in]            LPCWSTR   lpServiceName,\n  [out, optional] LPWSTR    lpDisplayName,\n  [in, out]       LPDWORD   lpcchBuffer\n);",
        "comment": "Retrieves the display name of the specified service."
    },
    "GetServiceKeyName": {
        "prototype": "BOOL GetServiceKeyNameW(\n   [in]            SC_HANDLE hSCManager,\n   [in]            LPCWSTR   lpDisplayName,\n   [out, optional] LPWSTR    lpServiceName,\n   [in, out]       LPDWORD   lpcchBuffer\n );",
        "comment": "Retrieves the service name of the specified service."
    },
    "GetServiceRegistryStateKey": {
        "prototype": "DWORD GetServiceRegistryStateKey(\n  SERVICE_STATUS_HANDLE       ServiceStatusHandle,\n  SERVICE_REGISTRY_STATE_TYPE StateType,\n  DWORD                       AccessMask,\n  HKEY                        *ServiceStateKey\n);",
        "comment": "Returns a handle for a registry key for a service to read and/or write state to.",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "GetSharedServiceDirectory": {
        "prototype": "DWORD GetSharedServiceDirectory(\n  SC_HANDLE                     ServiceHandle,\n  SERVICE_SHARED_DIRECTORY_TYPE DirectoryType,\n  PWCHAR                        PathBuffer,\n  DWORD                         PathBufferLength,\n  DWORD                         *RequiredBufferLength\n);",
        "comment": "Returns a path for a per-service filesystem location for a service and associated programs to read and/or write state to.",
        "minimumWindowsVersion": "WIN11_21H2"
    },
    "GetSharedServiceRegistryStateKey": {
        "prototype": "DWORD GetSharedServiceRegistryStateKey(\n  SC_HANDLE                          ServiceHandle,\n  SERVICE_SHARED_REGISTRY_STATE_TYPE StateType,\n  DWORD                              AccessMask,\n  HKEY                               *ServiceStateKey\n);",
        "comment": "Returns a handle for a registry key for a service and associated programs to read and/or write state to.",
        "minimumWindowsVersion": "WIN11_21H2"
    },
    "GetShellWindow": {
        "prototype": "HWND GetShellWindow();",
        "comment": "Retrieves a handle to the Shell's desktop window."
    },
    "GetShortPathName": {
        "prototype": "DWORD GetShortPathNameW(\n  [in]  LPCWSTR lpszLongPath,\n  [out] LPWSTR  lpszShortPath,\n  [in]  DWORD   cchBuffer\n);",
        "comment": "Retrieves the short path form of the specified path."
    },
    "getsockname": {
        "prototype": "int getsockname(\n  SOCKET   s,\n  sockaddr *name,\n  int      *namelen\n);",
        "comment": "The getsockname function retrieves the local name for a socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "getsockopt": {
        "prototype": "int getsockopt(\n  SOCKET s,\n  int    level,\n  int    optname,\n  char   *optval,\n  int    *optlen\n);",
        "comment": "The getsockopt function retrieves a socket option.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "GetSpoolFileHandle": {
        "prototype": "HANDLE GetSpoolFileHandle(\n  _In_ HANDLE hPrinter\n);",
        "comment": "The GetSpoolFileHandle function retrieves a handle for the spool file associated with the job currently submitted by the application."
    },
    "GetStartupInfo": {
        "prototype": "void GetStartupInfoW(\n  LPSTARTUPINFOW lpStartupInfo\n);",
        "comment": "Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created."
    },
    "GetStdHandle": {
        "prototype": "HANDLE GetStdHandle(\n  _In_ DWORD nStdHandle\n);",
        "comment": "Retrieves a handle to the specified standard device (standard input, standard output, or standard error)."
    },
    "GetStockObject": {
        "prototype": "HGDIOBJ GetStockObject(\n  int i\n);",
        "comment": "The GetStockObject function retrieves a handle to one of the stock pens, brushes, fonts, or palettes."
    },
    "GetSubMenu": {
        "prototype": "HMENU GetSubMenu(\n  HMENU hMenu,\n  int nPos\n);",
        "comment": "Retrieves a handle to the drop-down menu or submenu activated by the specified menu item."
    },
    "GetSysColor": {
        "prototype": "DWORD GetSysColor(\n  int nIndex\n);",
        "comment": "Retrieves the current color of the specified display element. Display elements are the parts of a window and the display that appear on the system display screen."
    },
    "GetSysColorBrush": {
        "prototype": "HBRUSH GetSysColorBrush(\n  int nIndex\n);",
        "comment": "The GetSysColorBrush function retrieves a handle identifying a logical brush that corresponds to the specified color index."
    },
    "GetSystemDefaultLangID": {
        "prototype": "LANGID GetSystemDefaultLangID();",
        "comment": "Returns the language identifier for the system locale."
    },
    "GetSystemDefaultLocaleName": {
        "prototype": "int GetSystemDefaultLocaleName(\n  LPWSTR lpLocaleName,\n  int    cchLocaleName\n);",
        "comment": "Retrieves the system default locale name."
    },
    "GetSystemDirectory": {
        "prototype": "UINT GetSystemDirectoryW(\n  LPWSTR lpBuffer,\n  UINT   uSize\n);",
        "comment": "Retrieves the path of the system directory. The system directory contains system files such as dynamic-link libraries and drivers."
    },
    "GetSystemDpiForProcess": {
        "prototype": "UINT GetSystemDpiForProcess(\n  HANDLE hProcess\n);",
        "comment": "Retrieves the system DPI associated with a given process. This is useful for avoiding compatibility issues that arise from sharing DPI-sensitive information between multiple system-aware processes with different system DPI values.",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "GetSystemInfo": {
        "prototype": "void GetSystemInfo(\n  LPSYSTEM_INFO lpSystemInfo\n);",
        "comment": "Retrieves information about the current system. To retrieve accurate information for an application running on WOW64, call the GetNativeSystemInfo function."
    },
    "GetSystemMenu": {
        "prototype": "HMENU GetSystemMenu(\n  HWND hWnd,\n  BOOL bRevert\n);",
        "comment": "Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying."
    },
    "GetSystemMetrics": {
        "prototype": "int GetSystemMetrics(\n  int nIndex\n);",
        "comment": "Retrieves the specified system metric or system configuration setting. Note that all dimensions retrieved by GetSystemMetrics are in pixels."
    },
    "GetSystemMetricsForDpi": {
        "prototype": "int GetSystemMetricsForDpi(\n  int  nIndex,\n  UINT dpi\n);",
        "comment": "Retrieves the specified system metric or system configuration setting taking into account a provided DPI.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "GetSystemPowerStatus": {
        "prototype": "BOOL GetSystemPowerStatus(\n  LPSYSTEM_POWER_STATUS lpSystemPowerStatus\n);",
        "comment": "Retrieves the power status of the system. The status indicates whether the system is running on AC or DC power, whether the battery is currently charging, how much battery life remains, and if battery saver is on or off."
    },
    "GetSystemTime": {
        "prototype": "void GetSystemTime(\n  LPSYSTEMTIME lpSystemTime\n);",
        "comment": "Retrieves the current local date and time."
    },
    "GetSystemTimeAdjustment": {
        "prototype": "BOOL GetSystemTimeAdjustment(\n  PDWORD lpTimeAdjustment,\n  PDWORD lpTimeIncrement,\n  PBOOL  lpTimeAdjustmentDisabled\n);",
        "comment": "Determines whether the system is applying periodic time adjustments to its time-of-day clock, and obtains the value and period of any such adjustments."
    },
    "GetSystemTimes": {
        "prototype": "BOOL GetSystemTimes(\n  PFILETIME lpIdleTime,\n  PFILETIME lpKernelTime,\n  PFILETIME lpUserTime\n);",
        "comment": "Retrieves system timing information. On a multiprocessor system, the values returned are the sum of the designated times across all processors."
    },
    "GetTabbedTextExtent": {
        "prototype": "DWORD GetTabbedTextExtentW(\n  HDC       hdc,\n  LPCWSTR   lpString,\n  int       chCount,\n  int       nTabPositions,\n  const INT *lpnTabStopPositions\n);",
        "comment": "The GetTabbedTextExtent function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The GetTabbedTextExtent function uses the currently selected font to compute the dimensions of the string."
    },
    "GetTempFileName": {
        "prototype": "UINT GetTempFileNameW(\n  [in]  LPCWSTR lpPathName,\n  [in]  LPCWSTR lpPrefixString,\n  [in]  UINT    uUnique,\n  [out] LPWSTR  lpTempFileName\n);",
        "comment": "Creates a name for a temporary file. If a unique file name is generated, an empty file is created and the handle to it is released; otherwise, only a file name is generated."
    },
    "GetTempPath": {
        "prototype": "DWORD GetTempPathW(\n  DWORD  nBufferLength,\n  LPWSTR lpBuffer\n);",
        "comment": "Retrieves the path of the directory designated for temporary files."
    },
    "GetTempPath2": {
        "prototype": "DWORD GetTempPath2W(\n  [in]  DWORD  BufferLength,\n  [out] LPWSTR Buffer\n);",
        "comment": "Retrieves the path of the directory designated for temporary files, based on the privileges of the calling process.",
        "minimumWindowsVersion": "WIN2022"
    },
    "GetTextMetrics": {
        "prototype": "BOOL GetTextMetricsW(\n  HDC          hdc,\n  LPTEXTMETRICW lptm\n);",
        "comment": "The GetTextMetrics function fills the specified buffer with the metrics for the currently selected font."
    },
    "GetThemeMetric": {
        "prototype": "HRESULT GetThemeMetric(\n  HTHEME hTheme,\n  HDC    hdc,\n  int    iPartId,\n  int    iStateId,\n  int    iPropId,\n  int    *piVal\n);",
        "comment": "Retrieves the value of a metric property."
    },
    "GetThemePartSize": {
        "prototype": "HRESULT GetThemePartSize(\n  HTHEME    hTheme,\n  HDC       hdc,\n  int       iPartId,\n  int       iStateId,\n  LPCRECT   prc,\n  THEMESIZE eSize,\n  SIZE      *psz\n);",
        "comment": "Calculates the original size of the part defined by a visual style."
    },
    "GetThemeRect": {
        "prototype": "HRESULT GetThemeRect(\n  HTHEME hTheme,\n  int    iPartId,\n  int    iStateId,\n  int    iPropId,\n  LPRECT pRect\n);",
        "comment": "Retrieves the value of a RECT property."
    },
    "GetThemeSysColor": {
        "prototype": "COLORREF GetThemeSysColor(\n  HTHEME hTheme,\n  int    iColorId\n);",
        "comment": "Retrieves the value of a system color."
    },
    "GetThemeSysColorBrush": {
        "prototype": "HBRUSH GetThemeSysColorBrush(\n  HTHEME hTheme,\n  int    iColorId\n);",
        "comment": "Retrieves a system color brush."
    },
    "GetThemeSysFont": {
        "prototype": "HRESULT GetThemeSysFont(\n  HTHEME   hTheme,\n  int      iFontId,\n  LOGFONTW *plf\n);",
        "comment": "Retrieves the LOGFONT of a system font."
    },
    "GetThemeSysSize": {
        "prototype": "int GetThemeSysSize(\n  HTHEME hTheme,\n  int    iSizeId\n);",
        "comment": "Retrieves the value of a system size metric from theme data."
    },
    "GetThreadDesktop": {
        "prototype": "HDESK GetThreadDesktop(\n  DWORD dwThreadId\n);",
        "comment": "Retrieves a handle to the desktop assigned to the specified thread."
    },
    "GetThreadDpiAwarenessContext": {
        "prototype": "DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext();",
        "comment": "Gets the DPI_AWARENESS_CONTEXT for the current thread.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "GetThreadDpiHostingBehavior": {
        "prototype": "DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior();",
        "comment": "Retrieves the DPI_HOSTING_BEHAVIOR from the current thread.",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "GetThreadId": {
        "prototype": "DWORD GetThreadId(\n  HANDLE Thread\n);",
        "comment": "Retrieves the thread identifier of the specified thread."
    },
    "GetThreadLocale": {
        "prototype": "LCID GetThreadLocale();",
        "comment": "Returns the locale identifier of the current locale for the calling thread."
    },
    "GetThreadTimes": {
        "prototype": "BOOL GetThreadTimes(\n  HANDLE     hThread,\n  LPFILETIME lpCreationTime,\n  LPFILETIME lpExitTime,\n  LPFILETIME lpKernelTime,\n  LPFILETIME lpUserTime\n);",
        "comment": "Retrieves timing information for the specified thread."
    },
    "GetThreadUILanguage": {
        "prototype": "LANGID GetThreadUILanguage();",
        "comment": "Returns the language identifier of the first user interface language for the current thread."
    },
    "GetTickCount": {
        "prototype": "DWORD GetTickCount();",
        "comment": "Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days."
    },
    "GetTitleBarInfo": {
        "prototype": "BOOL GetTitleBarInfo(\n  HWND          hwnd,\n  PTITLEBARINFO pti\n);",
        "comment": "Retrieves information about the specified title bar."
    },
    "GetTokenInformation": {
        "prototype": "BOOL GetTokenInformation(\n  HANDLE                  TokenHandle,\n  TOKEN_INFORMATION_CLASS TokenInformationClass,\n  LPVOID                  TokenInformation,\n  DWORD                   TokenInformationLength,\n  PDWORD                  ReturnLength\n);",
        "comment": "The GetTokenInformation function retrieves a specified type of information about an access token. The calling process must have appropriate access rights to obtain the information."
    },
    "GetTopWindow": {
        "prototype": "HWND GetTopWindow(\n  HWND hWnd\n);",
        "comment": "Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order."
    },
    "GetTouchInputInfo": {
        "prototype": "BOOL GetTouchInputInfo(\n  HTOUCHINPUT hTouchInput,\n  UINT        cInputs,\n  PTOUCHINPUT pInputs,\n  int         cbSize\n);",
        "comment": "Retrieves detailed information about touch inputs associated with a particular touch input handle."
    },
    "GetUnpredictedMessagePos": {
        "prototype": "DWORD GetUnpredictedMessagePos();",
        "comment": "Gets pointer data before it has gone through touch prediction processing.",
        "minimumWindowsVersion": "WIN8"
    },
    "GetUpdatedClipboardFormats": {
        "prototype": "BOOL GetUpdatedClipboardFormats(\n  PUINT lpuiFormats,\n  UINT  cFormats,\n  PUINT pcFormatsOut\n);",
        "comment": "Retrieves the currently supported clipboard formats."
    },
    "GetUpdateRect": {
        "prototype": "BOOL GetUpdateRect(\n  HWND   hWnd,\n  LPRECT lpRect,\n  BOOL   bErase\n);",
        "comment": "The GetUpdateRect function retrieves the coordinates of the smallest rectangle that completely encloses the update region of the specified window. GetUpdateRect retrieves the rectangle in logical coordinates. If there is no update region, GetUpdateRect retrieves an empty rectangle (sets all coordinates to zero)."
    },
    "GetUpdateRgn": {
        "prototype": "int GetUpdateRgn(\n  HWND hWnd,\n  HRGN hRgn,\n  BOOL bErase\n);",
        "comment": "The GetUpdateRgn function retrieves the update region of a window by copying it into the specified region. The coordinates of the update region are relative to the upper-left corner of the window (that is, they are client coordinates)."
    },
    "GetUserDefaultLangID": {
        "prototype": "LANGID GetUserDefaultLangID();",
        "comment": "Returns the language identifier of the Region Format setting for the current user."
    },
    "GetUserDefaultLCID": {
        "prototype": "LCID GetUserDefaultLCID();",
        "comment": "Returns the locale identifier for the user default locale."
    },
    "GetUserDefaultLocaleName": {
        "prototype": "int GetUserDefaultLocaleName(\n  LPWSTR lpLocaleName,\n  int    cchLocaleName\n);",
        "comment": "Retrieves the user default locale name."
    },
    "GetUserName": {
        "prototype": "BOOL GetUserNameW(\n  LPWSTR  lpBuffer,\n  LPDWORD pcbBuffer);",
        "comment": "Retrieves the name of the user associated with the current thread."
    },
    "GetUserObjectInformation": {
        "prototype": "BOOL GetUserObjectInformationW(\n  HANDLE  hObj,\n  int     nIndex,\n  PVOID   pvInfo,\n  DWORD   nLength,\n  LPDWORD lpnLengthNeeded\n);",
        "comment": "Retrieves information about the specified window station or desktop object."
    },
    "GetVersionEx": {
        "prototype": "BOOL GetVersionExW(\n  LPOSVERSIONINFOW lpVersionInformation\n);",
        "comment": "Gets information about the operating system version."
    },
    "GetVolumeInformation": {
        "prototype": "BOOL GetVolumeInformationW(\n  LPCWSTR lpRootPathName,\n  LPWSTR  lpVolumeNameBuffer,\n  DWORD   nVolumeNameSize,\n  LPDWORD lpVolumeSerialNumber,\n  LPDWORD lpMaximumComponentLength,\n  LPDWORD lpFileSystemFlags,\n  LPWSTR  lpFileSystemNameBuffer,\n  DWORD   nFileSystemNameSize\n);",
        "comment": "Retrieves information about the file system and volume associated with the specified root directory."
    },
    "GetVolumeInformationByHandle": {
        "prototype": "BOOL GetVolumeInformationByHandleW(\n  HANDLE  hFile,\n  LPWSTR  lpVolumeNameBuffer,\n  DWORD   nVolumeNameSize,\n  LPDWORD lpVolumeSerialNumber,\n  LPDWORD lpMaximumComponentLength,\n  LPDWORD lpFileSystemFlags,\n  LPWSTR  lpFileSystemNameBuffer,\n  DWORD   nFileSystemNameSize\n);",
        "comment": "Retrieves information about the file system and volume associated with the specified file."
    },
    "GetVolumeNameForVolumeMountPoint": {
        "prototype": "BOOL GetVolumeNameForVolumeMountPointW(\n  [in]  LPCWSTR lpszVolumeMountPoint,\n  [out] LPWSTR  lpszVolumeName,\n  [in]  DWORD   cchBufferLength\n);",
        "comment": "Retrieves a volume GUID path for the volume that is associated with the specified volume mount point (drive letter, volume GUID path, or mounted folder)."
    },
    "GetVolumePathName": {
        "prototype": "BOOL GetVolumePathNameW(\n  LPCWSTR lpszFileName,\n  LPWSTR  lpszVolumePathName,\n  DWORD   cchBufferLength);",
        "comment": "Retrieves the volume mount point where the specified path is mounted."
    },
    "GetVolumePathNamesForVolumeName": {
        "prototype": "BOOL GetVolumePathNamesForVolumeNameW(\n  LPCWSTR lpszVolumeName,\n  LPWCH   lpszVolumePathNames,\n  DWORD   cchBufferLength,\n  PDWORD  lpcchReturnLength\n);",
        "comment": "Retrieves a list of drive letters and mounted folder paths for the specified volume."
    },
    "GetWindow": {
        "prototype": "HWND GetWindow(\n  HWND hWnd,\n  UINT uCmd\n);",
        "comment": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window."
    },
    "GetWindowDC": {
        "prototype": "HDC GetWindowDC(\n  HWND hWnd\n);",
        "comment": "The GetWindowDC function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars. A window device context permits painting anywhere in a window, because the origin of the device context is the upper-left corner of the window instead of the client area."
    },
    "GetWindowDisplayAffinity": {
        "prototype": "BOOL GetWindowDisplayAffinity(\n  HWND  hWnd,\n  DWORD *pdwAffinity\n);",
        "comment": "Retrieves the current display affinity setting, from any process, for a given window."
    },
    "GetWindowDpiAwarenessContext": {
        "prototype": "DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext(\n  HWND hwnd);",
        "comment": "Returns the DPI_AWARENESS_CONTEXT associated with a window.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "GetWindowDpiHostingBehavior": {
        "prototype": "DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior(\n  HWND hwnd);",
        "comment": "Returns the DPI_HOSTING_BEHAVIOR of the specified window.",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "GetWindowExtEx": {
        "prototype": "BOOL GetWindowExtEx(\n  HDC    hdc,\n  LPSIZE lpsize\n);",
        "comment": "This function retrieves the x-extent and y-extent of the window for the specified device context."
    },
    "GetWindowInfo": {
        "prototype": "BOOL GetWindowInfo(\n  HWND hwnd,\n  PWINDOWINFO pwi\n);",
        "comment": "Retrieves information about the specified window."
    },
    "GetWindowLongPtr": {
        "prototype": "LONG_PTR GetWindowLongPtrW(\n  HWND hWnd,\n  int  nIndex\n);",
        "comment": "Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory."
    },
    "GetWindowModuleFileName": {
        "prototype": "UINT GetWindowModuleFileNameW(\n  HWND   hwnd,\n  LPWSTR pszFileName,\n  UINT   cchFileNameMax\n);",
        "comment": "Retrieves the full path and file name of the module associated with the specified window handle."
    },
    "GetWindowOrgEx": {
        "prototype": "BOOL GetWindowOrgEx(\n  HDC     hdc,\n  LPPOINT lppoint\n);",
        "comment": "The GetWindowOrgEx function retrieves the x-coordinates and y-coordinates of the window origin for the specified device context."
    },
    "GetWindowPlacement": {
        "prototype": "BOOL GetWindowPlacement(\n  HWND            hWnd,\n  WINDOWPLACEMENT *lpwndpl);",
        "comment": "Retrieves the show state and the restored, minimized, and maximized positions of the specified window."
    },
    "GetWindowRect": {
        "prototype": "BOOL GetWindowRect(\n  HWND   hWnd,\n  LPRECT lpRect\n);",
        "comment": "Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen."
    },
    "GetWindowRgn": {
        "prototype": "int GetWindowRgn(\n  HWND hWnd,\n  HRGN hRgn\n);",
        "comment": "The GetWindowRgn function obtains a copy of the window region of a window. The window region of a window is set by calling the SetWindowRgn function. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region."
    },
    "GetWindowRgnBox": {
        "prototype": "int GetWindowRgnBox(\n  HWND   hWnd,\n  LPRECT lprc\n);",
        "comment": "The GetWindowRgnBox function retrieves the dimensions of the tightest bounding rectangle for the window region of a window."
    },
    "GetWindowText": {
        "prototype": "int GetWindowTextW(\n  HWND   hWnd,\n  LPWSTR lpString,\n  int    nMaxCount\n);",
        "comment": "Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application."
    },
    "GetWindowTextLength": {
        "prototype": "int GetWindowTextLengthW(\n  HWND hWnd\n);",
        "comment": "Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in another application."
    },
    "GetWindowTheme": {
        "prototype": "HTHEME GetWindowTheme(\n  HWND hwnd\n);",
        "comment": "Retrieves a theme handle to a window that has visual styles applied."
    },
    "GetWindowThreadProcessId": {
        "prototype": "DWORD GetWindowThreadProcessId(\n  HWND    hWnd,\n  LPDWORD lpdwProcessId\n);",
        "comment": "Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window."
    },
    "GlobalAlloc": {
        "prototype": "HGLOBAL GlobalAlloc(\n  UINT   uFlags,\n  SIZE_T dwBytes\n);",
        "comment": "Allocates the specified number of bytes from the heap."
    },
    "GlobalFree": {
        "prototype": "HGLOBAL GlobalFree(\n  _Frees_ptr_opt_ HGLOBAL hMem\n);",
        "comment": "Frees the specified global memory object and invalidates its handle."
    },
    "GlobalLock": {
        "prototype": "LPVOID GlobalLock(\n  HGLOBAL hMem\n);",
        "comment": "Locks a global memory object and returns a pointer to the first byte of the object's memory block."
    },
    "GlobalMemoryStatusEx": {
        "prototype": "BOOL GlobalMemoryStatusEx(\n  LPMEMORYSTATUSEX lpBuffer\n);",
        "comment": "Retrieves information about the system's current usage of both physical and virtual memory."
    },
    "GlobalSize": {
        "prototype": "SIZE_T GlobalSize(\n  HGLOBAL hMem\n);",
        "comment": "Retrieves the current size of the specified global memory object, in bytes."
    },
    "GlobalUnlock": {
        "prototype": "BOOL GlobalUnlock(\n  HGLOBAL hMem\n);",
        "comment": "Decrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE. This function has no effect on memory objects allocated with GMEM_FIXED."
    },
    "GrayString": {
        "prototype": "BOOL GrayStringW(\n  HDC            hDC,\n  HBRUSH         hBrush,\n  GRAYSTRINGPROC lpOutputFunc,\n  LPARAM         lpData,\n  int            nCount,\n  int            X,\n  int            Y,\n  int            nWidth,\n  int            nHeight\n);",
        "comment": "The GrayString function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. GrayString uses the font currently selected for the specified device context."
    },
    "HeapAlloc": {
        "prototype": "LPVOID HeapAlloc(\n  HANDLE hHeap,\n  DWORD  dwFlags,\n  SIZE_T dwBytes\n);",
        "comment": "Allocates a block of memory from a heap. The allocated memory is not movable."
    },
    "HeapCompact": {
        "prototype": "SIZE_T HeapCompact(\n  HANDLE hHeap,\n  DWORD  dwFlags\n);",
        "comment": "Returns the size of the largest committed free block in the specified heap. If the Disable heap coalesce on free global flag is set, this function also coalesces adjacent free blocks of memory in the heap."
    },
    "HeapCreate": {
        "prototype": "HANDLE HeapCreate(\n  DWORD  flOptions,\n  SIZE_T dwInitialSize,\n  SIZE_T dwMaximumSize\n);",
        "comment": "Creates a private heap object that can be used by the calling process. The function reserves space in the virtual address space of the process and allocates physical storage for a specified initial portion of this block."
    },
    "HeapDestroy": {
        "prototype": "BOOL HeapDestroy(\n  HANDLE hHeap\n);",
        "comment": "Destroys the specified heap object. It decommits and releases all the pages of a private heap object, and it invalidates the handle to the heap."
    },
    "HeapFree": {
        "prototype": "BOOL HeapFree(\n  HANDLE                 hHeap,\n  DWORD                  dwFlags,\n  _Frees_ptr_opt_ LPVOID lpMem\n);",
        "comment": "Frees a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function."
    },
    "HeapLock": {
        "prototype": "BOOL HeapLock(\n  HANDLE hHeap\n);",
        "comment": "Attempts to acquire the critical section object, or lock, that is associated with a specified heap."
    },
    "HeapQueryInformation": {
        "prototype": "BOOL HeapQueryInformation(\n  HANDLE                 HeapHandle,\n  HEAP_INFORMATION_CLASS HeapInformationClass,\n  PVOID                  HeapInformation,\n  SIZE_T                 HeapInformationLength,\n  PSIZE_T                ReturnLength\n);",
        "comment": "Retrieves information about the specified heap."
    },
    "HeapReAlloc": {
        "prototype": "LPVOID HeapReAlloc(\n  HANDLE                 hHeap,\n  DWORD                  dwFlags,\n  _Frees_ptr_opt_ LPVOID lpMem,\n  SIZE_T                 dwBytes\n);",
        "comment": "Retrieves information about the specified heap."
    },
    "HeapSetInformation": {
        "prototype": "BOOL HeapSetInformation(\n  HANDLE                 HeapHandle,\n  HEAP_INFORMATION_CLASS HeapInformationClass,\n  PVOID                  HeapInformation,\n  SIZE_T                 HeapInformationLength\n);",
        "comment": "Enables features for a specified heap."
    },
    "HeapSize": {
        "prototype": "SIZE_T HeapSize(\n  HANDLE  hHeap,\n  DWORD   dwFlags,\n  LPCVOID lpMem\n);",
        "comment": "Retrieves the size of a memory block allocated from a heap by the HeapAlloc or HeapReAlloc function."
    },
    "HeapUnlock": {
        "prototype": "BOOL HeapUnlock(\n  HANDLE hHeap\n);",
        "comment": "Releases ownership of the critical section object, or lock, that is associated with a specified heap. It reverses the action of the HeapLock function."
    },
    "HeapValidate": {
        "prototype": "BOOL HeapValidate(\n  HANDLE  hHeap,\n  DWORD   dwFlags,\n  LPCVOID lpMem\n);",
        "comment": "Validates the specified heap. The function scans all the memory blocks in the heap and verifies that the heap control structures maintained by the heap manager are in a consistent state. You can also use the HeapValidate function to validate a single memory block within a specified heap without checking the validity of the entire heap."
    },
    "HeapWalk": {
        "prototype": "BOOL HeapWalk(\n  HANDLE               hHeap,\n  LPPROCESS_HEAP_ENTRY lpEntry\n);",
        "comment": "Enumerates the memory blocks in the specified heap."
    },
    "HideCaret": {
        "prototype": "BOOL HideCaret(\n  HWND hWnd\n);",
        "comment": "Removes the caret from the screen. Hiding a caret does not destroy its current shape or invalidate the insertion point."
    },
    "HiliteMenuItem": {
        "prototype": "BOOL HiliteMenuItem(\n  [in] HWND  hWnd,\n  [in] HMENU hMenu,\n  [in] UINT  uIDHiliteItem,\n  [in] UINT  uHilite\n);",
        "comment": "Adds or removes highlighting from an item in a menu bar."
    },
    "htonl": {
        "prototype": "u_long htonl(\n  u_long hostlong\n);",
        "comment": "The htonl function converts a u_long from host to TCP/IP network byte order (which is big-endian).",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "htons": {
        "prototype": "u_short htons(\n  u_short hostshort\n);",
        "comment": "The htons function converts a u_short from host to TCP/IP network byte order (which is big-endian).",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "IIDFromString": {
        "prototype": "HRESULT IIDFromString(\n  LPCOLESTR lpsz,\n  LPIID     lpiid\n);",
        "comment": "Converts a string generated by the StringFromIID function back into the original interface identifier (IID)."
    },
    "inet_addr": {
        "prototype": "unsigned long inet_addr(\n  const char *cp\n);",
        "comment": "The inet_addr function converts a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "inet_ntoa": {
        "prototype": "char* inet_ntoa(\n  in_addr in\n);",
        "comment": "The inet_ntoa function converts an (Ipv4) Internet network address into an ASCII string in Internet standard dotted-decimal format.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "inet_ntop": {
        "prototype": "PCSTR WSAAPI inet_ntop(\n  [in]  INT        Family,\n  [in]  const VOID *pAddr,\n  [out] PSTR       pStringBuf,\n  [in]  size_t     StringBufSize\n);",
        "comment": "The inet_ntop function converts an IPv4 or IPv6 Internet network address into a string in Internet standard format.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "InflateRect": {
        "prototype": "BOOL InflateRect(\n  LPRECT lprc,\n  int    dx,\n  int    dy\n);",
        "comment": "The InflateRect function increases or decreases the width and height of the specified rectangle. The InflateRect function adds -dx units to the left end and dx to the right end of the rectangle and -dy units to the top and dy to the bottom. The dx and dy parameters are signed values; positive values increase the width and height, and negative values decrease them."
    },
    "InitCommonControlsEx": {
        "prototype": "BOOL InitCommonControlsEx(\n  const INITCOMMONCONTROLSEX *picce\n);",
        "comment": "Ensures that the common control DLL (Comctl32.dll) is loaded, and registers specific common control classes from the DLL. An application must call this function before creating a common control."
    },
    "InitializeProcThreadAttributeList": {
        "prototype": "BOOL InitializeProcThreadAttributeList(\n  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,\n  DWORD                        dwAttributeCount,\n  DWORD                        dwFlags,\n  PSIZE_T                      lpSize\n);",
        "comment": "Initializes the specified list of attributes for process and thread creation."
    },
    "InitiateShutdown": {
        "prototype": "DWORD InitiateShutdownW(\n  LPWSTR lpMachineName,\n  LPWSTR lpMessage,\n  DWORD  dwGracePeriod,\n  DWORD  dwShutdownFlags,\n  DWORD  dwReason\n);",
        "comment": "Initiates a shutdown and restart of the specified computer, and restarts any applications that have been registered for restart."
    },
    "InSendMessage": {
        "prototype": "BOOL InSendMessage();",
        "comment": "Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the SendMessage function."
    },
    "InSendMessageEx": {
        "prototype": "DWORD InSendMessageEx(\n  LPVOID lpReserved\n);",
        "comment": "Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process)."
    },
    "InsertMenu": {
        "prototype": "BOOL InsertMenuW(\n  HMENU    hMenu,\n  UINT     uPosition,\n  UINT     uFlags,\n  UINT_PTR uIDNewItem,\n  LPCWSTR  lpNewItem\n);",
        "comment": "Inserts a new menu item into a menu, moving other items down the menu."
    },
    "InsertMenuItem": {
        "prototype": "BOOL InsertMenuItemW(\n  HMENU            hmenu,\n  UINT             item,\n  BOOL             fByPosition,\n  LPCMENUITEMINFOW lpmi\n);",
        "comment": "Inserts a new menu item at the specified position in a menu."
    },
    "IntersectRect": {
        "prototype": "BOOL IntersectRect(\n  LPRECT     lprcDst,\n  const RECT *lprcSrc1,\n  const RECT *lprcSrc2\n);",
        "comment": "The IntersectRect function calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle. If the source rectangles do not intersect, an empty rectangle (in which all coordinates are set to zero) is placed into the destination rectangle."
    },
    "InvalidateRect": {
        "prototype": "BOOL InvalidateRect(\n  HWND       hWnd,\n  const RECT *lpRect,\n  BOOL       bErase\n);",
        "comment": "The InvalidateRect function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn."
    },
    "InvalidateRgn": {
        "prototype": "BOOL InvalidateRgn(\n  HWND hWnd,\n  HRGN hRgn,\n  BOOL bErase\n);",
        "comment": "The InvalidateRgn function invalidates the client area within the specified region by adding it to the current update region of a window. The invalidated region, along with all other areas in the update region, is marked for painting when the next WM_PAINT message occurs."
    },
    "InvertRect": {
        "prototype": "BOOL InvertRect(\n  HDC        hDC,\n  const RECT *lprc\n);",
        "comment": "The InvertRect function inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel in the rectangle's interior."
    },
    "ioctlsocket": {
        "prototype": "int ioctlsocket(\n  SOCKET s,\n  long   cmd,\n  u_long *argp\n);",
        "comment": "The ioctlsocket function controls the I/O mode of a socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "IpReleaseAddress": {
        "prototype": "DWORD IpReleaseAddress(\n  PIP_ADAPTER_INDEX_MAP AdapterInfo\n);",
        "comment": "The IpReleaseAddress function releases an IPv4 address previously obtained through the Dynamic Host Configuration Protocol (DHCP)."
    },
    "IpRenewAddress": {
        "prototype": "DWORD IpRenewAddress(\n  PIP_ADAPTER_INDEX_MAP AdapterInfo\n);",
        "comment": "The IpRenewAddress function renews a lease on an IPv4 address previously obtained through Dynamic Host Configuration Protocol (DHCP)."
    },
    "IsApiSetImplemented": {
        "prototype": "BOOL IsApiSetImplemented(\n  PCSTR Contract\n);",
        "comment": "The IsApiSetImplemented function tests if a specified API set is present on the computer.",
        "category": "onecore",
        "minimumWindowsVersion": "WIN10_TH1"
    },
    "IsAppThemed": {
        "prototype": "BOOL IsAppThemed();",
        "comment": "Reports whether the current application's user interface displays using visual styles."
    },
    "IsChild": {
        "prototype": "BOOL IsChild(\n  HWND hWndParent,\n  HWND hWnd\n);",
        "comment": "Determines whether a window is a child window or descendant window of a specified parent window. A child window is the direct descendant of a specified parent window if that parent window is in the chain of parent windows; the chain of parent windows leads from the original overlapped or pop-up window to the child window."
    },
    "IsClipboardFormatAvailable": {
        "prototype": "BOOL IsClipboardFormatAvailable(\n  UINT format\n);",
        "comment": "Determines whether the clipboard contains data in the specified format."
    },
    "IsCompositionActive": {
        "prototype": "BOOL IsCompositionActive();",
        "comment": "Determines whether Desktop Window Manager (DWM) composition effects are available to the theme."
    },
    "IsDebuggerPresent": {
        "prototype": "BOOL IsDebuggerPresent();",
        "comment": "Determines whether the calling process is being debugged by a user-mode debugger."
    },
    "IsDialogMessage": {
        "prototype": "BOOL IsDialogMessageW(\n  HWND  hDlg,\n  LPMSG lpMsg\n);",
        "comment": "Determines whether a message is intended for the specified dialog box and, if it is, processes the message."
    },
    "IsDlgButtonChecked": {
        "prototype": "UINT IsDlgButtonChecked(\n  HWND hDlg,\n  int  nIDButton\n);",
        "comment": "The IsDlgButtonChecked function determines whether a button control is checked or whether a three-state button control is checked, unchecked, or indeterminate."
    },
    "IsGUIThread": {
        "prototype": "BOOL IsGUIThread(\n  BOOL bConvert\n);",
        "comment": "Determines whether the calling thread is already a GUI thread. It can also optionally convert the thread to a GUI thread."
    },
    "IsHungAppWindow": {
        "prototype": "BOOL IsHungAppWindow(\n  HWND hwnd\n);",
        "comment": "Determines whether the system considers that a specified application is not responding. An application is considered to be not responding if it is not waiting for input, is not in startup processing, and has not called PeekMessage within the internal timeout period of 5 seconds."
    },
    "IsIconic": {
        "prototype": "BOOL IsIconic(\n  HWND hWnd\n);",
        "comment": "Determines whether the specified window is minimized (iconic)."
    },
    "IsImmersiveProcess": {
        "prototype": "BOOL IsImmersiveProcess(\n  HANDLE hProcess\n);",
        "comment": "Determines whether the process belongs to a Windows Store app.",
        "minimumWindowsVersion": "WIN8"
    },
    "IsMenu": {
        "prototype": "BOOL IsMenu(\n  HMENU hMenu\n);",
        "comment": "Determines whether a handle is a menu handle."
    },
    "IsMouseInPointerEnabled": {
        "prototype": "BOOL IsMouseInPointerEnabled();",
        "comment": "Indicates whether EnableMouseInPointer is set for the mouse to act as a pointer input device and send WM_POINTER messages.",
        "minimumWindowsVersion": "WIN8"
    },
    "IsNativeVhdBoot": {
        "prototype": "BOOL IsNativeVhdBoot(\n  PBOOL NativeVhdBoot\n);",
        "comment": "Indicates if the OS was booted from a VHD container.",
        "minimumWindowsVersion": "WIN8"
    },
    "IsProcessDPIAware": {
        "prototype": "BOOL IsProcessDPIAware();",
        "comment": "Determines whether the current process is dots per inch (dpi) aware such that it adjusts the sizes of UI elements to compensate for the dpi setting."
    },
    "IsProcessInJob": {
        "prototype": "BOOL IsProcessInJob(\n  [in]           HANDLE ProcessHandle,\n  [in, optional] HANDLE JobHandle,\n  [out]          PBOOL  Result\n);",
        "comment": "Determines whether the process is running in the specified job."
    },
    "IsRectEmpty": {
        "prototype": "BOOL IsRectEmpty(\n  const RECT *lprc\n);",
        "comment": "The IsRectEmpty function determines whether the specified rectangle is empty. An empty rectangle is one that has no area; that is, the coordinate of the right side is less than or equal to the coordinate of the left side, or the coordinate of the bottom side is less than or equal to the coordinate of the top side."
    },
    "IsSystemResumeAutomatic": {
        "prototype": "BOOL IsSystemResumeAutomatic();",
        "comment": "Determines the current state of the computer."
    },
    "IsThemeActive": {
        "prototype": "BOOL IsThemeActive();",
        "comment": "Tests if a visual style for the current application is active."
    },
    "IsThemeBackgroundPartiallyTransparent": {
        "prototype": "BOOL IsThemeBackgroundPartiallyTransparent(\n  HTHEME hTheme,\n  int    iPartId,\n  int    iStateId\n);",
        "comment": "Retrieves whether the background specified by the visual style has transparent pieces or alpha-blended pieces."
    },
    "IsThemeDialogTextureEnabled": {
        "prototype": "BOOL IsThemeDialogTextureEnabled(\n  HWND hwnd\n);",
        "comment": "Reports whether a specified dialog window supports background texturing."
    },
    "IsThemePartDefined": {
        "prototype": "BOOL IsThemePartDefined(\n  HTHEME hTheme,\n  int    iPartId,\n  int    iStateId\n);",
        "comment": "Retrieves whether a visual style has defined parameters for the specified part and state."
    },
    "IsTouchWindow": {
        "prototype": "BOOL IsTouchWindow(\n  HWND   hwnd,\n  PULONG pulFlags\n);",
        "comment": "Checks whether a specified window is touch-capable and, optionally, retrieves the modifier flags set for the window's touch capability."
    },
    "IsValidDevmode": {
        "prototype": "BOOL IsValidDevmodeW(\n_In_ PDEVMODE pDevmode,\n       size_t   DevmodeSize\n);",
        "comment": "The IsValidDevmode function verifies that the contents of a DEVMODE structure are valid."
    },
    "IsValidDpiAwarenessContext": {
        "prototype": "BOOL IsValidDpiAwarenessContext(\n  DPI_AWARENESS_CONTEXT value);",
        "comment": "Determines if a specified DPI_AWARENESS_CONTEXT is valid and supported by the current system.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "IsValidLocaleName": {
        "prototype": "BOOL IsValidLocaleName(\n  LPCWSTR lpLocaleName\n  );",
        "comment": "Determines if the specified locale name is valid for a locale that is installed or supported on the operating system."
    },
    "IsWindow": {
        "prototype": "BOOL IsWindow(\n  HWND hWnd);",
        "comment": "Determines whether the specified window handle identifies an existing window."
    },
    "IsWindowEnabled": {
        "prototype": "BOOL IsWindowEnabled(\n  HWND hWnd\n);",
        "comment": "Determines whether the specified window is enabled for mouse and keyboard input."
    },
    "IsWindowUnicode": {
        "prototype": "BOOL IsWindowUnicode(\n  HWND hWnd);",
        "comment": "Determines whether the specified window is a native Unicode window."
    },
    "IsWindowVisible": {
        "prototype": "BOOL IsWindowVisible(\n  HWND hWnd\n);",
        "comment": "Determines the visibility state of the specified window."
    },
    "IsWow64Message": {
        "prototype": "BOOL IsWow64Message();",
        "comment": "Determines whether the last message read from the current thread's queue originated from a WOW64 process."
    },
    "IsWow64Process2": {
        "prototype": "BOOL IsWow64Process2(\n  HANDLE hProcess,\n  USHORT *pProcessMachine,\n  USHORT *pNativeMachine\n);",
        "comment": "Determines whether the specified process is running under WOW64. Also returns additional machine process and architecture information.",
        "minimumWindowsVersion": "WIN10_RS3"
    },
    "IsZoomed": {
        "prototype": "BOOL IsZoomed(\n  HWND hWnd\n);",
        "comment": "Determines whether a window is maximized."
    },
    "KillTimer": {
        "prototype": "BOOL KillTimer(\n  HWND     hWnd,\n  UINT_PTR uIDEvent\n);",
        "comment": "Destroys the specified timer."
    },
    "LineTo": {
        "prototype": "BOOL LineTo(\n  HDC hdc,\n  int x,\n  int y\n);",
        "comment": "The LineTo function draws a line from the current position up to, but not including, the specified point."
    },
    "listen": {
        "prototype": "int listen(\n  SOCKET s,\n  int    backlog\n);",
        "comment": "The listen function places a socket in a state in which it is listening for an incoming connection.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "LoadAccelerators": {
        "prototype": "HACCEL LoadAcceleratorsW(\n  HINSTANCE hInstance,\n  LPCWSTR   lpTableName\n);",
        "comment": "Loads the specified accelerator table."
    },
    "LoadCursor": {
        "prototype": "HCURSOR LoadCursorW(\n  HINSTANCE hInstance,\n  LPCWSTR   lpCursorName\n);",
        "comment": "Loads the specified cursor resource from the executable (.EXE) file associated with an application instance. Note: this function has been superseded by the LoadImage function."
    },
    "LoadCursorFromFile": {
        "prototype": "HCURSOR LoadCursorFromFileW(\n  LPCWSTR lpFileName\n);",
        "comment": "Creates a cursor based on data contained in a file."
    },
    "LoadIcon": {
        "prototype": "HICON LoadIconW(\n  HINSTANCE hInstance,\n  LPCWSTR   lpIconName\n);",
        "comment": "Loads the specified icon resource from the executable (.exe) file associated with an application instance."
    },
    "LoadImage": {
        "prototype": "HANDLE LoadImageW(\n  HINSTANCE hInst,\n  LPCWSTR   name,\n  UINT      type,\n  int       cx,\n  int       cy,\n  UINT      fuLoad\n);",
        "comment": "Loads an icon, cursor, animated cursor, or bitmap."
    },
    "LoadKeyboardLayout": {
        "prototype": "HKL LoadKeyboardLayoutW(\n  LPCWSTR pwszKLID,\n  UINT    Flags\n);",
        "comment": "Loads a new input locale identifier (formerly called the keyboard layout) into the system."
    },
    "LoadLibrary": {
        "prototype": "HMODULE LoadLibraryW(\n  LPCWSTR lpLibFileName\n);",
        "comment": "Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded."
    },
    "LoadLibraryEx": {
        "prototype": "HMODULE LoadLibraryExW(\n  [in] LPCWSTR lpLibFileName,\n       HANDLE  hFile,\n  [in] DWORD   dwFlags\n);",
        "comment": "Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded."
    },
    "LoadMenu": {
        "prototype": "HMENU LoadMenuW(\n  [in, optional] HINSTANCE hInstance,\n  [in]           LPCWSTR   lpMenuName\n);",
        "comment": "Loads the specified menu resource from the executable (.exe) file associated with an application instance."
    },
    "LoadMenuIndirect": {
        "prototype": "HMENU LoadMenuIndirectW(\n  const MENUTEMPLATEW *lpMenuTemplate\n);",
        "comment": "Creates a cursor based on data contained in a file."
    },
    "LoadResource": {
        "prototype": "HGLOBAL LoadResource(\n  HMODULE hModule,\n  HRSRC   hResInfo\n);",
        "comment": "Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory."
    },
    "LoadString": {
        "prototype": "int LoadStringW(\n  HINSTANCE hInstance,\n  UINT      uID,\n  LPWSTR    lpBuffer,\n  int       cchBufferMax\n);",
        "comment": "Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself."
    },
    "LocalFree": {
        "prototype": "HLOCAL LocalFree(\n  _Frees_ptr_opt_ HLOCAL hMem\n);",
        "comment": "Frees the specified local memory object and invalidates its handle."
    },
    "LockFile": {
        "prototype": "BOOL LockFile(\n  [in] HANDLE hFile,\n  [in] DWORD  dwFileOffsetLow,\n  [in] DWORD  dwFileOffsetHigh,\n  [in] DWORD  nNumberOfBytesToLockLow,\n  [in] DWORD  nNumberOfBytesToLockHigh\n);",
        "comment": "Locks the specified file for exclusive access by the calling process."
    },
    "LockFileEx": {
        "prototype": "BOOL LockFileEx(\n  [in]      HANDLE       hFile,\n  [in]      DWORD        dwFlags,\n            DWORD        dwReserved,\n  [in]      DWORD        nNumberOfBytesToLockLow,\n  [in]      DWORD        nNumberOfBytesToLockHigh,\n  [in, out] LPOVERLAPPED lpOverlapped\n);",
        "comment": "Locks the specified file for exclusive access by the calling process. This function can operate either synchronously or asynchronously and can request either an exclusive or a shared lock."
    },
    "LockResource": {
        "prototype": "LPVOID LockResource(\n  HGLOBAL hResData\n);",
        "comment": "Retrieves a pointer to the specified resource in memory."
    },
    "LockSetForegroundWindow": {
        "prototype": "BOOL LockSetForegroundWindow(\n  UINT uLockCode\n);",
        "comment": "The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function."
    },
    "LockWindowUpdate": {
        "prototype": "BOOL LockWindowUpdate(\n  HWND hWndLock\n);",
        "comment": "The LockWindowUpdate function disables or enables drawing in the specified window. Only one window can be locked at a time."
    },
    "LockWorkStation": {
        "prototype": "BOOL LockWorkStation();",
        "comment": "Locks the workstation's display. Locking a workstation protects it from unauthorized use."
    },
    "LogicalToPhysicalPoint": {
        "prototype": "BOOL LogicalToPhysicalPoint(\n  HWND    hWnd,\n  LPPOINT lpPoint\n);",
        "comment": "Converts the logical coordinates of a point in a window to physical coordinates."
    },
    "LogicalToPhysicalPointForPerMonitorDPI": {
        "prototype": "BOOL LogicalToPhysicalPointForPerMonitorDPI(\n  HWND    hWnd,\n  LPPOINT lpPoint\n);",
        "comment": "Converts a point in a window from logical coordinates into physical coordinates, regardless of the dots per inch (dpi) awareness of the caller.",
        "minimumWindowsVersion": "WIN81"
    },
    "LookupIconIdFromDirectory": {
        "prototype": "int LookupIconIdFromDirectory(\n  PBYTE presbits,\n  BOOL  fIcon\n);",
        "comment": "Searches through icon or cursor data for the icon or cursor that best fits the current display device."
    },
    "LookupIconIdFromDirectoryEx": {
        "prototype": "int LookupIconIdFromDirectoryEx(\n  PBYTE presbits,\n  BOOL  fIcon,\n  int   cxDesired,\n  int   cyDesired,\n  UINT  Flags\n);",
        "comment": "Searches through icon or cursor data for the icon or cursor that best fits the current display device."
    },
    "MagGetColorEffect": {
        "prototype": "BOOL MagGetColorEffect(\n  HWND            hwnd,\n  PMAGCOLOREFFECT pEffect\n);",
        "comment": "Gets the color transformation matrix for a magnifier control."
    },
    "MagGetFullscreenColorEffect": {
        "prototype": "BOOL MagGetFullscreenColorEffect(\n  PMAGCOLOREFFECT pEffect\n);",
        "comment": "Retrieves the color transformation matrix associated with the full-screen magnifier.",
        "minimumWindowsVersion": "WIN8"
    },
    "MagGetFullscreenTransform": {
        "prototype": "BOOL MagGetFullscreenTransform(\n  float *pMagLevel,\n  int   *pxOffset,\n  int   *pyOffset\n);",
        "comment": "Retrieves the magnification settings for the full-screen magnifier.",
        "minimumWindowsVersion": "WIN8"
    },
    "MagGetImageScalingCallback": {
        "prototype": "MagImageScalingCallback MagGetImageScalingCallback(\n  HWND hwnd\n);",
        "comment": "Retrieves the registered callback function that implements a custom transform for image scaling."
    },
    "MagGetInputTransform": {
        "prototype": "BOOL MagGetInputTransform(\n  BOOL   *pfEnabled,\n  LPRECT pRectSource,\n  LPRECT pRectDest\n);",
        "comment": "Retrieves the current input transformation for pen and touch input, represented as a source rectangle and a destination rectangle.",
        "minimumWindowsVersion": "WIN8"
    },
    "MagGetWindowFilterList": {
        "prototype": "int MagGetWindowFilterList(\n  HWND  hwnd,\n  DWORD *pdwFilterMode,\n  int   count,\n  HWND  *pHWND\n);",
        "comment": "Retrieves the list of windows that are magnified or excluded from magnification."
    },
    "MagGetWindowSource": {
        "prototype": "BOOL MagGetWindowSource(\n  HWND hwnd,\n  RECT *pRect\n);",
        "comment": "Gets the rectangle of the area that is being magnified."
    },
    "MagGetWindowTransform": {
        "prototype": "BOOL MagGetWindowTransform(\n  HWND          hwnd,\n  PMAGTRANSFORM pTransform\n);",
        "comment": "Retrieves the transformation matrix associated with a magnifier control."
    },
    "MagInitialize": {
        "prototype": "BOOL MagInitialize();",
        "comment": "Creates and initializes the magnifier run-time objects."
    },
    "MagSetColorEffect": {
        "prototype": "BOOL MagSetColorEffect(\n  HWND            hwnd,\n  PMAGCOLOREFFECT pEffect\n);",
        "comment": "Sets the color transformation matrix for a magnifier control."
    },
    "MagSetFullscreenColorEffect": {
        "prototype": "BOOL MagSetFullscreenColorEffect(\n  PMAGCOLOREFFECT pEffect\n);",
        "comment": "Changes the color transformation matrix associated with the full-screen magnifier.",
        "minimumWindowsVersion": "WIN8"
    },
    "MagSetFullscreenTransform": {
        "prototype": "BOOL MagSetFullscreenTransform(\n  float magLevel,\n  int   xOffset,\n  int   yOffset\n);",
        "comment": "Changes the magnification settings for the full-screen magnifier.",
        "minimumWindowsVersion": "WIN8"
    },
    "MagSetImageScalingCallback": {
        "prototype": "BOOL MagSetImageScalingCallback(\n  HWND                    hwnd,\n  MagImageScalingCallback callback\n);",
        "comment": "Sets the callback function for external image filtering and scaling."
    },
    "MagSetInputTransform": {
        "prototype": "BOOL MagSetInputTransform(\n  BOOL         fEnabled,\n  const LPRECT pRectSource,\n  const LPRECT pRectDest\n);",
        "comment": "Sets the current active input transformation for pen and touch input, represented as a source rectangle and a destination rectangle.",
        "minimumWindowsVersion": "WIN8"
    },
    "MagSetWindowFilterList": {
        "prototype": "BOOL MagSetWindowFilterList(\n  HWND  hwnd,\n  DWORD dwFilterMode,\n  int   count,\n  HWND  *pHWND\n);",
        "comment": "Sets the list of windows to be magnified or the list of windows to be excluded from magnification."
    },
    "MagSetWindowSource": {
        "prototype": "BOOL MagSetWindowSource(\n  HWND hwnd,\n  RECT rect\n);",
        "comment": "Sets the source rectangle for the magnification window."
    },
    "MagSetWindowTransform": {
        "prototype": "BOOL MagSetWindowTransform(\n  HWND          hwnd,\n  PMAGTRANSFORM pTransform\n);",
        "comment": "Sets the transformation matrix for a magnifier control."
    },
    "MagShowSystemCursor": {
        "prototype": "BOOL MagShowSystemCursor(\n  BOOL fShowCursor\n);",
        "comment": "Shows or hides the system cursor.",
        "minimumWindowsVersion": "WIN8"
    },
    "MagUninitialize": {
        "prototype": "BOOL MagUninitialize();",
        "comment": "Destroys the magnifier run-time objects."
    },
    "MapDialogRect": {
        "prototype": "BOOL MapDialogRect(\n  HWND   hDlg,\n  LPRECT lpRect\n);",
        "comment": "Converts the specified dialog box units to screen units (pixels). The function replaces the coordinates in the specified RECT structure with the converted coordinates, which allows the structure to be used to create a dialog box or position a control within a dialog box."
    },
    "MapVirtualKey": {
        "prototype": "UINT MapVirtualKeyW(\n  UINT uCode,\n  UINT uMapType\n);",
        "comment": "Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code."
    },
    "MapVirtualKeyEx": {
        "prototype": "UINT MapVirtualKeyExW(\n  UINT uCode,\n  UINT uMapType,\n  HKL  dwhkl\n);",
        "comment": "Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code. The function translates the codes using the input language and an input locale identifier."
    },
    "MapWindowPoints": {
        "prototype": "int MapWindowPoints(\n  HWND    hWndFrom,\n  HWND    hWndTo,\n  LPPOINT lpPoints,\n  UINT    cPoints\n);",
        "comment": "The MapWindowPoints function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window."
    },
    "mciGetDeviceID": {
        "prototype": "MCIDEVICEID mciGetDeviceIDW(\n  LPCTSTR lpszDevice\n);",
        "comment": "The mciGetDeviceID function retrieves the device identifier corresponding to the name of an open device."
    },
    "mciGetDeviceIDFromElementID": {
        "prototype": "MCIDEVICEID mciGetDeviceIDFromElementIDW(\n  DWORD   dwElementID,\n  LPCTSTR lpstrType\n);",
        "comment": "The mciGetDeviceIDFromElementID function retrieves the MCI device identifier corresponding to an element identifier."
    },
    "mciGetErrorString": {
        "prototype": "BOOL mciGetErrorStringW(\n  DWORD  fdwError,\n  LPTSTR lpszErrorText,\n  UINT   cchErrorText\n);",
        "comment": "The mciGetErrorString function retrieves a string that describes the specified MCI error code."
    },
    "mciSendCommand": {
        "prototype": "MCIERROR mciSendCommandW(\n  MCIDEVICEID IDDevice,\n  UINT        uMsg,\n  DWORD_PTR   fdwCommand,\n  DWORD_PTR   dwParam\n);",
        "comment": "The mciSendCommand function sends a command message to the specified MCI device."
    },
    "mciSendString": {
        "prototype": "MCIERROR mciSendStringW(\n  LPCTSTR lpszCommand,\n  LPTSTR  lpszReturnString,\n  UINT    cchReturn,\n  HANDLE  hwndCallback\n);",
        "comment": "The mciSendString function sends a command string to an MCI device. The device that the command is sent to is specified in the command string."
    },
    "MenuItemFromPoint": {
        "prototype": "int MenuItemFromPoint(\n  HWND  hWnd,\n  HMENU hMenu,\n  POINT ptScreen\n);",
        "comment": "Determines which menu item, if any, is at the specified location."
    },
    "MessageBox": {
        "prototype": "int MessageBoxW(\n  HWND    hWnd,\n  LPCWSTR lpText,\n  LPCWSTR lpCaption,\n  UINT    uType\n);",
        "comment": "Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked."
    },
    "MessageBoxEx": {
        "prototype": "int MessageBoxExW(\n  HWND    hWnd,\n  LPCWSTR lpText,\n  LPCWSTR lpCaption,\n  UINT    uType,\n  WORD    wLanguageId\n);",
        "comment": "Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface."
    },
    "MetaDataGetDispenser": {
        "prototype": "HRESULT MetaDataGetDispenser(\n  REFCLSID rclsid,\n  REFIID   riid,\n  LPVOID   *ppv\n);",
        "comment": "Creates a dispenser class.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN10_TH2"
    },
    "midiConnect": {
        "prototype": "MMRESULT midiConnect(\n  HMIDI    hmi,\n  HMIDIOUT hmo,\n  LPVOID   pReserved\n);",
        "comment": "The midiConnect function connects a MIDI input device to a MIDI thru or output device, or connects a MIDI thru device to a MIDI output device."
    },
    "midiDisconnect": {
        "prototype": "MMRESULT midiDisconnect(\n  HMIDI    hmi,\n  HMIDIOUT hmo,\n  LPVOID   pReserved\n);",
        "comment": "The midiDisconnect function disconnects a MIDI input device from a MIDI thru or output device, or disconnects a MIDI thru device from a MIDI output device."
    },
    "midiInAddBuffer": {
        "prototype": "MMRESULT midiInAddBuffer(\n  HMIDIIN   hmi,\n  LPMIDIHDR pmh,\n  UINT      cbmh\n);",
        "comment": "The midiInAddBuffer function sends an input buffer to a specified opened MIDI input device. This function is used for system-exclusive messages."
    },
    "midiInClose": {
        "prototype": "MMRESULT midiInClose(\n  HMIDIIN hmi\n);",
        "comment": "The midiInClose function closes the specified MIDI input device."
    },
    "midiInGetDevCaps": {
        "prototype": "MMRESULT midiInGetDevCapsW(\n  UINT_PTR      uDeviceID,\n  LPMIDIINCAPSW pmic,\n  UINT          cbmic\n);",
        "comment": "The midiInGetDevCaps function determines the capabilities of a specified MIDI input device."
    },
    "midiInGetErrorText": {
        "prototype": "MMRESULT midiInGetErrorTextW(\n  MMRESULT mmrError,\n  LPWSTR   pszText,\n  UINT     cchText\n);",
        "comment": "The midiInGetErrorText function retrieves a textual description for an error identified by the specified error code."
    },
    "midiInGetID": {
        "prototype": "MMRESULT midiInGetID(\n  HMIDIIN hmi,\n  LPUINT  puDeviceID\n);",
        "comment": "The midiInGetID function gets the device identifier for the given MIDI input device."
    },
    "midiInGetNumDevs": {
        "prototype": "UINT midiInGetNumDevs();",
        "comment": "The midiInGetNumDevs function retrieves the number of MIDI input devices in the system."
    },
    "midiInMessage": {
        "prototype": "MMRESULT midiInMessage(\n  HMIDIIN   hmi,\n  UINT      uMsg,\n  DWORD_PTR dw1,\n  DWORD_PTR dw2\n);",
        "comment": "The midiInMessage function sends a message to the MIDI device driver."
    },
    "midiInOpen": {
        "prototype": "MMRESULT midiInOpen(\n  LPHMIDIIN phmi,\n  UINT      uDeviceID,\n  DWORD_PTR dwCallback,\n  DWORD_PTR dwInstance,\n  DWORD     fdwOpen\n);",
        "comment": "The midiInOpen function opens a specified MIDI input device."
    },
    "midiInPrepareHeader": {
        "prototype": "MMRESULT midiInPrepareHeader(\n  HMIDIIN   hmi,\n  LPMIDIHDR pmh,\n  UINT      cbmh\n);",
        "comment": "The midiInPrepareHeader function prepares a buffer for MIDI input."
    },
    "midiInReset": {
        "prototype": "MMRESULT midiInReset(\n  HMIDIIN hmi\n);",
        "comment": "The midiInReset function stops input on a given MIDI input device."
    },
    "midiInStart": {
        "prototype": "MMRESULT midiInStart(\n  HMIDIIN hmi\n);",
        "comment": "The midiInStart function starts MIDI input on the specified MIDI input device."
    },
    "midiInStop": {
        "prototype": "MMRESULT midiInStop(\n  HMIDIIN hmi\n);",
        "comment": "The midiInStop function stops MIDI input on the specified MIDI input device."
    },
    "midiInUnprepareHeader": {
        "prototype": "MMRESULT midiInUnprepareHeader(\n  HMIDIIN   hmi,\n  LPMIDIHDR pmh,\n  UINT      cbmh\n);",
        "comment": "The midiInUnprepareHeader function cleans up the preparation performed by the midiInPrepareHeader function."
    },
    "midiOutCacheDrumPatches": {
        "prototype": "MMRESULT midiOutCacheDrumPatches(\n  HMIDIOUT hmo,\n  UINT     uPatch,\n  LPWORD   pwkya,\n  UINT     fuCache\n);",
        "comment": "The midiOutCacheDrumPatches function requests that an internal MIDI synthesizer device preload and cache a specified set of key-based percussion patches."
    },
    "midiOutCachePatches": {
        "prototype": "MMRESULT midiOutCachePatches(\n  HMIDIOUT hmo,\n  UINT     uBank,\n  LPWORD   pwpa,\n  UINT     fuCache\n);",
        "comment": "The midiOutCachePatches function requests that an internal MIDI synthesizer device preload and cache a specified set of patches."
    },
    "midiOutClose": {
        "prototype": "MMRESULT midiOutClose(\n  HMIDIOUT hmo\n);",
        "comment": "The midiOutClose function closes the specified MIDI output device."
    },
    "midiOutGetDevCaps": {
        "prototype": "MMRESULT midiOutGetDevCapsW(\n  UINT_PTR       uDeviceID,\n  LPMIDIOUTCAPSW pmoc,\n  UINT           cbmoc\n);",
        "comment": "The midiOutGetDevCaps function queries a specified MIDI output device to determine its capabilities."
    },
    "midiOutGetErrorText": {
        "prototype": "MMRESULT midiOutGetErrorTextW(\n  MMRESULT mmrError,\n  LPWSTR   pszText,\n  UINT     cchText\n);",
        "comment": "The midiOutGetErrorText function retrieves a textual description for an error identified by the specified error code."
    },
    "midiOutGetID": {
        "prototype": "MMRESULT midiOutGetID(\n  HMIDIOUT hmo,\n  LPUINT   puDeviceID\n);",
        "comment": "The midiOutGetID function retrieves the device identifier for the given MIDI output device."
    },
    "midiOutGetNumDevs": {
        "prototype": "UINT midiOutGetNumDevs();",
        "comment": "The midiOutGetNumDevs function retrieves the number of MIDI output devices present in the system."
    },
    "midiOutGetVolume": {
        "prototype": "MMRESULT midiOutGetVolume(\n  HMIDIOUT hmo,\n  LPDWORD  pdwVolume\n);",
        "comment": "The midiOutGetVolume function retrieves the current volume setting of a MIDI output device."
    },
    "midiOutLongMsg": {
        "prototype": "MMRESULT midiOutLongMsg(\n  HMIDIOUT  hmo,\n  LPMIDIHDR pmh,\n  UINT      cbmh\n);",
        "comment": "The midiOutLongMsg function sends a system-exclusive MIDI message to the specified MIDI output device."
    },
    "midiOutMessage": {
        "prototype": "MMRESULT midiOutMessage(\n  HMIDIOUT  hmo,\n  UINT      uMsg,\n  DWORD_PTR dw1,\n  DWORD_PTR dw2\n);",
        "comment": "The midiOutMessage function sends a message to the MIDI device drivers. This function is used only for driver-specific messages that are not supported by the MIDI API."
    },
    "midiOutOpen": {
        "prototype": "MMRESULT midiOutOpen(\n  LPHMIDIOUT phmo,\n  UINT       uDeviceID,\n  DWORD_PTR  dwCallback,\n  DWORD_PTR  dwInstance,\n  DWORD      fdwOpen\n);",
        "comment": "The midiOutOpen function opens a MIDI output device for playback."
    },
    "midiOutPrepareHeader": {
        "prototype": "MMRESULT midiOutPrepareHeader(\n  HMIDIOUT  hmo,\n  LPMIDIHDR pmh,\n  UINT      cbmh\n);",
        "comment": "The midiOutPrepareHeader function prepares a MIDI system-exclusive or stream buffer for output."
    },
    "midiOutReset": {
        "prototype": "MMRESULT midiOutReset(\n  HMIDIOUT hmo\n);",
        "comment": "The midiOutReset function turns off all notes on all MIDI channels for the specified MIDI output device."
    },
    "midiOutSetVolume": {
        "prototype": "MMRESULT midiOutSetVolume(\n  HMIDIOUT hmo,\n  DWORD    dwVolume\n);",
        "comment": "The midiOutSetVolume function sets the volume of a MIDI output device."
    },
    "midiOutShortMsg": {
        "prototype": "MMRESULT midiOutShortMsg(\n  HMIDIOUT hmo,\n  DWORD    dwMsg\n);",
        "comment": "The midiOutShortMsg function sends a short MIDI message to the specified MIDI output device."
    },
    "midiOutUnprepareHeader": {
        "prototype": "MMRESULT midiOutUnprepareHeader(\n  HMIDIOUT  hmo,\n  LPMIDIHDR pmh,\n  UINT      cbmh\n);",
        "comment": "The midiOutUnprepareHeader function cleans up the preparation performed by the midiOutPrepareHeader function."
    },
    "ModifyMenu": {
        "prototype": "BOOL ModifyMenuW(\n  HMENU    hMnu,\n  UINT     uPosition,\n  UINT     uFlags,\n  UINT_PTR uIDNewItem,\n  LPCWSTR  lpNewItem\n);",
        "comment": "Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item."
    },
    "MonitorFromPoint": {
        "prototype": "HMONITOR MonitorFromPoint(\n  POINT pt,\n  DWORD dwFlags\n);",
        "comment": "The MonitorFromPoint function retrieves a handle to the display monitor that contains a specified point."
    },
    "MonitorFromRect": {
        "prototype": "HMONITOR MonitorFromRect(\n  LPCRECT lprc,\n  DWORD   dwFlags\n);",
        "comment": "The MonitorFromRect function retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle."
    },
    "MonitorFromWindow": {
        "prototype": "HMONITOR MonitorFromWindow(\n  HWND  hwnd,\n  DWORD dwFlags\n);",
        "comment": "The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window."
    },
    "MoveFile": {
        "prototype": "BOOL MoveFileW(\n  LPCWSTR lpExistingFileName,\n  LPCWSTR lpNewFileName\n);",
        "comment": "Moves an existing file or a directory, including its children."
    },
    "MoveToEx": {
        "prototype": "BOOL MoveToEx(\n  HDC     hdc,\n  int     x,\n  int     y,\n  LPPOINT lppt\n);",
        "comment": "The MoveToEx function updates the current position to the specified point and optionally returns the previous position."
    },
    "MoveWindow": {
        "prototype": "BOOL MoveWindow(\n  HWND hWnd,\n  int  X,\n  int  Y,\n  int  nWidth,\n  int  nHeight,\n  BOOL bRepaint\n);",
        "comment": "Changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area."
    },
    "MsgWaitForMultipleObjects": {
        "prototype": "DWORD MsgWaitForMultipleObjects(\n  DWORD        nCount,\n  const HANDLE *pHandles,\n  BOOL         fWaitAll,\n  DWORD        dwMilliseconds,\n  DWORD        dwWakeMask\n);",
        "comment": "Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects, which you specify using the dwWakeMask parameter."
    },
    "MsgWaitForMultipleObjectsEx": {
        "prototype": "DWORD MsgWaitForMultipleObjectsEx(\n  DWORD        nCount,\n  const HANDLE *pHandles,\n  DWORD        dwMilliseconds,\n  DWORD        dwWakeMask,\n  DWORD        dwFlags\n);",
        "comment": "Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. The array of objects can include input event objects, which you specify using the dwWakeMask parameter."
    },
    "NetFreeAadJoinInformation": {
        "prototype": "VOID NET_API_FUNCTION NetFreeAadJoinInformation(\n  [in, optional] PDSREG_JOIN_INFO pJoinInfo\n);",
        "comment": "Frees the memory allocated for the specified DSREG_JOIN_INFO structure, which contains join information for a tenant and which you retrieved by calling the NetGetAadJoinInformation function.",
        "minimumWindowsVersion": "WIN10_TH1"
    },
    "NetGetAadJoinInformation": {
        "prototype": "HRESULT NET_API_FUNCTION NetGetAadJoinInformation(\n  [in, optional] LPCWSTR          pcszTenantId,\n  [out]          PDSREG_JOIN_INFO *ppJoinInfo\n);",
        "comment": "Retrieves the join information for the specified tenant. This function examines the join information for Microsoft Azure Active Directory and the work account that the current user added.",
        "minimumWindowsVersion": "WIN10_TH1"
    },
    "NotifyBootConfigStatus": {
        "prototype": "BOOL NotifyBootConfigStatus(\n  [in] BOOL BootAcceptable\n);",
        "comment": "Reports the boot status to the service control manager. It is used by boot verification programs. This function can be called only by a process running in the LocalSystem or Administrator's account."
    },
    "NotifyServiceStatusChange": {
        "prototype": "DWORD NotifyServiceStatusChangeW(\n  [in] SC_HANDLE        hService,\n  [in] DWORD            dwNotifyMask,\n  [in] PSERVICE_NOTIFYW pNotifyBuffer\n);",
        "comment": "Enables an application to receive notification when the specified service is created or deleted or when its status changes."
    },
    "NotifyWinEvent": {
        "prototype": "void NotifyWinEvent(\n  DWORD event,\n  HWND  hwnd,\n  LONG  idObject,\n  LONG  idChild\n);",
        "comment": "Signals the system that a predefined event occurred. If any client applications have registered a hook function for the event, the system calls the client's hook function."
    },
    "ntohl": {
        "prototype": "u_long ntohl(\n  u_long netlong\n);",
        "comment": "The ntohl function converts a u_long from TCP/IP network order to host byte order (which is little-endian on Intel processors).",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "ntohs": {
        "prototype": "u_short ntohs(\n  u_short netshort\n);",
        "comment": "The ntohs function converts a u_short from TCP/IP network byte order to host byte order (which is little-endian on Intel processors).",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "NtQuerySystemInformation": {
        "prototype": "NTSTATUS NtQuerySystemInformation(\n   [in]            SYSTEM_INFORMATION_CLASS SystemInformationClass,\n   [in, out]       PVOID                    SystemInformation,\n   [in]            ULONG                    SystemInformationLength,\n   [out, optional] PULONG                   ReturnLength\n);",
        "comment": "Retrieves the specified system information."
    },
    "OemKeyScan": {
        "prototype": "DWORD OemKeyScan(\n  WORD wOemChar\n);",
        "comment": "Maps OEMASCII codes 0 through 0x0FF into the OEM scan codes and shift states. The function provides information that allows a program to send OEM text to another program by simulating keyboard input."
    },
    "OffsetRect": {
        "prototype": "BOOL OffsetRect(\n  LPRECT lprc,\n  int    dx,\n  int    dy\n);",
        "comment": "The OffsetRect function moves the specified rectangle by the specified offsets."
    },
    "OleInitialize": {
        "prototype": "HRESULT OleInitialize(\n  LPVOID pvReserved\n);",
        "comment": "Initializes the COM library on the current apartment, and identifies the concurrency model as single-thread apartment (STA). Applications must initialize the COM library before they can call COM library functions other than CoGetMalloc and memory allocation functions."
    },
    "OleUninitialize": {
        "prototype": "void OleUninitialize();",
        "comment": "Closes the COM library on the apartment, releases any class factories, other COM objects, or servers held by the apartment, disables RPC on the apartment, and frees any resources the apartment maintains."
    },
    "OpenClipboard": {
        "prototype": "BOOL OpenClipboard(\n  HWND hWndNewOwner\n);",
        "comment": "Opens the clipboard for examination and prevents other applications from modifying the clipboard content."
    },
    "OpenCommPort": {
        "prototype": "HANDLE OpenCommPort(\n  ULONG uPortNumber,\n  DWORD dwDesiredAccess,\n  DWORD dwFlagsAndAttributes\n);",
        "comment": "Attempts to open a communication device.",
        "category": "kernel32",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "OpenDesktop": {
        "prototype": "HDESK OpenDesktopW(\n  LPCWSTR     lpszDesktop,\n  DWORD       dwFlags,\n  BOOL        fInherit,\n  ACCESS_MASK dwDesiredAccess\n);",
        "comment": "Opens the specified desktop object."
    },
    "OpenEvent": {
        "prototype": "HANDLE OpenEventW(\n  DWORD   dwDesiredAccess,\n  BOOL    bInheritHandle,\n  LPCWSTR lpName\n);",
        "comment": "Opens an existing named event object."
    },
    "OpenIcon": {
        "prototype": "BOOL OpenIcon(\n  HWND hWnd\n);",
        "comment": "Restores a minimized (iconic) window to its previous size and position; it then activates the window."
    },
    "OpenInputDesktop": {
        "prototype": "HDESK OpenInputDesktop(\n  DWORD       dwFlags,\n  BOOL        fInherit,\n  ACCESS_MASK dwDesiredAccess\n);",
        "comment": "Opens the desktop that receives user input."
    },
    "OpenJobObject": {
        "prototype": "HANDLE OpenJobObjectW(\n  [in] DWORD   dwDesiredAccess,\n  [in] BOOL    bInheritHandle,\n  [in] LPCWSTR lpName\n);",
        "comment": "Opens an existing job object."
    },
    "OpenPrinter": {
        "prototype": "BOOL OpenPrinterW(\n  _In_  LPTSTR             pPrinterName,\n  _Out_ LPHANDLE           phPrinter,\n  _In_  LPPRINTER_DEFAULTS pDefault\n);",
        "comment": "The OpenPrinter function retrieves a handle to the specified printer or print server or other types of handles in the print subsystem."
    },
    "OpenPrinter2": {
        "prototype": "BOOL OpenPrinter2W(\n  _In_  LPCTSTR            pPrinterName,\n  _Out_ LPHANDLE           phPrinter,\n  _In_  LPPRINTER_DEFAULTS pDefault,\n  _In_  PPRINTER_OPTIONS   pOptions\n);",
        "comment": "Retrieves a handle to the specified printer, print server, or other types of handles in the print subsystem, while setting some of the printer options.",
        "category": "winspool"
    },
    "OpenProcess": {
        "prototype": "HANDLE OpenProcess(\n  DWORD dwDesiredAccess,\n  BOOL  bInheritHandle,\n  DWORD dwProcessId\n);",
        "comment": "Opens an existing local process object."
    },
    "OpenProcessToken": {
        "prototype": "BOOL OpenProcessToken(\n  HANDLE  ProcessHandle,\n  DWORD   DesiredAccess,\n  PHANDLE TokenHandle\n);",
        "comment": "The OpenProcessToken function opens the access token associated with a process."
    },
    "OpenSCManager": {
        "prototype": "SC_HANDLE OpenSCManagerW(\n  [in, optional] LPCWSTR lpMachineName,\n  [in, optional] LPCWSTR lpDatabaseName,\n  [in]           DWORD   dwDesiredAccess\n);",
        "comment": "Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database."
    },
    "OpenService": {
        "prototype": "SC_HANDLE OpenServiceW(\n  [in] SC_HANDLE hSCManager,\n  [in] LPCWSTR   lpServiceName,\n  [in] DWORD     dwDesiredAccess\n);",
        "comment": "Opens an existing service."
    },
    "OpenThemeData": {
        "prototype": "HTHEME OpenThemeData(\n  HWND    hwnd,\n  LPCWSTR pszClassList\n);",
        "comment": "Opens the theme data for a window and its associated class."
    },
    "OpenThemeDataEx": {
        "prototype": "HTHEME OpenThemeDataEx(\n  HWND    hwnd,\n  LPCWSTR pszClassList,\n  DWORD   dwFlags\n);",
        "comment": "Opens the theme data associated with a window for specified theme classes."
    },
    "OpenThemeDataForDpi": {
        "prototype": "HTHEME OpenThemeDataForDpi(\n  HWND    hwnd,\n  LPCWSTR pszClassList,\n  UINT    dpi\n);",
        "comment": "A variant of OpenThemeData that opens a theme handle associated with a specific DPI.",
        "minimumWindowsVersion": "WIN10_RS2"
    },
    "OpenThreadToken": {
        "prototype": "BOOL OpenThreadToken(\n  HANDLE  ThreadHandle,\n  DWORD   DesiredAccess,\n  BOOL    OpenAsSelf,\n  PHANDLE TokenHandle\n);",
        "comment": "The OpenThreadToken function opens the access token associated with a thread."
    },
    "OpenWindowStation": {
        "prototype": "HWINSTA OpenWindowStationW(\n  LPCWSTR     lpszWinSta,\n  BOOL        fInherit,\n  ACCESS_MASK dwDesiredAccess\n);",
        "comment": "Opens the specified window station."
    },
    "OutputDebugString": {
        "prototype": "void OutputDebugStringW(\n  LPCWSTR lpOutputString\n);",
        "comment": "Sends a string to the debugger for display."
    },
    "PackageFamilyNameFromFullName": {
        "prototype": "LONG PackageFamilyNameFromFullName(\n  PCWSTR packageFullName,\n  UINT32 *packageFamilyNameLength,\n  PWSTR  packageFamilyName\n);",
        "comment": "Gets the package family name for the specified package full name.",
        "minimumWindowsVersion": "WIN8"
    },
    "PaintDesktop": {
        "prototype": "BOOL PaintDesktop(\n  HDC hdc\n);",
        "comment": "The PaintDesktop function fills the clipping region in the specified device context with the desktop pattern or wallpaper. The function is provided primarily for shell desktops."
    },
    "PeekConsoleInput": {
        "prototype": "BOOL PeekConsoleInputW(\n  HANDLE        hConsoleInput,\n  PINPUT_RECORD lpBuffer,\n  DWORD         nLength,\n  LPDWORD       lpNumberOfEventsRead\n);",
        "comment": "Reads data from the specified console input buffer without removing it from the buffer."
    },
    "PeekMessage": {
        "prototype": "BOOL PeekMessageW(\n  LPMSG lpMsg,\n  HWND  hWnd,\n  UINT  wMsgFilterMin,\n  UINT  wMsgFilterMax,\n  UINT  wRemoveMsg\n);",
        "comment": "Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the message (if any exist)."
    },
    "PeekNamedPipe": {
        "prototype": "BOOL PeekNamedPipe(\n  HANDLE  hNamedPipe,\n  LPVOID  lpBuffer,\n  DWORD   nBufferSize,\n  LPDWORD lpBytesRead,\n  LPDWORD lpTotalBytesAvail,\n  LPDWORD lpBytesLeftThisMessage);",
        "comment": "Copies data from a named or anonymous pipe into a buffer without removing it from the pipe. It also returns information about data in the pipe."
    },
    "PhysicalToLogicalPoint": {
        "prototype": "BOOL PhysicalToLogicalPoint(\n  HWND    hWnd,\n  LPPOINT lpPoint\n);",
        "comment": "Converts the physical coordinates of a point in a window to logical coordinates."
    },
    "PhysicalToLogicalPointForPerMonitorDPI": {
        "prototype": "BOOL PhysicalToLogicalPointForPerMonitorDPI(\n  HWND    hWnd,\n  LPPOINT lpPoint\n);",
        "comment": "Converts a point in a window from physical coordinates into logical coordinates, regardless of the dots per inch (dpi) awareness of the caller.",
        "minimumWindowsVersion": "WIN81"
    },
    "Pie": {
        "prototype": "BOOL Pie(\n  HDC hdc,\n  int left,\n  int top,\n  int right,\n  int bottom,\n  int xr1,\n  int yr1,\n  int xr2,\n  int yr2\n);",
        "comment": "The Pie function draws a pie-shaped wedge bounded by the intersection of an ellipse and two radials. The pie is outlined by using the current pen and filled by using the current brush."
    },
    "PlaySound": {
        "prototype": "BOOL PlaySoundW(\n  LPCTSTR pszSound,\n  HMODULE hmod,\n  DWORD fdwSound);",
        "comment": "The PlaySound function plays a sound specified by the given file name, resource, or system event."
    },
    "PolyBezier": {
        "prototype": "BOOL PolyBezier(\n  HDC         hdc,\n  const POINT *apt,\n  DWORD       cpt\n);",
        "comment": "The PolyBezier function draws one or more Bézier curves."
    },
    "PolyBezierTo": {
        "prototype": "BOOL PolyBezierTo(\n  HDC         hdc,\n  const POINT *apt,\n  DWORD       cpt\n);",
        "comment": "The PolyBezierTo function draws one or more Bézier curves."
    },
    "PolyDraw": {
        "prototype": "BOOL PolyDraw(\n  HDC         hdc,\n  const POINT *apt,\n  const BYTE  *aj,\n  int         cpt\n);",
        "comment": "The PolyDraw function draws a set of line segments and Bézier curves."
    },
    "Polygon": {
        "prototype": "BOOL Polygon(\n  HDC         hdc,\n  const POINT *apt,\n  int         cpt\n);",
        "comment": "The Polygon function draws a polygon consisting of two or more vertices connected by straight lines. The polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode."
    },
    "Polyline": {
        "prototype": "BOOL Polyline(\n  HDC         hdc,\n  const POINT *apt,\n  int         cpt\n);",
        "comment": "The Polyline function draws a series of line segments by connecting the points in the specified array."
    },
    "PolylineTo": {
        "prototype": "BOOL PolylineTo(\n  HDC         hdc,\n  const POINT *apt,\n  DWORD         cpt\n);",
        "comment": "The PolylineTo function draws one or more straight lines."
    },
    "PolyPolygon": {
        "prototype": "BOOL PolyPolygon(\n  HDC         hdc,\n  const POINT *apt,\n  const INT   *asz,\n  int         csz\n);",
        "comment": "The PolyPolygon function draws a series of closed polygons. Each polygon is outlined by using the current pen and filled by using the current brush and polygon fill mode. The polygons drawn by this function can overlap."
    },
    "PolyPolyline": {
        "prototype": "BOOL PolyPolyline(\n  HDC         hdc,\n  const POINT *apt,\n  const DWORD *asz,\n  DWORD       csz\n);",
        "comment": "The PolyPolyline function draws multiple series of connected line segments."
    },
    "PostMessage": {
        "prototype": "BOOL PostMessageW(\n  HWND   hWnd,\n  UINT   Msg,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message."
    },
    "PostQueuedCompletionStatus": {
        "prototype": "BOOL PostQueuedCompletionStatus(\n  HANDLE       CompletionPort,\n  DWORD        dwNumberOfBytesTransferred,\n  ULONG_PTR    dwCompletionKey,\n  LPOVERLAPPED lpOverlapped\n);",
        "comment": "Posts an I/O completion packet to an I/O completion port."
    },
    "PostQuitMessage": {
        "prototype": "void PostQuitMessage(\n  int nExitCode\n);",
        "comment": "Indicates to the system that a thread has made a request to terminate (quit). It is typically used in response to a WM_DESTROY message."
    },
    "PostThreadMessage": {
        "prototype": "BOOL PostThreadMessageW(\n  DWORD  idThread,\n  UINT   Msg,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message."
    },
    "PrinterProperties": {
        "prototype": "BOOL PrinterProperties(\n  _In_ HWND   hWnd,\n  _In_ HANDLE hPrinter\n);",
        "comment": "The PrinterProperties function displays a printer-properties property sheet for the specified printer."
    },
    "PrintWindow": {
        "prototype": "BOOL PrintWindow(\n  HWND hwnd,\n  HDC  hdcBlt,\n  UINT nFlags\n);",
        "comment": "The PrintWindow function copies a visual window into the specified device context (DC), typically a printer DC."
    },
    "PrivateExtractIcons": {
        "prototype": "UINT PrivateExtractIconsW(\n  [in]            LPCWSTR szFileName,\n  [in]            int     nIconIndex,\n  [in]            int     cxIcon,\n  [in]            int     cyIcon,\n  [out, optional] HICON   *phicon,\n  [out, optional] UINT    *piconid,\n  [in]            UINT    nIcons,\n  [in]            UINT    flags\n);",
        "comment": "Creates an array of handles to icons that are extracted from a specified file."
    },
    "ProgIDFromCLSID": {
        "prototype": "HRESULT ProgIDFromCLSID(\n  REFCLSID clsid,\n  LPOLESTR *lplpszProgID\n);",
        "comment": "Retrieves the ProgID for a given CLSID."
    },
    "PropVariantClear": {
        "prototype": "HRESULT PropVariantClear(\n   [in, out] PROPVARIANT *pvar\n);",
        "comment": "Clears a PROPVARIANT structure."
    },
    "PropVariantToStringWithDefault": {
        "prototype": "PWSTR PropVariantToStringWithDefault(\n   [in] REFPROPVARIANT propvarIn,\n   [in] LPCWSTR        pszDefault\n);",
        "comment": "Extracts the string property value of a PROPVARIANT structure. If no value exists, then the specified default value is returned."
    },
    "PropVariantToStrRet": {
        "prototype": "HRESULT PropVariantToStrRet(\n   [in]  REFPROPVARIANT propvar,\n   [out] STRRET         *pstrret\n);",
        "comment": "Extracts a string from a PROPVARIANT structure and places it into a STRRET structure."
    },
    "PtInRect": {
        "prototype": "BOOL PtInRect(\n  const RECT *lprc,\n  POINT      pt\n);",
        "comment": "The PtInRect function determines whether the specified point lies within the specified rectangle. A point is within a rectangle if it lies on the left or top side or is within all four sides. A point on the right or bottom side is considered outside the rectangle."
    },
    "PtInRegion": {
        "prototype": "BOOL PtInRegion(\n  HRGN hrgn,\n  int  x,\n  int  y\n);",
        "comment": "The PtInRegion function determines whether the specified point is inside the specified region."
    },
    "PurgeComm": {
        "prototype": "BOOL PurgeComm(\n  HANDLE hFile,\n  DWORD  dwFlags\n);",
        "comment": "Discards all characters from the output or input buffer of a specified communications resource. It can also terminate pending read or write operations on the resource."
    },
    "QueryDosDevice": {
        "prototype": "DWORD QueryDosDeviceW(\n  LPCWSTR lpDeviceName,\n  LPWSTR  lpTargetPath,\n  DWORD   ucchMax\n);",
        "comment": "Retrieves information about MS-DOS device names. The function can obtain the current mapping for a particular MS-DOS device name. The function can also obtain a list of all existing MS-DOS device names."
    },
    "QueryFullProcessImageName": {
        "prototype": "BOOL QueryFullProcessImageNameW(\n  HANDLE hProcess,\n  DWORD  dwFlags,\n  LPWSTR lpExeName,\n  PDWORD lpdwSize\n);",
        "comment": "Retrieves the full name of the executable image for the specified process."
    },
    "QueryInformationJobObject": {
        "prototype": "BOOL QueryInformationJobObject(\n  [in, optional]  HANDLE             hJob,\n  [in]            JOBOBJECTINFOCLASS JobObjectInformationClass,\n  [out]           LPVOID             lpJobObjectInformation,\n  [in]            DWORD              cbJobObjectInformationLength,\n  [out, optional] LPDWORD            lpReturnLength\n);",
        "comment": "Retrieves limit and job state information from the job object."
    },
    "QueryIoRateControlInformationJobObject": {
        "prototype": "DWORD QueryIoRateControlInformationJobObject(\n  [in, optional] HANDLE                                hJob,\n  [in, optional] PCWSTR                                VolumeName,\n  [out]          JOBOBJECT_IO_RATE_CONTROL_INFORMATION **InfoBlocks,\n  [out]          ULONG                                 *InfoBlockCount\n);",
        "comment": "Gets information about the control of the I/O rate for a job object."
    },
    "QueryPerformanceCounter": {
        "prototype": "BOOL QueryPerformanceCounter(\n  LARGE_INTEGER *lpPerformanceCount\n);",
        "comment": "Retrieves the current value of the performance counter, which is a high resolution (<1us) time stamp that can be used for time-interval measurements."
    },
    "QueryPerformanceFrequency": {
        "prototype": "BOOL QueryPerformanceFrequency(\n  LARGE_INTEGER *lpFrequency\n);",
        "comment": "Retrieves the frequency of the performance counter. The frequency of the performance counter is fixed at system boot and is consistent across all processors. Therefore, the frequency need only be queried upon application initialization, and the result can be cached."
    },
    "QueryServiceConfig": {
        "prototype": "BOOL QueryServiceConfigW(\n  [in]            SC_HANDLE               hService,\n  [out, optional] LPQUERY_SERVICE_CONFIGW lpServiceConfig,\n  [in]            DWORD                   cbBufSize,\n  [out]           LPDWORD                 pcbBytesNeeded\n);",
        "comment": "Retrieves the configuration parameters of the specified service. Optional configuration parameters are available using the QueryServiceConfig2 function."
    },
    "QueryServiceConfig2": {
        "prototype": "BOOL QueryServiceConfig2W(\n  [in]            SC_HANDLE hService,\n  [in]            DWORD     dwInfoLevel,\n  [out, optional] LPBYTE    lpBuffer,\n  [in]            DWORD     cbBufSize,\n  [out]           LPDWORD   pcbBytesNeeded\n);",
        "comment": "Retrieves the optional configuration parameters of the specified service."
    },
    "QueryServiceDynamicInformation": {
        "prototype": "BOOL QueryServiceDynamicInformation(\n  [in] SERVICE_STATUS_HANDLE hServiceStatus,\n  [in] DWORD                 dwInfoLevel,\n       PVOID                 *ppDynamicInfo\n);",
        "comment": "Retrieves dynamic information related to the current service start."
    },
    "QueryServiceObjectSecurity": {
        "prototype": "BOOL QueryServiceObjectSecurity(\n  [in]            SC_HANDLE            hService,\n  [in]            SECURITY_INFORMATION dwSecurityInformation,\n  [out, optional] PSECURITY_DESCRIPTOR lpSecurityDescriptor,\n  [in]            DWORD                cbBufSize,\n  [out]           LPDWORD              pcbBytesNeeded\n);",
        "comment": "The QueryServiceObjectSecurity function retrieves a copy of the security descriptor associated with a service object. You can also use the GetNamedSecurityInfo function to retrieve a security descriptor."
    },
    "QueryServiceStatus": {
        "prototype": "BOOL QueryServiceStatus(\n  [in]  SC_HANDLE        hService,\n  [out] LPSERVICE_STATUS lpServiceStatus\n);",
        "comment": "Retrieves the current status of the specified service."
    },
    "QueryServiceStatusEx": {
        "prototype": "BOOL QueryServiceStatusEx(\n  [in]            SC_HANDLE      hService,\n  [in]            SC_STATUS_TYPE InfoLevel,\n  [out, optional] LPBYTE         lpBuffer,\n  [in]            DWORD          cbBufSize,\n  [out]           LPDWORD        pcbBytesNeeded\n);",
        "comment": "Retrieves the current status of the specified service based on the specified information level."
    },
    "ReadConsole": {
        "prototype": "BOOL ReadConsoleW(\n  _In_     HANDLE  hConsoleInput,\n  _Out_    LPVOID  lpBuffer,\n  _In_     DWORD   nNumberOfCharsToRead,\n  _Out_    LPDWORD lpNumberOfCharsRead,\n  _In_opt_ LPVOID  pInputControl\n);",
        "comment": "Reads character input from the console input buffer and removes it from the buffer."
    },
    "ReadConsoleInput": {
        "prototype": "BOOL ReadConsoleInputW(\n  HANDLE        hConsoleInput,\n  PINPUT_RECORD lpBuffer,\n  DWORD         nLength,\n  LPDWORD       lpNumberOfEventsRead\n);",
        "comment": "Reads data from a console input buffer and removes it from the buffer."
    },
    "ReadFile": {
        "prototype": "BOOL ReadFile(\n  HANDLE       hFile,\n  LPVOID       lpBuffer,\n  DWORD        nNumberOfBytesToRead,\n  LPDWORD      lpNumberOfBytesRead,\n  LPOVERLAPPED lpOverlapped\n);",
        "comment": "Reads data from the specified file or input/output (I/O) device. Reads occur at the position specified by the file pointer if supported by the device."
    },
    "ReadFileEx": {
        "prototype": "BOOL ReadFileEx(\n  [in]            HANDLE                          hFile,\n  [out, optional] LPVOID                          lpBuffer,\n  [in]            DWORD                           nNumberOfBytesToRead,\n  [in, out]       LPOVERLAPPED                    lpOverlapped,\n  [in]            LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine\n);",
        "comment": "Reads data from the specified file or input/output (I/O) device. It reports its completion status asynchronously, calling the specified completion routine when reading is completed or canceled and the calling thread is in an alertable wait state."
    },
    "ReadFileScatter": {
        "prototype": "BOOL ReadFileScatter(\n  [in]      HANDLE                  hFile,\n  [in]      FILE_SEGMENT_ELEMENT [] aSegmentArray,\n  [in]      DWORD                   nNumberOfBytesToRead,\n            LPDWORD                 lpReserved,\n  [in, out] LPOVERLAPPED            lpOverlapped\n);",
        "comment": "Reads data from a file and stores it in an array of buffers. The function starts reading data from the file at a position that is specified by an OVERLAPPED structure. The ReadFileScatter function operates asynchronously."
    },
    "ReadPrinter": {
        "prototype": "BOOL ReadPrinter(\n  _In_  HANDLE  hPrinter,\n  _Out_ LPVOID  pBuf,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pNoBytesRead\n);",
        "comment": "The ReadPrinter function retrieves data from the specified printer.",
        "category": "winspool"
    },
    "ReadProcessMemory": {
        "prototype": "BOOL ReadProcessMemory(\n  HANDLE  hProcess,\n  LPCVOID lpBaseAddress,\n  LPVOID  lpBuffer,\n  SIZE_T  nSize,\n  SIZE_T  *lpNumberOfBytesRead\n);",
        "comment": "ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function."
    },
    "Rectangle": {
        "prototype": "BOOL Rectangle(\n  HDC hdc,\n  int left,\n  int top,\n  int right,\n  int bottom\n);",
        "comment": "The Rectangle function draws a rectangle. The rectangle is outlined by using the current pen and filled by using the current brush."
    },
    "RectInRegion": {
        "prototype": "BOOL RectInRegion(\n  HRGN       hrgn,\n  const RECT *lprect\n);",
        "comment": "The RectInRegion function determines whether any part of the specified rectangle is within the boundaries of a region."
    },
    "recv": {
        "prototype": "int recv(\n  SOCKET s,\n  char   *buf,\n  int    len,\n  int    flags\n);",
        "comment": "The recv function receives data from a connected socket or a bound connectionless socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "recvfrom": {
        "prototype": "int recvfrom(\n  SOCKET   s,\n  char     *buf,\n  int      len,\n  int      flags,\n  sockaddr *from,\n  int      *fromlen\n);",
        "comment": "The recvfrom function receives a datagram, and stores the source address.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "RedrawWindow": {
        "prototype": "BOOL RedrawWindow(\n  HWND       hWnd,\n  const RECT *lprcUpdate,\n  HRGN       hrgnUpdate,\n  UINT       flags\n);",
        "comment": "The RedrawWindow function updates the specified rectangle or region in a window's client area."
    },
    "RegCloseKey": {
        "prototype": "LSTATUS RegCloseKey(\n  HKEY hKey\n);",
        "comment": "Closes a handle to the specified registry key."
    },
    "RegConnectRegistry": {
        "prototype": "LSTATUS RegConnectRegistryW(\n  LPCWSTR lpMachineName,\n  HKEY    hKey,\n  PHKEY   phkResult\n);",
        "comment": "Establishes a connection to a predefined registry key on another computer."
    },
    "RegCopyTree": {
        "prototype": "LSTATUS RegCopyTreeW(\n  HKEY    hKeySrc,\n  LPCWSTR lpSubKey,\n  HKEY    hKeyDest\n);",
        "comment": "Copies the specified registry key, along with its values and subkeys, to the specified destination key."
    },
    "RegCreateKey": {
        "prototype": "LSTATUS RegCreateKeyW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  PHKEY   phkResult);",
        "comment": "Creates the specified registry key. If the key already exists in the registry, the function opens it."
    },
    "RegCreateKeyEx": {
        "prototype": "LSTATUS RegCreateKeyExW(\n  HKEY hKey,\n  LPCWSTR lpSubKey,\n  DWORD Reserved,\n  LPWSTR lpClass,\n  DWORD dwOptions,\n  REGSAM samDesired,\n  const LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n  PHKEY phkResult,\n  LPDWORD lpdwDisposition\n);",
        "comment": "Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive."
    },
    "RegCreateKeyTransacted": {
        "prototype": "LSTATUS RegCreateKeyTransactedW(\n  HKEY     hKey,\n  LPCWSTR  lpSubKey,\n  DWORD    Reserved,\n  LPWSTR   lpClass,\n  DWORD    dwOptions,\n  REGSAM   samDesired,\n  const LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n  PHKEY    phkResult,\n  LPDWORD  lpdwDisposition,\n  HANDLE   hTransaction,\n  PVOID    pExtendedParemeter);",
        "comment": "Establishes a connection to a predefined registry key on another computer."
    },
    "RegDeleteKey": {
        "prototype": "LSTATUS RegDeleteKeyW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey);",
        "comment": "Deletes a subkey and its values. Note that key names are not case sensitive."
    },
    "RegDeleteKeyEx": {
        "prototype": "LSTATUS RegDeleteKeyExW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  REGSAM  samDesired,\n  DWORD   Reserved);",
        "comment": "Deletes a subkey and its values from the specified platform-specific view of the registry. Note that key names are not case sensitive."
    },
    "RegDeleteKeyTransacted": {
        "prototype": "LSTATUS RegDeleteKeyTransactedW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  REGSAM  samDesired,\n  DWORD   Reserved,\n  HANDLE  hTransaction,\n  PVOID   pExtendedParameter);",
        "comment": "Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation. Note that key names are not case sensitive."
    },
    "RegDeleteKeyValue": {
        "prototype": "LSTATUS RegDeleteKeyValueW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  LPCWSTR lpValueName);",
        "comment": "Removes the specified value from the specified registry key and subkey."
    },
    "RegDeleteTree": {
        "prototype": "LSTATUS RegDeleteTreeW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey);",
        "comment": "Deletes the subkeys and values of the specified key recursively."
    },
    "RegDeleteValue": {
        "prototype": "LSTATUS RegDeleteValueW(\n  HKEY    hKey,\n  LPCWSTR lpValueName);",
        "comment": "Removes a named value from the specified registry key. Note that value names are not case sensitive."
    },
    "RegDisablePredefinedCache": {
        "prototype": "LSTATUS RegDisablePredefinedCache();",
        "comment": "Disables handle caching of the predefined registry handle for HKEY_CURRENT_USER for the current process. This function does not work on a remote computer."
    },
    "RegDisablePredefinedCacheEx": {
        "prototype": "LSTATUS RegDisablePredefinedCacheEx();",
        "comment": "Disables handle caching for all predefined registry handles for the current process."
    },
    "RegDisableReflectionKey": {
        "prototype": "LONG RegDisableReflectionKey(\n  HKEY hBase);",
        "comment": "Disables registry reflection for the specified key. Disabling reflection for a key does not affect reflection of any subkeys."
    },
    "RegEnableReflectionKey": {
        "prototype": "LONG RegEnableReflectionKey(\n  HKEY hBase);",
        "comment": "Restores registry reflection for the specified disabled key. Restoring reflection for a key does not affect reflection of any subkeys."
    },
    "RegEnumKey": {
        "prototype": "LSTATUS RegEnumKeyW(\n  HKEY   hKey,\n  DWORD  dwIndex,\n  LPWSTR lpName,\n  DWORD  cchName);",
        "comment": "Enumerates the subkeys of the specified open registry key. The function retrieves the name of one subkey each time it is called."
    },
    "RegEnumKeyEx": {
        "prototype": "LSTATUS RegEnumKeyExW(\n  HKEY      hKey,\n  DWORD     dwIndex,\n  LPWSTR    lpName,\n  LPDWORD   lpcchName,\n  LPDWORD   lpReserved,\n  LPWSTR    lpClass,\n  LPDWORD   lpcchClass,\n  PFILETIME lpftLastWriteTime);",
        "comment": "Enumerates the subkeys of the specified open registry key. The function retrieves information about one subkey each time it is called."
    },
    "RegEnumValue": {
        "prototype": "LSTATUS RegEnumValueW(\n  HKEY    hKey,\n  DWORD   dwIndex,\n  LPWSTR  lpValueName,\n  LPDWORD lpcchValueName,\n  LPDWORD lpReserved,\n  LPDWORD lpType,\n  LPBYTE  lpData,\n  LPDWORD lpcbData);",
        "comment": "Enumerates the values for the specified open registry key. The function copies one indexed value name and data block for the key each time it is called."
    },
    "RegFlushKey": {
        "prototype": "LSTATUS RegFlushKey(\n  HKEY hKey);",
        "comment": "Writes all the attributes of the specified open registry key into the registry."
    },
    "RegGetValue": {
        "prototype": "LSTATUS RegGetValueW(\n  HKEY    hkey,\n  LPCWSTR lpSubKey,\n  LPCWSTR lpValue,\n  DWORD   dwFlags,\n  LPDWORD pdwType,\n  PVOID   pvData,\n  LPDWORD pcbData);",
        "comment": "Retrieves the type and data for the specified registry value."
    },
    "RegisterClass": {
        "prototype": "ATOM RegisterClassW(\n  const WNDCLASSW *lpWndClass\n);",
        "comment": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function."
    },
    "RegisterClassEx": {
        "prototype": "ATOM RegisterClassExW(\n  const WNDCLASSEXW *unnamedParam1);",
        "comment": "Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function."
    },
    "RegisterClipboardFormat": {
        "prototype": "UINT RegisterClipboardFormatW(\n  LPCWSTR lpszFormat\n);",
        "comment": "Registers a new clipboard format. This format can then be used as a valid clipboard format."
    },
    "RegisterDeviceNotification": {
        "prototype": "HDEVNOTIFY RegisterDeviceNotificationW(\n  [in] HANDLE hRecipient,\n  [in] LPVOID NotificationFilter,\n  [in] DWORD  Flags\n);",
        "comment": "Registers the device or type of device for which a window will receive notifications.",
        "category": "user32"
    },
    "RegisterHotKey": {
        "prototype": "BOOL RegisterHotKey(\n  HWND hWnd,\n  int  id,\n  UINT fsModifiers,\n  UINT vk\n);",
        "comment": "Defines a system-wide hot key."
    },
    "RegisterPowerSettingNotification": {
        "prototype": "HPOWERNOTIFY RegisterPowerSettingNotification(\n  HANDLE  hRecipient,\n  LPCGUID PowerSettingGuid,\n  DWORD   Flags\n);",
        "comment": "Registers the application to receive power setting notifications for the specific power setting event."
    },
    "RegisterRawInputDevices": {
        "prototype": "BOOL RegisterRawInputDevices(\n  PCRAWINPUTDEVICE pRawInputDevices,\n  UINT             uiNumDevices,\n  UINT             cbSize\n);",
        "comment": "Registers the devices that supply the raw input data."
    },
    "RegisterServiceCtrlHandler": {
        "prototype": "SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(\n  [in] LPCWSTR            lpServiceName,\n  [in] LPHANDLER_FUNCTION lpHandlerProc\n);",
        "comment": "Registers a function to handle service control requests."
    },
    "RegisterServiceCtrlHandlerEx": {
        "prototype": "SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(\n  [in]           LPCWSTR               lpServiceName,\n  [in]           LPHANDLER_FUNCTION_EX lpHandlerProc,\n  [in, optional] LPVOID                lpContext\n);",
        "comment": "Registers a function to handle extended service control requests."
    },
    "RegisterTouchHitTestingWindow": {
        "prototype": "BOOL RegisterTouchHitTestingWindow(\n  HWND  hwnd,\n  ULONG value\n);",
        "comment": "Registers a window to process the WM_TOUCHHITTESTING notification.",
        "minimumWindowsVersion": "WIN8"
    },
    "RegisterTouchWindow": {
        "prototype": "BOOL RegisterTouchWindow(\n  HWND  hwnd,\n  ULONG ulFlags\n);",
        "comment": "Registers a window as being touch-capable."
    },
    "RegisterWindowMessage": {
        "prototype": "UINT RegisterWindowMessageW(\n  LPCWSTR lpString\n);",
        "comment": "Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages."
    },
    "RegLoadAppKey": {
        "prototype": "LSTATUS RegLoadAppKeyW(\n  LPCWSTR lpFile,\n  PHKEY   phkResult,\n  REGSAM  samDesired,\n  DWORD   dwOptions,\n  DWORD   Reserved);",
        "comment": "Loads the specified registry hive as an application hive."
    },
    "RegLoadKey": {
        "prototype": "LSTATUS RegLoadKeyW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  LPCWSTR lpFile);",
        "comment": "Creates a subkey under HKEY_USERS or HKEY_LOCAL_MACHINE and loads the data from the specified registry hive into that subkey."
    },
    "RegLoadMUIString": {
        "prototype": "LSTATUS RegLoadMUIStringW(\n  HKEY    hKey,\n  LPCWSTR pszValue,\n  LPWSTR  pszOutBuf,\n  DWORD   cbOutBuf,\n  LPDWORD pcbData,\n  DWORD   Flags,\n  LPCWSTR pszDirectory);",
        "comment": "Loads the specified string from the specified key and subkey."
    },
    "RegNotifyChangeKeyValue": {
        "prototype": "LSTATUS RegNotifyChangeKeyValue(\n  HKEY   hKey,\n  BOOL   bWatchSubtree,\n  DWORD  dwNotifyFilter,\n  HANDLE hEvent,\n  BOOL   fAsynchronous);",
        "comment": "Notifies the caller about changes to the attributes or contents of a specified registry key."
    },
    "RegOpenCurrentUser": {
        "prototype": "LSTATUS RegOpenCurrentUser(\n  REGSAM samDesired,\n  PHKEY  phkResult);",
        "comment": "Retrieves a handle to the HKEY_CURRENT_USER key for the user the current thread is impersonating."
    },
    "RegOpenKey": {
        "prototype": "LSTATUS RegOpenKeyW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  PHKEY   phkResult);",
        "comment": "Opens the specified registry key."
    },
    "RegOpenKeyEx": {
        "prototype": "LSTATUS RegOpenKeyExW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  DWORD   ulOptions,\n  REGSAM  samDesired,\n  PHKEY   phkResult\n);",
        "comment": "Opens the specified registry key. Note that key names are not case sensitive."
    },
    "RegOpenKeyTransacted": {
        "prototype": "LSTATUS RegOpenKeyTransactedW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  DWORD   ulOptions,\n  REGSAM  samDesired,\n  PHKEY   phkResult,\n  HANDLE  hTransaction,\n  PVOID   pExtendedParemeter);",
        "comment": "Opens the specified registry key and associates it with a transaction. Note that key names are not case sensitive."
    },
    "RegOpenUserClassesRoot": {
        "prototype": "LSTATUS RegOpenUserClassesRoot(\n  HANDLE hToken,\n  DWORD  dwOptions,\n  REGSAM samDesired,\n  PHKEY  phkResult);",
        "comment": "Retrieves a handle to the HKEY_CLASSES_ROOT key for a specified user. The user is identified by an access token."
    },
    "RegOverridePredefKey": {
        "prototype": "LSTATUS RegOverridePredefKey(\n  HKEY hKey,\n  HKEY hNewHKey);",
        "comment": "Maps a predefined registry key to the specified registry key."
    },
    "RegQueryInfoKey": {
        "prototype": "LSTATUS RegQueryInfoKeyW(\n  HKEY      hKey,\n  LPWSTR    lpClass,\n  LPDWORD   lpcchClass,\n  LPDWORD   lpReserved,\n  LPDWORD   lpcSubKeys,\n  LPDWORD   lpcbMaxSubKeyLen,\n  LPDWORD   lpcbMaxClassLen,\n  LPDWORD   lpcValues,\n  LPDWORD   lpcbMaxValueNameLen,\n  LPDWORD   lpcbMaxValueLen,\n  LPDWORD   lpcbSecurityDescriptor,\n  PFILETIME lpftLastWriteTime);",
        "comment": "Retrieves information about the specified registry key."
    },
    "RegQueryMultipleValues": {
        "prototype": "LSTATUS RegQueryMultipleValuesW(\n  HKEY     hKey,\n  PVALENTW val_list,\n  DWORD    num_vals,\n  LPWSTR   lpValueBuf,\n  LPDWORD  ldwTotsize);",
        "comment": "Retrieves the type and data for a list of value names associated with an open registry key."
    },
    "RegQueryReflectionKey": {
        "prototype": "LONG RegQueryReflectionKey(\n  HKEY hBase,\n  BOOL *bIsReflectionDisabled);",
        "comment": "Determines whether reflection has been disabled or enabled for the specified key."
    },
    "RegQueryValue": {
        "prototype": "LSTATUS RegQueryValueW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  LPWSTR  lpData,\n  PLONG   lpcbData);",
        "comment": "Retrieves the data associated with the default or unnamed value of a specified registry key. The data must be a null-terminated string."
    },
    "RegQueryValueEx": {
        "prototype": "LSTATUS RegQueryValueExW(\n  HKEY    hKey,\n  LPCWSTR lpValueName,\n  LPDWORD lpReserved,\n  LPDWORD lpType,\n  LPBYTE  lpData,\n  LPDWORD lpcbData\n);",
        "comment": "Retrieves the type and data for the specified value name associated with an open registry key. To ensure that any string values (REG_SZ, REG_MULTI_SZ, and REG_EXPAND_SZ) returned are null-terminated, use the RegGetValue function."
    },
    "RegRenameKey": {
        "prototype": "LSTATUS RegRenameKey(\n  HKEY    hKey,\n  LPCWSTR lpSubKeyName,\n  LPCWSTR lpNewKeyName\n);",
        "comment": "Changes the name of the specified registry key."
    },
    "RegReplaceKey": {
        "prototype": "LSTATUS RegReplaceKeyW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  LPCWSTR lpNewFile,\n  LPCWSTR lpOldFile);",
        "comment": "Replaces the file backing a registry key and all its subkeys with another file, so that when the system is next started, the key and subkeys will have the values stored in the new file."
    },
    "RegRestoreKey": {
        "prototype": "LSTATUS RegRestoreKeyW(\n  HKEY    hKey,\n  LPCWSTR lpFile,\n  DWORD   dwFlags);",
        "comment": "Reads the registry information in a specified file and copies it over the specified key. This registry information may be in the form of a key and multiple levels of subkeys."
    },
    "RegSaveKey": {
        "prototype": "LSTATUS RegSaveKeyW(\n  HKEY                        hKey,\n  LPCWSTR                     lpFile,\n  const LPSECURITY_ATTRIBUTES lpSecurityAttributes);",
        "comment": "Saves the specified key and all of its subkeys and values to a new file, in the standard format."
    },
    "RegSaveKeyEx": {
        "prototype": "LSTATUS RegSaveKeyExW(\n  HKEY                        hKey,\n  LPCWSTR                     lpFile,\n  const LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n  DWORD                       Flags);",
        "comment": "Saves the specified key and all of its subkeys and values to a registry file, in the specified format."
    },
    "RegSetKeyValue": {
        "prototype": "LSTATUS RegSetKeyValueW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  LPCWSTR lpValueName,\n  DWORD   dwType,\n  LPCVOID lpData,\n  DWORD   cbData);",
        "comment": "Sets the data for the specified value in the specified registry key and subkey."
    },
    "RegSetValue": {
        "prototype": "LSTATUS RegSetValueW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey,\n  DWORD   dwType,\n  LPCWSTR lpData,\n  DWORD   cbData);",
        "comment": "Sets the data for the default or unnamed value of a specified registry key. The data must be a text string."
    },
    "RegSetValueEx": {
        "prototype": "LSTATUS RegSetValueExW(\n  HKEY       hKey,\n  LPCWSTR    lpValueName,\n  DWORD      Reserved,\n  DWORD      dwType,\n  const BYTE *lpData,\n  DWORD      cbData\n);",
        "comment": "Sets the data and type of a specified value under a registry key."
    },
    "RegUnLoadKey": {
        "prototype": "LSTATUS RegUnLoadKeyW(\n  HKEY    hKey,\n  LPCWSTR lpSubKey);",
        "comment": "Unloads the specified registry key and its subkeys from the registry."
    },
    "ReleaseActCtx": {
        "prototype": "void ReleaseActCtx(\n  HANDLE hActCtx\n);",
        "comment": "The ReleaseActCtx function decrements the reference count of the specified activation context."
    },
    "ReleaseCapture": {
        "prototype": "BOOL ReleaseCapture();",
        "comment": "Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when a mouse button is clicked while the cursor hot spot is in the window of another thread."
    },
    "ReleaseDC": {
        "prototype": "int ReleaseDC(\n  HWND hWnd,\n  HDC  hDC\n);",
        "comment": "The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs."
    },
    "RemoveClipboardFormatListener": {
        "prototype": "BOOL RemoveClipboardFormatListener(\n  HWND hwnd\n);",
        "comment": "Removes the given window from the system-maintained clipboard format listener list."
    },
    "RemoveDirectory": {
        "prototype": "BOOL RemoveDirectoryW(\n  LPCWSTR lpPathName\n);",
        "comment": "Deletes an existing empty directory."
    },
    "RemoveDllDirectory": {
        "prototype": "BOOL RemoveDllDirectory(\n  [in] DLL_DIRECTORY_COOKIE Cookie\n);",
        "comment": "Removes a directory that was added to the process DLL search path by using AddDllDirectory."
    },
    "RemoveMenu": {
        "prototype": "BOOL RemoveMenu(\n  HMENU hMenu,\n  UINT  uPosition,\n  UINT  uFlags\n);",
        "comment": "Deletes a menu item or detaches a submenu from the specified menu. If the menu item opens a drop-down menu or submenu, RemoveMenu does not destroy the menu or its handle, allowing the menu to be reused. Before this function is called, the GetSubMenu function should retrieve a handle to the drop-down menu or submenu."
    },
    "RemoveProp": {
        "prototype": "HANDLE RemovePropW(\n  HWND    hWnd,\n  LPCWSTR lpString\n);",
        "comment": "Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed."
    },
    "RemoveWindowSubclass": {
        "prototype": "BOOL RemoveWindowSubclass(\n  HWND         hWnd,\n  SUBCLASSPROC pfnSubclass,\n  UINT_PTR     uIdSubclass\n);",
        "comment": "Removes a subclass callback from a window."
    },
    "ReOpenFile": {
        "prototype": "HANDLE ReOpenFile(\n  HANDLE hOriginalFile,\n  DWORD  dwDesiredAccess,\n  DWORD  dwShareMode,\n  DWORD  dwFlagsAndAttributes);",
        "comment": "Reopens the specified file system object with different access rights, sharing mode, and flags."
    },
    "ReplaceText": {
        "prototype": "HWND ReplaceTextW(\n  LPFINDREPLACEW Arg1\n);",
        "comment": "Creates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string, as well as options to control the find and replace operations."
    },
    "ReplyMessage": {
        "prototype": "BOOL ReplyMessage(\n  LRESULT lResult\n);",
        "comment": "Replies to a message sent from another thread by the SendMessage function."
    },
    "ReportJobProcessingProgress": {
        "prototype": "HRESULT ReportJobProcessingProgress(\n  _In_ HANDLE                printerHandle,\n  _In_ ULONG                 jobId,\n       EPrintXPSJobOperation jobOperation,\n       EPrintXPSJobProgress  jobProgress\n);",
        "comment": "Reports to the Print Spooler service whether an XPS print job is in the spooling or the rendering phase and what part of the processing is currently underway.",
        "category": "winspool"
    },
    "ResetEvent": {
        "prototype": "BOOL ResetEvent(\n  HANDLE hEvent\n);",
        "comment": "Sets the specified event object to the nonsignaled state."
    },
    "ResetPrinter": {
        "prototype": "BOOL ResetPrinterW(\n  _In_ HANDLE             hPrinter,\n  _In_ LPPRINTER_DEFAULTS pDefault\n);",
        "comment": "The ResetPrinter function specifies the data type and device mode values to be used for printing documents submitted by the StartDocPrinter function. These values can be overridden by using the SetJob function after document printing has started."
    },
    "ResizePseudoConsole": {
        "prototype": "HRESULT ResizePseudoConsole(\n  _In_ HPCON hPC ,\n  _In_ COORD size\n);",
        "comment": "Resizes the internal buffers for a pseudoconsole to the given size.",
        "minimumWindowsVersion": "WIN10_RS5"
    },
    "RoActivateInstance": {
        "prototype": "HRESULT RoActivateInstance(\n  HSTRING      activatableClassId,\n  IInspectable **instance\n);",
        "comment": "Activates the specified Windows Runtime class.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "RoGetActivationFactory": {
        "prototype": "HRESULT RoGetActivationFactory(\n  HSTRING activatableClassId,\n  REFIID  iid,\n  void    **factory\n);",
        "comment": "Gets the activation factory for the specified runtime class.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "RoGetApartmentIdentifier": {
        "prototype": "HRESULT RoGetApartmentIdentifier(\n  UINT64 *apartmentIdentifier\n);",
        "comment": "Gets a unique identifier for the current apartment.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "RoGetMetaDataFile": {
        "prototype": "HRESULT RoGetMetaDataFile(\n  [in]            const HSTRING        name,\n  [in, optional]  IMetaDataDispenserEx *metaDataDispenser,\n  [out, optional] HSTRING              *metaDataFilePath,\n  [out, optional] IMetaDataImport2     **metaDataImport,\n  [out, optional] mdTypeDef            *typeDefToken\n);",
        "comment": "Locates and retrieves the metadata file that describes the Application Binary Interface (ABI) for the specified typename.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "RoInitialize": {
        "prototype": "HRESULT RoInitialize(\n  RO_INIT_TYPE initType\n);",
        "comment": "Initializes the Windows Runtime on the current thread with the specified concurrency model.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "RoIsApiContractMajorVersionPresent": {
        "prototype": "HRESULT RoIsApiContractMajorVersionPresent(\n  PCWSTR name,\n  UINT16 majorVersion,\n  BOOL   *present\n);",
        "comment": "Returns true or false to indicate whether the API contract with the specified name and major version number is present.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN10_RS5"
    },
    "RoIsApiContractPresent": {
        "prototype": "HRESULT RoIsApiContractPresent(\n  PCWSTR name,\n  UINT16 majorVersion,\n  UINT16 minorVersion,\n  BOOL   *present\n);",
        "comment": "Returns true or false to indicate whether the API contract with the specified name and major and minor version number is present.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN10_RS5"
    },
    "RoundRect": {
        "prototype": "BOOL RoundRect(\n  HDC hdc,\n  int left,\n  int top,\n  int right,\n  int bottom,\n  int width,\n  int height\n);",
        "comment": "The RoundRect function draws a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush."
    },
    "RoUninitialize": {
        "prototype": "void RoUninitialize();",
        "comment": "Closes the Windows Runtime on the current thread.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "SafeArrayAccessData": {
        "prototype": "HRESULT SafeArrayAccessData(\n  [in]  SAFEARRAY *psa,\n  [out] void **ppvData\n);",
        "comment": "Increments the lock count of an array, and retrieves a pointer to the array data."
    },
    "SafeArrayAddRef": {
        "prototype": "HRESULT SafeArrayAddRef(\n  [in]  SAFEARRAY *psa,\n  [out] PVOID     *ppDataToRelease\n);",
        "comment": "Increases the pinning reference count of the descriptor for the specified safe array by one, and may increase the pinning reference count of the data for the specified safe array by one if that data was dynamically allocated, as determined by the descriptor of the safe array."
    },
    "SafeArrayAllocData": {
        "prototype": "HRESULT SafeArrayAllocData(\n  [in] SAFEARRAY *psa\n);",
        "comment": "Allocates memory for a safe array, based on a descriptor created with SafeArrayAllocDescriptor."
    },
    "SafeArrayAllocDescriptor": {
        "prototype": "HRESULT SafeArrayAllocDescriptor(\n  [in]  UINT      cDims,\n  [out] SAFEARRAY **ppsaOut\n);",
        "comment": "Allocates memory for a safe array descriptor."
    },
    "SafeArrayAllocDescriptorEx": {
        "prototype": "HRESULT SafeArrayAllocDescriptorEx(\n  [in]  VARTYPE   vt,\n  [in]  UINT      cDims,\n  [out] SAFEARRAY **ppsaOut\n);",
        "comment": "Creates a safe array descriptor for an array of any valid variant type, including VT_RECORD, without allocating the array data."
    },
    "SafeArrayCopy": {
        "prototype": "HRESULT SafeArrayCopy(\n  [in]  SAFEARRAY *psa,\n  [out] SAFEARRAY **ppsaOut\n);",
        "comment": "Creates a copy of an existing safe array."
    },
    "SafeArrayCopyData": {
        "prototype": "HRESULT SafeArrayCopyData(\n  [in] SAFEARRAY *psaSource,\n  [in] SAFEARRAY *psaTarget\n);",
        "comment": "Copies the source array to the specified target array after releasing any resources in the target array. This is similar to SafeArrayCopy, except that the target array has to be set up by the caller. The target is not allocated or reallocated."
    },
    "SafeArrayCreate": {
        "prototype": "SAFEARRAY * SafeArrayCreate(\n  [in] VARTYPE        vt,\n  [in] UINT           cDims,\n  [in] SAFEARRAYBOUND *rgsabound\n);",
        "comment": "Creates a new array descriptor, allocates and initializes the data for the array, and returns a pointer to the new array descriptor."
    },
    "SafeArrayCreateEx": {
        "prototype": "SAFEARRAY * SafeArrayCreateEx(\n  [in] VARTYPE        vt,\n  [in] UINT           cDims,\n  [in] SAFEARRAYBOUND *rgsabound,\n  [in] PVOID          pvExtra\n);",
        "comment": "Creates and returns a safe array descriptor from the specified VARTYPE, number of dimensions and bounds."
    },
    "SafeArrayCreateVector": {
        "prototype": "SAFEARRAY * SafeArrayCreateVector(\n  [in] VARTYPE vt,\n  [in] int lLbound,\n  [in] int cElements\n);",
        "comment": "Creates a one-dimensional array. A safe array created with SafeArrayCreateVector is a fixed size, so the constant FADF_FIXEDSIZE is always set."
    },
    "SafeArrayCreateVectorEx": {
        "prototype": "SAFEARRAY * SafeArrayCreateVectorEx(\n  [in] VARTYPE vt,\n  [in] LONG    lLbound,\n  [in] ULONG   cElements,\n  [in] PVOID   pvExtra\n);",
        "comment": "Creates and returns a one-dimensional safe array of the specified VARTYPE and bounds."
    },
    "SafeArrayDestroy": {
        "prototype": "HRESULT SafeArrayDestroy(\n  [in] SAFEARRAY *psa\n);",
        "comment": "Destroys an existing array descriptor and all of the data in the array. If objects are stored in the array, Release is called on each object in the array."
    },
    "SafeArrayDestroyData": {
        "prototype": "HRESULT SafeArrayDestroyData(\n  [in] SAFEARRAY *psa\n);",
        "comment": "Destroys all the data in the specified safe array."
    },
    "SafeArrayDestroyDescriptor": {
        "prototype": "HRESULT SafeArrayDestroyDescriptor(\n  [in] SAFEARRAY *psa\n);",
        "comment": "Destroys the descriptor of the specified safe array."
    },
    "SafeArrayGetDim": {
        "prototype": "UINT SafeArrayGetDim(\n  [in] SAFEARRAY *psa\n);",
        "comment": "Gets the number of dimensions in the array."
    },
    "SafeArrayGetElement": {
        "prototype": "HRESULT SafeArrayGetElement(\n  [in]  SAFEARRAY *psa,\n  [in]  LONG      *rgIndices,\n  [out] void      *pv\n);",
        "comment": "Retrieves a single element of the array."
    },
    "SafeArrayGetElemsize": {
        "prototype": "UINT SafeArrayGetElemsize(\n  [in] SAFEARRAY *psa\n);",
        "comment": "Gets the size of an element."
    },
    "SafeArrayGetIID": {
        "prototype": "HRESULT SafeArrayGetIID(\n  [in]  SAFEARRAY *psa,\n  [out] GUID      *pguid\n);",
        "comment": "Gets the GUID of the interface contained within the specified safe array."
    },
    "SafeArrayGetLBound": {
        "prototype": "HRESULT SafeArrayGetLBound(\n  [in]  SAFEARRAY *psa,\n  [in]  UINT      nDim,\n  [out] LONG      *plLbound\n);",
        "comment": "Gets the lower bound for any dimension of the specified safe array."
    },
    "SafeArrayGetRecordInfo": {
        "prototype": "HRESULT SafeArrayGetRecordInfo(\n  [in]  SAFEARRAY   *psa,\n  [out] IRecordInfo **prinfo\n);",
        "comment": "Retrieves the IRecordInfo interface of the UDT contained in the specified safe array."
    },
    "SafeArrayGetUBound": {
        "prototype": "HRESULT SafeArrayGetUBound(\n  [in]  SAFEARRAY *psa,\n  [in]  UINT      nDim,\n  [out] LONG      *plUbound\n);",
        "comment": "Gets the upper bound for any dimension of the specified safe array."
    },
    "SafeArrayGetVartype": {
        "prototype": "HRESULT SafeArrayGetVartype(\n  [in]  SAFEARRAY *psa,\n  [out] VARTYPE   *pvt\n);",
        "comment": "Gets the VARTYPE stored in the specified safe array."
    },
    "SafeArrayLock": {
        "prototype": "HRESULT SafeArrayLock(\n  [in] SAFEARRAY *psa\n);",
        "comment": "Increments the lock count of an array, and places a pointer to the array data in pvData of the array descriptor."
    },
    "SafeArrayPtrOfIndex": {
        "prototype": "HRESULT SafeArrayPtrOfIndex(\n  [in]  SAFEARRAY *psa,\n  [in]  LONG      *rgIndices,\n  [out] void      **ppvData\n);",
        "comment": "Gets a pointer to an array element."
    },
    "SafeArrayPutElement": {
        "prototype": "HRESULT SafeArrayPutElement(\n  [in] SAFEARRAY *psa,\n  [in] LONG      *rgIndices,\n  [in] void      *pv\n);",
        "comment": "Stores the data element at the specified location in the array."
    },
    "SafeArrayRedim": {
        "prototype": "HRESULT SafeArrayRedim(\n  [in, out] SAFEARRAY      *psa,\n  [in]      SAFEARRAYBOUND *psaboundNew\n);",
        "comment": "Changes the right-most (least significant) bound of the specified safe array."
    },
    "SafeArrayReleaseData": {
        "prototype": "void SafeArrayReleaseData(\n  [in] PVOID pData\n);",
        "comment": "Decreases the pinning reference count for the specified safe array data by one. When that count reaches 0, the memory for that data is no longer prevented from being freed. "
    },
    "SafeArrayReleaseDescriptor": {
        "prototype": "void SafeArrayReleaseDescriptor(\n  [in] SAFEARRAY *psa\n);",
        "comment": "Decreases the pinning reference count for the descriptor of the specified safe array by one. When that count reaches 0, the memory for that descriptor is no longer prevented from being freed. "
    },
    "SafeArraySetIID": {
        "prototype": "HRESULT SafeArraySetIID(\n  [in] SAFEARRAY *psa,\n  [in] REFGUID   guid\n);",
        "comment": "Sets the GUID of the interface for the specified safe array."
    },
    "SafeArraySetRecordInfo": {
        "prototype": "HRESULT SafeArraySetRecordInfo(\n  [in] SAFEARRAY   *psa,\n  [in] IRecordInfo *prinfo\n);",
        "comment": "Sets the record info in the specified safe array."
    },
    "SafeArrayUnaccessData": {
        "prototype": "HRESULT SafeArrayUnaccessData(\n  SAFEARRAY *psa\n);",
        "comment": "Decrements the lock count of an array, and invalidates the pointer retrieved by SafeArrayAccessData."
    },
    "SafeArrayUnlock": {
        "prototype": "HRESULT SafeArrayUnlock(\n  SAFEARRAY *psa\n);",
        "comment": "Decrements the lock count of an array so it can be freed or resized."
    },
    "SaveCurrentMonitorSettings": {
        "prototype": "_BOOL SaveCurrentMonitorSettings(\n  HANDLE hMonitor\n);",
        "comment": "Saves the current monitor settings to the display's nonvolatile storage."
    },
    "SaveDC": {
        "prototype": "int SaveDC(\n  HDC hdc\n);",
        "comment": "The SaveDC function saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes (such as the bitmap, brush, palette, font, pen, region, drawing mode, and mapping mode) to a context stack."
    },
    "SCardAccessStartedEvent": {
        "prototype": "HANDLE SCardAccessStartedEvent();",
        "comment": "The SCardAccessStartedEvent function returns an event handle when an event signals that the smart card resource manager is started. The event-object handle can be specified in a call to one of the wait functions."
    },
    "SCardAddReaderToGroup": {
        "prototype": "LONG SCardAddReaderToGroupW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szReaderName,\n  LPCWSTR      szGroupName\n);",
        "comment": "The SCardAddReaderToGroup function adds a reader to a reader group."
    },
    "SCardAudit": {
        "prototype": "LONG SCardAudit(\n  SCARDCONTEXT hContext,\n  DWORD        dwEvent\n);",
        "comment": "The SCardAudit function writes event messages to the Windows application log Microsoft-Windows-SmartCard-Audit/Authentication.",
        "minimumWindowsVersion": "WIN8"
    },
    "SCardBeginTransaction": {
        "prototype": "LONG SCardBeginTransaction(\n  SCARDHANDLE hCard\n);",
        "comment": "The SCardBeginTransaction function starts a transaction. The function waits for the completion of all other transactions before it begins. After the transaction starts, all other applications are blocked from accessing the smart card while the transaction is in progress."
    },
    "SCardCancel": {
        "prototype": "LONG SCardCancel(\n  SCARDCONTEXT hContext\n);",
        "comment": "The SCardCancel function terminates all outstanding actions within a specific resource manager context. The only requests that you can cancel are those that require waiting for external action by the smart card or user. Any such outstanding action requests will terminate with a status indication that the action was canceled. This is especially useful to force outstanding SCardGetStatusChange calls to terminate."
    },
    "SCardConnect": {
        "prototype": "LONG SCardConnectW(\n  SCARDCONTEXT  hContext,\n  LPCWSTR       szReader,\n  DWORD         dwShareMode,\n  DWORD         dwPreferredProtocols,\n  LPSCARDHANDLE phCard,\n  LPDWORD       pdwActiveProtocol\n);",
        "comment": "The SCardConnect function establishes a connection (using a specific resource manager context) between the calling application and a smart card contained by a specific reader. If no card exists in the specified reader, an error is returned."
    },
    "SCardControl": {
        "prototype": "LONG SCardControl(\n SCARDHANDLE hCard,\n DWORD       dwControlCode,\n LPCVOID     lpInBuffer,\n DWORD       cbInBufferSize,\n LPVOID      lpOutBuffer,\n DWORD       cbOutBufferSize,\n LPDWORD     lpBytesReturned\n);",
        "comment": "The SCardControl function gives you direct control of the reader. You can call it any time after a successful call to SCardConnect and before a successful call to SCardDisconnect. The effect on the state of the reader depends on the control code."
    },
    "SCardDisconnect": {
        "prototype": "LONG SCardDisconnect(\n  SCARDHANDLE hCard,\n  DWORD       dwDisposition\n);",
        "comment": "The SCardDisconnect function terminates a connection previously opened between the calling application and a smart card in the target reader."
    },
    "SCardEndTransaction": {
        "prototype": "LONG SCardEndTransaction(\n  SCARDHANDLE hCard,\n  DWORD       dwDisposition\n);",
        "comment": "The SCardEndTransaction function completes a previously declared transaction, allowing other applications to resume interactions with the card."
    },
    "SCardEstablishContext": {
        "prototype": "LONG SCardEstablishContext(\n  DWORD          dwScope,\n  LPCVOID        pvReserved1,\n  LPCVOID        pvReserved2,\n  LPSCARDCONTEXT phContext\n);",
        "comment": "The SCardEstablishContext function establishes the resource manager context (the scope) within which database operations are performed."
    },
    "SCardForgetCardType": {
        "prototype": "LONG SCardForgetCardTypeW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szCardName\n);",
        "comment": "The SCardForgetCardType function removes an introduced smart card from the smart card subsystem."
    },
    "SCardForgetReader": {
        "prototype": "LONG SCardForgetReaderW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szReaderName\n);",
        "comment": "The SCardForgetReader function removes a previously introduced reader from control by the smart card subsystem. It is removed from the smart card database, including from any reader group that it may have been added to."
    },
    "SCardForgetReaderGroup": {
        "prototype": "LONG SCardForgetReaderGroupW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szGroupName\n);",
        "comment": "The SCardForgetReaderGroup function removes a previously introduced smart card reader group from the smart card subsystem. Although this function automatically clears all readers from the group, it does not affect the existence of the individual readers in the database."
    },
    "SCardFreeMemory": {
        "prototype": "LONG SCardFreeMemory(\n  SCARDCONTEXT hContext,\n  LPCVOID      pvMem\n);",
        "comment": "The SCardFreeMemory function releases memory that has been returned from the resource manager using the SCARD_AUTOALLOCATE length designator."
    },
    "SCardGetAttrib": {
        "prototype": "LONG SCardGetAttrib(\n  SCARDHANDLE hCard,\n  DWORD       dwAttrId,\n  LPBYTE      pbAttr,\n  LPDWORD     pcbAttrLen\n);",
        "comment": "The SCardGetAttrib function retrieves the current reader attributes for the given handle. It does not affect the state of the reader, driver, or card."
    },
    "SCardGetCardTypeProviderName": {
        "prototype": "LONG SCardGetCardTypeProviderNameW(\n SCARDCONTEXT hContext,\n LPCWSTR      szCardName,\n DWORD        dwProviderId,\n WCHAR        *szProvider,\n LPDWORD      pcchProvider\n);",
        "comment": "The SCardGetCardTypeProviderName function returns the name of the module (dynamic link library) that contains the provider for a given card name and provider type."
    },
    "SCardGetDeviceTypeId": {
        "prototype": "LONG SCardGetDeviceTypeIdW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szReaderName,\n  LPDWORD      pdwDeviceTypeId\n);",
        "comment": "The SCardGetDeviceTypeId function gets the device type identifier of the card reader for the given reader name. This function does not affect the state of the reader.",
        "minimumWindowsVersion": "WIN8"
    },
    "SCardGetProviderId": {
        "prototype": "LONG SCardGetProviderIdW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szCard,\n  LPGUID       pguidProviderId\n);",
        "comment": "The SCardGetProviderId function returns the identifier (GUID) of the primary service provider for a given card. The caller supplies the name of a smart card (previously introduced to the system) and receives the registered identifier of the primary service provider GUID, if one exists."
    },
    "SCardGetReaderDeviceInstanceId": {
        "prototype": "LONG SCardGetReaderDeviceInstanceIdW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szReaderName,\n  LPWSTR       szDeviceInstanceId,\n  LPDWORD      pcchDeviceInstanceId\n);",
        "comment": "The SCardGetReaderDeviceInstanceId function gets the device instance identifier of the card reader for the given reader name. This function does not affect the state of the reader.",
        "minimumWindowsVersion": "WIN8"
    },
    "SCardGetReaderIcon": {
        "prototype": "LONG SCardGetReaderIconW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szReaderName,\n  LPBYTE       pbIcon,\n  LPDWORD      pcbIcon\n);",
        "comment": "The SCardGetReaderIcon function gets an icon of the smart card reader for a given reader's name. This function does not affect the state of the card reader.",
        "minimumWindowsVersion": "WIN8"
    },
    "SCardGetStatusChange": {
        "prototype": "LONG SCardGetStatusChangeW(\n  SCARDCONTEXT         hContext,\n  DWORD                dwTimeout,\n  LPSCARD_READERSTATEW rgReaderStates,\n  DWORD                cReaders\n);",
        "comment": "The SCardGetStatusChange function blocks execution until the current availability of the cards in a specific set of readers changes. The caller supplies a list of readers to be monitored by an SCARD_READERSTATE array and the maximum amount of time (in milliseconds) that it is willing to wait for an action to occur on one of the listed readers. Note that SCardGetStatusChange uses the user-supplied value in the dwCurrentState members of the rgReaderStatesSCARD_READERSTATE array as the definition of the current state of the readers. The function returns when there is a change in availability, having filled in the dwEventState members of rgReaderStates appropriately."
    },
    "SCardGetTransmitCount": {
        "prototype": "LONG SCardGetTransmitCount(\n  SCARDHANDLE hCard,\n  LPDWORD     pcTransmitCount\n);",
        "comment": "The SCardGetTransmitCount function retrieves the number of transmit operations that have completed since the specified card reader was inserted."
    },
    "SCardIntroduceCardType": {
        "prototype": "LONG SCardIntroduceCardTypeW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szCardName,\n  LPCGUID      pguidPrimaryProvider,\n  LPCGUID      rgguidInterfaces,\n  DWORD        dwInterfaceCount,\n  LPCBYTE      pbAtr,\n  LPCBYTE      pbAtrMask,\n  DWORD        cbAtrLen\n);",
        "comment": "The SCardIntroduceCardType function introduces a smart card to the smart card subsystem (for the active user) by adding it to the smart card database."
    },
    "SCardIntroduceReader": {
        "prototype": "LONG SCardIntroduceReaderW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szReaderName,\n  LPCWSTR      szDeviceName\n);",
        "comment": "The SCardIntroduceReader function introduces a new name for an existing smart card reader."
    },
    "SCardIntroduceReaderGroup": {
        "prototype": "LONG SCardIntroduceReaderGroupW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szGroupName\n);",
        "comment": "The SCardIntroduceReaderGroup function introduces a reader group to the smart card subsystem. However, the reader group is not created until the group is specified when adding a reader to the smart card database."
    },
    "SCardIsValidContext": {
        "prototype": "LONG SCardIsValidContext(\n  SCARDCONTEXT hContext\n);",
        "comment": "The SCardIsValidContext function determines whether a smart card context handle is valid."
    },
    "SCardListCards": {
        "prototype": "LONG SCardListCardsW(\n  SCARDCONTEXT hContext,\n  LPCBYTE      pbAtr,\n  LPCGUID      rgquidInterfaces,\n  DWORD        cguidInterfaceCount,\n  WCHAR        *mszCards,\n  LPDWORD      pcchCards\n);",
        "comment": "The SCardListCards function searches the smart card database and provides a list of named cards previously introduced to the system by the user. The caller specifies an ATR string, a set of interface identifiers (GUIDs), or both. If both an ATR string and an identifier array are supplied, the cards returned will match the ATR string supplied and support the interfaces specified."
    },
    "SCardListInterfaces": {
        "prototype": "LONG SCardListInterfacesW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szCard,\n  LPGUID       pguidInterfaces,\n  LPDWORD      pcguidInterfaces\n);",
        "comment": "The SCardListInterfaces function provides a list of interfaces supplied by a given card. The caller supplies the name of a smart card previously introduced to the subsystem, and receives the list of interfaces supported by the card."
    },
    "SCardListReaderGroups": {
        "prototype": "LONG SCardListReaderGroupsW(\n  SCARDCONTEXT hContext,\n  LPWSTR       mszGroups,\n  LPDWORD      pcchGroups\n);",
        "comment": "The SCardListReaderGroups function provides the list of reader groups that have previously been introduced to the system."
    },
    "SCardListReaders": {
        "prototype": "LONG SCardListReadersW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      mszGroups,\n  LPWSTR       mszReaders,\n  LPDWORD      pcchReaders\n);",
        "comment": "The SCardListReaders function provides the list of readers within a set of named reader groups, eliminating duplicates. The caller supplies a list of reader groups, and receives the list of readers within the named groups. Unrecognized group names are ignored. This function only returns readers within the named groups that are currently attached to the system and available for use."
    },
    "SCardListReadersWithDeviceInstanceId": {
        "prototype": "LONG SCardListReadersWithDeviceInstanceIdW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szDeviceInstanceId,\n  LPWSTR       mszReaders,\n  LPDWORD      pcchReaders\n);",
        "comment": "The SCardListReadersWithDeviceInstanceId function gets the list of readers that have provided a device instance identifier. This function does not affect the state of the reader.",
        "minimumWindowsVersion": "WIN8"
    },
    "SCardLocateCards": {
        "prototype": "LONG SCardLocateCardsW(\n  SCARDCONTEXT         hContext,\n  LPCWSTR              mszCards,\n  LPSCARD_READERSTATEW rgReaderStates,\n  DWORD                cReaders\n);",
        "comment": "The SCardLocateCards function searches the readers listed in the rgReaderStates parameter for a card with an ATR string that matches one of the card names specified in mszCards, returning immediately with the result."
    },
    "SCardLocateCardsByATR": {
        "prototype": "LONG SCardLocateCardsByATRW(\n  SCARDCONTEXT         hContext,\n  LPSCARD_ATRMASK      rgAtrMasks,\n  DWORD                cAtrs,\n  LPSCARD_READERSTATEW rgReaderStates,\n  DWORD                cReaders\n);",
        "comment": "The SCardLocateCardsByATR function searches the readers listed in the rgReaderStates parameter for a card with a name that matches one of the card names contained in one of the SCARD_ATRMASK structures specified by the rgAtrMasks parameter."
    },
    "SCardReadCache": {
        "prototype": "LONG SCardReadCacheW(\n  SCARDCONTEXT hContext,\n  UUID         *CardIdentifier,\n  DWORD        FreshnessCounter,\n  LPWSTR       LookupName,\n  PBYTE        Data,\n  DWORD        *DataLen\n);",
        "comment": "The SCardReadCache function retrieves the value portion of a name-value pair from the global cache maintained by the Smart Card Resource Manager."
    },
    "SCardReconnect": {
        "prototype": "LONG SCardReconnect(\n  SCARDHANDLE hCard,\n  DWORD       dwShareMode,\n  DWORD       dwPreferredProtocols,\n  DWORD       dwInitialization,\n  LPDWORD     pdwActiveProtocol\n);",
        "comment": "The SCardReconnect function reestablishes an existing connection between the calling application and a smart card. This function moves a card handle from direct access to general access, or acknowledges and clears an error condition that is preventing further access to the card."
    },
    "SCardReleaseContext": {
        "prototype": "LONG SCardReleaseContext(\nSCARDCONTEXT hContext);",
        "comment": "The SCardReleaseContext function closes an established resource manager context, freeing any resources allocated under that context, including SCARDHANDLE objects and memory allocated using the SCARD_AUTOALLOCATE length designator."
    },
    "SCardReleaseStartedEvent": {
        "prototype": "void SCardReleaseStartedEvent();",
        "comment": "The SCardReleaseStartedEvent function decrements the reference count for a handle acquired by a previous call to the SCardAccessStartedEvent function."
    },
    "SCardRemoveReaderFromGroup": {
        "prototype": "LONG SCardRemoveReaderFromGroupW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szReaderName,\n  LPCWSTR      szGroupName\n);",
        "comment": "The SCardRemoveReaderFromGroup function removes a reader from an existing reader group. This function has no effect on the reader."
    },
    "SCardSetAttrib": {
        "prototype": "LONG SCardSetAttrib(\n  SCARDHANDLE hCard,\n  DWORD       dwAttrId,\n  LPCBYTE     pbAttr,\n  DWORD       cbAttrLen\n);",
        "comment": "The SCardSetAttrib function sets the given reader attribute for the given handle. It does not affect the state of the reader, reader driver, or smart card. Not all attributes are supported by all readers (nor can they be set at all times) as many of the attributes are under direct control of the transport protocol."
    },
    "SCardSetCardTypeProviderName": {
        "prototype": "LONG SCardSetCardTypeProviderNameW(\n  SCARDCONTEXT hContext,\n  LPCWSTR      szCardName,\n  DWORD        dwProviderId,\n  LPCWSTR      szProvider\n);",
        "comment": "The SCardSetCardTypeProviderName function specifies the name of the module (dynamic link library) containing the provider for a given card name and provider type."
    },
    "SCardStatus": {
        "prototype": "LONG SCardStatusW(\n  SCARDHANDLE hCard,\n  LPWSTR      mszReaderNames,\n  LPDWORD     pcchReaderLen,\n  LPDWORD     pdwState,\n  LPDWORD     pdwProtocol,\n  LPBYTE      pbAtr,\n  LPDWORD     pcbAtrLen\n);",
        "comment": "The SCardStatus function provides the current status of a smart card in a reader. You can call it any time after a successful call to SCardConnect and before a successful call to SCardDisconnect. It does not affect the state of the reader or reader driver."
    },
    "SCardTransmit": {
        "prototype": "LONG SCardTransmit(\n  SCARDHANDLE         hCard,\n  LPCSCARD_IO_REQUEST pioSendPci,\n  LPCBYTE             pbSendBuffer,\n  DWORD               cbSendLength,\n  LPSCARD_IO_REQUEST  pioRecvPci,\n  LPBYTE              pbRecvBuffer,\n  LPDWORD             pcbRecvLength\n);",
        "comment": "The SCardTransmit function sends a service request to the smart card and expects to receive data back from the card."
    },
    "SCardUIDlgSelectCard": {
        "prototype": "LONG SCardUIDlgSelectCardW(\n  LPOPENCARDNAMEW_EX unnamedParam1\n);",
        "comment": "The SCardUIDlgSelectCard function displays the smart card Select Card dialog box.",
        "category": "winscard"
    },
    "SCardWriteCache": {
        "prototype": "LONG SCardWriteCacheW(\n  SCARDCONTEXT hContext,\n  UUID         *CardIdentifier,\n  DWORD        FreshnessCounter,\n  LPWSTR       LookupName,\n  PBYTE        Data,\n  DWORD        DataLen\n);",
        "comment": "The SCardWriteCache function writes a name-value pair from a smart card to the global cache maintained by the Smart Card Resource Manager."
    },
    "ScheduleJob": {
        "prototype": "BOOL ScheduleJob(\n  _In_ HANDLE hPrinter,\n  _In_ DWORD  dwJobID\n);",
        "comment": "The ScheduleJob function requests that the print spooler schedule a specified print job for printing.",
        "category": "winspool"
    },
    "ScreenToClient": {
        "prototype": "BOOL ScreenToClient(\n  HWND    hWnd,\n  LPPOINT lpPoint\n);",
        "comment": "The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates."
    },
    "ScrollConsoleScreenBuffer": {
        "prototype": "BOOL ScrollConsoleScreenBufferW(\n  _In_           HANDLE     hConsoleOutput,\n  _In_     const SMALL_RECT *lpScrollRectangle,\n  _In_opt_ const SMALL_RECT *lpClipRectangle,\n  _In_           COORD      dwDestinationOrigin,\n  _In_     const CHAR_INFO  *lpFill\n);",
        "comment": "Moves a block of data in a screen buffer. The effects of the move can be limited by specifying a clipping rectangle, so the contents of the console screen buffer outside the clipping rectangle are unchanged."
    },
    "ScrollDC": {
        "prototype": "BOOL ScrollDC(\n  HDC        hDC,\n  int        dx,\n  int        dy,\n  const RECT *lprcScroll,\n  const RECT *lprcClip,\n  HRGN       hrgnUpdate,\n  LPRECT     lprcUpdate\n);",
        "comment": "The ScrollDC function scrolls a rectangle of bits horizontally and vertically."
    },
    "ScrollWindow": {
        "prototype": "BOOL ScrollWindow(\n  HWND       hWnd,\n  int        XAmount,\n  int        YAmount,\n  const RECT *lpRect,\n  const RECT *lpClipRect\n);",
        "comment": "The ScrollWindow function scrolls the contents of the specified window's client area."
    },
    "ScrollWindowEx": {
        "prototype": "int ScrollWindowEx(\n  HWND       hWnd,\n  int        dx,\n  int        dy,\n  const RECT *prcScroll,\n  const RECT *prcClip,\n  HRGN       hrgnUpdate,\n  LPRECT     prcUpdate,\n  UINT       flags\n);",
        "comment": "The ScrollWindowEx function scrolls the contents of the specified window's client area."
    },
    "select": {
        "prototype": "int select(\n  int           nfds,\n  fd_set        *readfds,\n  fd_set        *writefds,\n  fd_set        *exceptfds,\n  const timeval *timeout\n);",
        "comment": "The select function determines the status of one or more sockets, waiting if necessary, to perform synchronous I/O.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "SelectClipPath": {
        "prototype": "BOOL SelectClipPath(\n  HDC hdc,\n  int mode\n);",
        "comment": "The SelectClipPath function selects the current path as a clipping region for a device context, combining the new region with any existing clipping region using the specified mode."
    },
    "SelectObject": {
        "prototype": "HGDIOBJ SelectObject(\n  HDC     hdc,\n  HGDIOBJ h\n);",
        "comment": "The SelectObject function selects an object into the specified device context (DC). The new object replaces the previous object of the same type."
    },
    "send": {
        "prototype": "int send(\n  SOCKET     s,\n  const char *buf,\n  int        len,\n  int        flags\n);",
        "comment": "The send function sends data on a connected socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "SendDlgItemMessage": {
        "prototype": "LRESULT SendDlgItemMessageW(\n  HWND   hDlg,\n  int    nIDDlgItem,\n  UINT   Msg,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Sends a message to the specified control in a dialog box."
    },
    "SendInput": {
        "prototype": "UINT SendInput(\n  UINT    cInputs,\n  LPINPUT pInputs,\n  int     cbSize\n);",
        "comment": "Synthesizes keystrokes, mouse motions, and button clicks."
    },
    "SendMessage": {
        "prototype": "LRESULT SendMessageW(\n  HWND   hWnd,\n  UINT   Msg,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message."
    },
    "SendMessageCallback": {
        "prototype": "BOOL SendMessageCallbackW(\n  HWND          hWnd,\n  UINT          Msg,\n  WPARAM        wParam,\n  LPARAM        lParam,\n  SENDASYNCPROC lpResultCallBack,\n  ULONG_PTR     dwData\n);",
        "comment": "Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function."
    },
    "SendMessageTimeout": {
        "prototype": "LRESULT SendMessageTimeoutW(\n  HWND       hWnd,\n  UINT       Msg,\n  WPARAM     wParam,\n  LPARAM     lParam,\n  UINT       fuFlags,\n  UINT       uTimeout,\n  PDWORD_PTR lpdwResult\n);",
        "comment": "Sends the specified message to one or more windows."
    },
    "SendNotifyMessage": {
        "prototype": "BOOL SendNotifyMessageW(\n  HWND   hWnd,\n  UINT   Msg,\n  WPARAM wParam,\n  LPARAM lParam\n);",
        "comment": "Sends the specified message to a window or windows. If the window was created by the calling thread, SendNotifyMessage calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, SendNotifyMessage passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message."
    },
    "sendto": {
        "prototype": "int sendto(\n  SOCKET         s,\n  const char     *buf,\n  int            len,\n  int            flags,\n  const sockaddr *to,\n  int            tolen\n);",
        "comment": "The sendto function sends data to a specific destination.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "SetActiveWindow": {
        "prototype": "HWND SetActiveWindow(\n  HWND hWnd\n);",
        "comment": "Activates a window. The window must be attached to the calling thread's message queue."
    },
    "SetBkColor": {
        "prototype": "COLORREF SetBkColor(\n  HDC      hdc,\n  COLORREF color\n);",
        "comment": "The SetBkColor function sets the current background color to the specified color value, or to the nearest physical color if the device cannot represent the specified color value."
    },
    "SetBkMode": {
        "prototype": "int SetBkMode(\n  HDC hdc,\n  int mode\n);",
        "comment": "The SetBkMode function sets the background mix mode of the specified device context. The background mix mode is used with text, hatched brushes, and pen styles that are not solid lines."
    },
    "SetCapture": {
        "prototype": "HWND SetCapture(\n  HWND hWnd\n);",
        "comment": "Sets the mouse capture to the specified window belonging to the current thread. SetCapture captures mouse input either when the mouse is over the capturing window, or when the mouse button was pressed while the mouse was over the capturing window and the button is still down. Only one window at a time can capture the mouse."
    },
    "SetCaretBlinkTime": {
        "prototype": "BOOL SetCaretBlinkTime(\n  UINT uMSeconds\n);",
        "comment": "Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels."
    },
    "SetCaretPos": {
        "prototype": "BOOL SetCaretPos(\n  int X,\n  int Y\n);",
        "comment": "Moves the caret to the specified coordinates. If the window that owns the caret was created with the CS_OWNDC class style, then the specified coordinates are subject to the mapping mode of the device context associated with that window."
    },
    "SetClassLongPtr": {
        "prototype": "ULONG_PTR SetClassLongPtrW(\n  HWND hWnd,\n  int  nIndex,\n  LONG_PTR dwNewLong\n);",
        "comment": "Changes an attribute of the specified window class."
    },
    "SetClipboardData": {
        "prototype": "HANDLE SetClipboardData(\n  UINT   uFormat,\n  HANDLE hMem\n);",
        "comment": "Places data on the clipboard in a specified clipboard format. The window must be the current clipboard owner, and the application must have called the OpenClipboard function."
    },
    "SetClipboardViewer": {
        "prototype": "HWND SetClipboardViewer(\n  HWND hWndNewViewer\n);",
        "comment": "Adds the specified window to the chain of clipboard viewers."
    },
    "SetCoalescableTimer": {
        "prototype": "UINT_PTR SetCoalescableTimer(\n  HWND      hWnd,\n  UINT_PTR  nIDEvent,\n  UINT      uElapse,\n  TIMERPROC lpTimerFunc,\n  ULONG     uToleranceDelay\n);",
        "comment": "Creates a timer with the specified time-out value and coalescing tolerance delay.",
        "minimumWindowsVersion": "WIN8"
    },
    "SetCommBreak": {
        "prototype": "BOOL SetCommBreak(\n  HANDLE hFile\n);",
        "comment": "Suspends character transmission for a specified communications device and places the transmission line in a break state until the ClearCommBreak function is called."
    },
    "SetCommConfig": {
        "prototype": "BOOL SetCommConfig(\n  HANDLE       hCommDev,\n  LPCOMMCONFIG lpCC,\n  DWORD        dwSize\n);",
        "comment": "Sets the current configuration of a communications device."
    },
    "SetCommMask": {
        "prototype": "BOOL SetCommMask(\n  HANDLE hFile,\n  DWORD  dwEvtMask\n);",
        "comment": "Specifies a set of events to be monitored for a communications device."
    },
    "SetCommState": {
        "prototype": "BOOL SetCommState(\n  HANDLE hFile,\n  LPDCB  lpDCB\n);",
        "comment": "Configures a communications device according to the specifications in a device-control block (a DCB structure). The function reinitializes all hardware and control settings, but it does not empty output or input queues."
    },
    "SetCommTimeouts": {
        "prototype": "BOOL SetCommTimeouts(\n  HANDLE         hFile,\n  LPCOMMTIMEOUTS lpCommTimeouts\n);",
        "comment": "Sets the time-out parameters for all read and write operations on a specified communications device."
    },
    "SetConsoleCtrlHandler": {
        "prototype": "BOOL SetConsoleCtrlHandler(\n  _In_opt_ PHANDLER_ROUTINE HandlerRoutine,\n  _In_     BOOL             Add\n);",
        "comment": "Adds or removes an application-defined HandlerRoutine function from the list of handler functions for the calling process."
    },
    "SetConsoleCursorInfo": {
        "prototype": "BOOL SetConsoleCursorInfo(\n  _In_       HANDLE              hConsoleOutput,\n  _In_ const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo\n);",
        "comment": "Sets the size and visibility of the cursor for the specified console screen buffer."
    },
    "SetConsoleCursorPosition": {
        "prototype": "BOOL SetConsoleCursorPosition(\n  _In_ HANDLE hConsoleOutput,\n  _In_ COORD  dwCursorPosition\n);",
        "comment": "Sets the cursor position in the specified console screen buffer."
    },
    "SetConsoleDisplayMode": {
        "prototype": "BOOL SetConsoleDisplayMode(\n  _In_      HANDLE hConsoleOutput,\n  _In_      DWORD  dwFlags,\n  _Out_opt_ PCOORD lpNewScreenBufferDimensions\n);",
        "comment": "Sets the display mode of the specified console screen buffer."
    },
    "SetConsoleMode": {
        "prototype": "BOOL SetConsoleMode(\n  _In_ HANDLE hConsoleHandle,\n  _In_ DWORD  dwMode\n);",
        "comment": "Sets the input mode of a console's input buffer or the output mode of a console screen buffer."
    },
    "SetConsoleTextAttribute": {
        "prototype": "BOOL SetConsoleTextAttribute(\n  _In_ HANDLE hConsoleOutput,\n  _In_ WORD   wAttributes\n);",
        "comment": "Sets the attributes of characters written to the console screen buffer by the WriteFile or WriteConsole function, or echoed by the ReadFile or ReadConsole function. This function affects text written after the function call."
    },
    "SetConsoleWindowInfo": {
        "prototype": "BOOL SetConsoleWindowInfo(\n  _In_       HANDLE     hConsoleOutput,\n  _In_       BOOL       bAbsolute,\n  _In_ const SMALL_RECT *lpConsoleWindow\n);",
        "comment": "Sets the current size and position of a console screen buffer's window."
    },
    "SetCurrentDirectory": {
        "prototype": "BOOL SetCurrentDirectoryW(\n  LPCTSTR lpPathName\n);",
        "comment": "Changes the current directory for the current process."
    },
    "SetCursor": {
        "prototype": "HCURSOR SetCursor(\n  HCURSOR hCursor\n);",
        "comment": "Sets the cursor shape."
    },
    "SetCursorPos": {
        "prototype": "BOOL SetCursorPos(\n  int X,\n  int Y\n);",
        "comment": "Moves the cursor to the specified screen coordinates. If the new coordinates are not within the screen rectangle set by the most recent ClipCursor function call, the system automatically adjusts the coordinates so that the cursor stays within the rectangle."
    },
    "SetDefaultCommConfig": {
        "prototype": "BOOL SetDefaultCommConfigW(\n  LPCWSTR      lpszName,\n  LPCOMMCONFIG lpCC,\n  DWORD        dwSize\n);",
        "comment": "Sets the default configuration for a communications device."
    },
    "SetDefaultDllDirectories": {
        "prototype": "BOOL SetDefaultDllDirectories(\n  [in] DWORD DirectoryFlags\n);",
        "comment": "Specifies a default set of directories to search when the calling process loads a DLL. This search path is used when LoadLibraryEx is called with no LOAD_LIBRARY_SEARCH flags.",
        "minimumWindowsVersion": "WIN8"
    },
    "SetDefaultPrinter": {
        "prototype": "BOOL SetDefaultPrinterW(\n  _In_ LPCTSTR pszPrinter\n);",
        "comment": "The SetDefaultPrinter function sets the printer name of the default printer for the current user on the local computer."
    },
    "SetDialogControlDpiChangeBehavior": {
        "prototype": "BOOL SetDialogControlDpiChangeBehavior(\n  HWND                                hWnd,\n  DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask,\n  DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values\n);",
        "comment": "Overrides the default per-monitor DPI scaling behavior of a child window in a dialog.",
        "minimumWindowsVersion": "WIN10_RS2"
    },
    "SetDialogDpiChangeBehavior": {
        "prototype": "BOOL SetDialogDpiChangeBehavior(\n  HWND                        hDlg,\n  DIALOG_DPI_CHANGE_BEHAVIORS mask,\n  DIALOG_DPI_CHANGE_BEHAVIORS values\n);",
        "comment": "Dialogs in Per-Monitor v2 contexts are automatically DPI scaled. This method lets you customize their DPI change behavior. This function works in conjunction with the DIALOG_DPI_CHANGE_BEHAVIORS enum in order to override the default DPI scaling behavior for dialogs. This function is called on a specified dialog, for which the specified flags are individually saved.",
        "minimumWindowsVersion": "WIN10_RS2"
    },
    "SetDisplayAutoRotationPreferences": {
        "prototype": "BOOL SetDisplayAutoRotationPreferences(\n  ORIENTATION_PREFERENCE orientation\n);",
        "comment": "Sets the screen auto-rotation preferences for the current process.",
        "minimumWindowsVersion": "WIN8"
    },
    "SetDisplayConfig": {
        "prototype": "LONG SetDisplayConfig(\n  [in]           UINT32                  numPathArrayElements,\n  [in, optional] DISPLAYCONFIG_PATH_INFO *pathArray,\n  [in]           UINT32                  numModeInfoArrayElements,\n  [in, optional] DISPLAYCONFIG_MODE_INFO *modeInfoArray,\n  [in]           UINT32                  flags\n);",
        "comment": "The SetDisplayConfig function modifies the display topology, source, and target modes by exclusively enabling the specified paths in the current session."
    },
    "SetDlgItemInt": {
        "prototype": "BOOL SetDlgItemInt(\n  HWND hDlg,\n  int  nIDDlgItem,\n  UINT uValue,\n  BOOL bSigned\n);",
        "comment": "Sets the text of a control in a dialog box to the string representation of a specified integer value."
    },
    "SetDlgItemText": {
        "prototype": "BOOL SetDlgItemTextW(\n  HWND    hDlg,\n  int     nIDDlgItem,\n  LPCWSTR lpString\n);",
        "comment": "Sets the title or text of a control in a dialog box."
    },
    "SetDoubleClickTime": {
        "prototype": "BOOL SetDoubleClickTime(\n  UINT Arg1\n);",
        "comment": "Sets the double-click time for the mouse. A double-click is a series of two clicks of a mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second clicks of a double-click."
    },
    "SetEndOfFile": {
        "prototype": "BOOL SetEndOfFile(\n  [in] HANDLE hFile\n);",
        "comment": "Sets the physical file size for the specified file to the current position of the file pointer."
    },
    "SetEnvironmentVariable": {
        "prototype": "BOOL SetEnvironmentVariableW(\n  LPCWSTR lpName,\n  LPCWSTR lpValue\n);",
        "comment": "Sets the contents of the specified environment variable for the current process."
    },
    "SetErrorMode": {
        "prototype": "UINT SetErrorMode(\n  UINT uMode\n);",
        "comment": "Sets the specified event object to the signaled state."
    },
    "SetEvent": {
        "prototype": "BOOL SetEvent(\n  HANDLE hEvent\n);",
        "comment": "Sets the specified event object to the signaled state."
    },
    "SetFileApisToANSI": {
        "prototype": "void SetFileApisToANSI();",
        "comment": "Causes the file I/O functions to use the ANSI character set code page for the current process."
    },
    "SetFileApisToOEM": {
        "prototype": "void SetFileApisToOEM();",
        "comment": "Causes the file I/O functions for the process to use the OEM character set code page."
    },
    "SetFileAttributes": {
        "prototype": "BOOL SetFileAttributesW(\n  [in] LPCWSTR lpFileName,\n  [in] DWORD   dwFileAttributes\n);",
        "comment": "Sets the attributes for a file or directory."
    },
    "SetFileInformationByHandle": {
        "prototype": "BOOL SetFileInformationByHandle(\n  [in] HANDLE                    hFile,\n  [in] FILE_INFO_BY_HANDLE_CLASS FileInformationClass,\n  [in] LPVOID                    lpFileInformation,\n  [in] DWORD                     dwBufferSize\n);",
        "comment": "Sets the file information for the specified file."
    },
    "SetFileIoOverlappedRange": {
        "prototype": "BOOL SetFileIoOverlappedRange(\n  [in] HANDLE FileHandle,\n  [in] PUCHAR OverlappedRangeStart,\n  [in] ULONG  Length\n);",
        "comment": "Associates a virtual address range with the specified file handle. This indicates that the kernel should optimize any further asynchronous I/O requests with overlapped structures inside this range. The overlapped range is locked in memory, and then unlocked when the file is closed. After a range is associated with a file handle, it cannot be disassociated."
    },
    "SetFilePointer": {
        "prototype": "DWORD SetFilePointer(\n  HANDLE hFile,\n  LONG   lDistanceToMove,\n  PLONG  lpDistanceToMoveHigh,\n  DWORD  dwMoveMethod\n);",
        "comment": "Moves the file pointer of the specified file."
    },
    "SetFilePointerEx": {
        "prototype": "BOOL SetFilePointerEx(\n  HANDLE         hFile,\n  LARGE_INTEGER  liDistanceToMove,\n  PLARGE_INTEGER lpNewFilePointer,\n  DWORD          dwMoveMethod\n);",
        "comment": "Moves the file pointer of the specified file."
    },
    "SetFileShortName": {
        "prototype": "BOOL SetFileShortNameW(\n  HANDLE  hFile,\n  LPCWSTR lpShortName);",
        "comment": "Sets the short name for the specified file. The file must be on an NTFS file system volume."
    },
    "SetFileValidData": {
        "prototype": "BOOL SetFileValidData(\n  [in] HANDLE   hFile,\n  [in] LONGLONG ValidDataLength\n);",
        "comment": "Sets the valid data length of the specified file. This function is useful in very limited scenarios."
    },
    "SetFirmwareEnvironmentVariable": {
        "prototype": "BOOL SetFirmwareEnvironmentVariableW(\n  LPCWSTR lpName,\n  LPCWSTR lpGuid,\n  PVOID   pValue,\n  DWORD   nSize\n);",
        "comment": "Sets the value of the specified firmware environment variable."
    },
    "SetFirmwareEnvironmentVariableEx": {
        "prototype": "BOOL SetFirmwareEnvironmentVariableExW(\n  LPCWSTR lpName,\n  LPCWSTR lpGuid,\n  PVOID   pValue,\n  DWORD   nSize,\n  DWORD   dwAttributes\n);",
        "comment": "Sets the value of the specified firmware environment variable and the attributes that indicate how this variable is stored and maintained.",
        "minimumWindowsVersion": "WIN8"
    },
    "SetFocus": {
        "prototype": "HWND SetFocus(\n  HWND hWnd\n);",
        "comment": "Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue."
    },
    "SetForegroundWindow": {
        "prototype": "BOOL SetForegroundWindow(\n  HWND hWnd\n);",
        "comment": "Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads."
    },
    "SetForm": {
        "prototype": "BOOL SetFormW(\n  _In_ HANDLE hPrinter,\n  _In_ LPTSTR pFormName,\n  _In_ DWORD  Level,\n  _In_ LPTSTR pForm\n);",
        "comment": "The SetForm function sets the form information for the specified printer."
    },
    "SetGestureConfig": {
        "prototype": "BOOL SetGestureConfig(\n  HWND           hwnd,\n  DWORD          dwReserved,\n  UINT           cIDs,\n  PGESTURECONFIG pGestureConfig,\n  UINT           cbSize\n);",
        "comment": "Configures the messages that are sent from a window for Windows Touch gestures."
    },
    "SetHandleInformation": {
        "prototype": "BOOL SetHandleInformation(\n  HANDLE hObject,\n  DWORD  dwMask,\n  DWORD  dwFlags\n);",
        "comment": "Sets certain properties of an object handle."
    },
    "SetInformationJobObject": {
        "prototype": "BOOL SetInformationJobObject(\n  [in] HANDLE             hJob,\n  [in] JOBOBJECTINFOCLASS JobObjectInformationClass,\n  [in] LPVOID             lpJobObjectInformation,\n  [in] DWORD              cbJobObjectInformationLength\n);",
        "comment": "Sets limits for a job object."
    },
    "SetIoRateControlInformationJobObject": {
        "prototype": "DWORD SetIoRateControlInformationJobObject(\n  [in] HANDLE                                hJob,\n  [in] JOBOBJECT_IO_RATE_CONTROL_INFORMATION *IoRateControlInfo\n);",
        "comment": "Sets I/O limits on a job object."
    },
    "SetJob": {
        "prototype": "BOOL SetJobW(\n  _In_ HANDLE hPrinter,\n  _In_ DWORD  JobId,\n  _In_ DWORD  Level,\n  _In_ LPBYTE pJob,\n  _In_ DWORD  Command\n);",
        "comment": "The SetJob function pauses, resumes, cancels, or restarts a print job on a specified printer. You can also use the SetJob function to set print job parameters, such as the print job priority and the document name."
    },
    "SetKeyboardState": {
        "prototype": "BOOL SetKeyboardState(\n  LPBYTE lpKeyState\n);",
        "comment": "Copies an array of keyboard key states into the calling thread's keyboard input-state table. This is the same table accessed by the GetKeyboardState and GetKeyState functions. Changes made to this table do not affect keyboard input to any other thread."
    },
    "SetLayeredWindowAttributes": {
        "prototype": "BOOL SetLayeredWindowAttributes(\n  HWND     hwnd,\n  COLORREF crKey,\n  BYTE     bAlpha,\n  DWORD    dwFlags\n);",
        "comment": "Sets the opacity and transparency color key of a layered window."
    },
    "SetMapMode": {
        "prototype": "int SetMapMode(\n  HDC hdc,\n  int iMode\n);",
        "comment": "The SetMapMode function sets the mapping mode of the specified device context. The mapping mode defines the unit of measure used to transform page-space units into device-space units, and also defines the orientation of the device's x and y axes."
    },
    "SetMenu": {
        "prototype": "BOOL SetMenu(\n  [in]           HWND  hWnd,\n  [in, optional] HMENU hMenu\n);",
        "comment": "Assigns a new menu to the specified window."
    },
    "SetMenuDefaultItem": {
        "prototype": "BOOL SetMenuDefaultItem(\n  [in] HMENU hMenu,\n  [in] UINT  uItem,\n  [in] UINT  fByPos\n);",
        "comment": "Sets the default menu item for the specified menu."
    },
    "SetMenuInfo": {
        "prototype": "BOOL SetMenuInfo(\n  HMENU       hmenu,\n  LPCMENUINFO lpmi\n);",
        "comment": "Sets information for a specified menu."
    },
    "SetMenuItemBitmaps": {
        "prototype": "BOOL SetMenuItemBitmaps(\n  HMENU   hMenu,\n  UINT    uPosition,\n  UINT    uFlags,\n  HBITMAP hBitmapUnchecked,\n  HBITMAP hBitmapChecked\n);",
        "comment": "Associates the specified bitmap with a menu item. Whether the menu item is selected or clear, the system displays the appropriate bitmap next to the menu item."
    },
    "SetMenuItemInfo": {
        "prototype": "BOOL SetMenuItemInfoW(\n  HMENU            hmenu,\n  UINT             item,\n  BOOL             fByPositon,\n  LPCMENUITEMINFOW lpmii\n);",
        "comment": "Changes information about a menu item."
    },
    "SetMessageExtraInfo": {
        "prototype": "LPARAM SetMessageExtraInfo(\n  LPARAM lParam\n);",
        "comment": "Sets the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue. An application can use the GetMessageExtraInfo function to retrieve a thread's extra message information."
    },
    "SetMonitorBrightness": {
        "prototype": "_BOOL SetMonitorBrightness(\n  HANDLE hMonitor,\n  DWORD  dwNewBrightness\n);",
        "comment": "Sets a monitor's brightness value. Increasing the brightness value makes the display on the monitor brighter, and decreasing it makes the display dimmer."
    },
    "SetMonitorColorTemperature": {
        "prototype": "_BOOL SetMonitorColorTemperature(\n  HANDLE               hMonitor,\n  MC_COLOR_TEMPERATURE ctCurrentColorTemperature\n);",
        "comment": "Sets a monitor's color temperature."
    },
    "SetMonitorContrast": {
        "prototype": "_BOOL SetMonitorContrast(\n  HANDLE hMonitor,\n  DWORD  dwNewContrast\n);",
        "comment": "Sets a monitor's contrast value."
    },
    "SetMonitorDisplayAreaPosition": {
        "prototype": "_BOOL SetMonitorDisplayAreaPosition(\n  HANDLE           hMonitor,\n  MC_POSITION_TYPE ptPositionType,\n  DWORD            dwNewPosition\n);",
        "comment": "Sets the horizontal or vertical position of a monitor's display area. Increasing the horizontal position moves the display area toward the right side of the screen; decreasing it moves the display area toward the left. Increasing the vertical position moves the display area toward the top of the screen; decreasing it moves the display area toward the bottom."
    },
    "SetMonitorDisplayAreaSize": {
        "prototype": "_BOOL SetMonitorDisplayAreaSize(\n  HANDLE       hMonitor,\n  MC_SIZE_TYPE stSizeType,\n  DWORD        dwNewDisplayAreaWidthOrHeight\n);",
        "comment": "Sets the width or height of a monitor's display area."
    },
    "SetMonitorRedGreenOrBlueDrive": {
        "prototype": "_BOOL SetMonitorRedGreenOrBlueDrive(\n  HANDLE        hMonitor,\n  MC_DRIVE_TYPE dtDriveType,\n  DWORD         dwNewDrive\n);",
        "comment": "Sets a monitor's red, green, or blue drive value."
    },
    "SetMonitorRedGreenOrBlueGain": {
        "prototype": "_BOOL SetMonitorRedGreenOrBlueGain(\n  HANDLE       hMonitor,\n  MC_GAIN_TYPE gtGainType,\n  DWORD        dwNewGain\n);",
        "comment": "Sets a monitor's red, green, or blue gain value."
    },
    "SetNamedPipeHandleState": {
        "prototype": "BOOL SetNamedPipeHandleState(\n  HANDLE  hNamedPipe,\n  LPDWORD lpMode,\n  LPDWORD lpMaxCollectionCount,\n  LPDWORD lpCollectDataTimeout);",
        "comment": "Sets the read mode and the blocking mode of the specified named pipe. If the specified handle is to the client end of a named pipe and if the named pipe server process is on a remote computer, the function can also be used to control local buffering."
    },
    "SetParent": {
        "prototype": "HWND SetParent(\n  HWND hWndChild,\n  HWND hWndNewParent\n);",
        "comment": "Changes the parent window of the specified child window."
    },
    "SetPhysicalCursorPos": {
        "prototype": "BOOL SetPhysicalCursorPos(\n  [in] int X,\n  [in] int Y\n);",
        "comment": "Sets the position of the cursor in physical coordinates."
    },
    "SetPixel": {
        "prototype": "COLORREF SetPixel(\n  HDC      hdc,\n  int      x,\n  int      y,\n  COLORREF color\n);",
        "comment": "The SetPixel function sets the pixel at the specified coordinates to the specified color."
    },
    "SetPort": {
        "prototype": "BOOL SetPortW(\n  _In_ LPTSTR pName,\n  _In_ LPTSTR pPortName,\n  _In_ DWORD  dwLevel,\n  _In_ LPBYTE pPortInfo\n);",
        "comment": "The SetPort function sets the status associated with a printer port."
    },
    "SetPrinter": {
        "prototype": "BOOL SetPrinterW(\n  _In_ HANDLE hPrinter,\n  _In_ DWORD  Level,\n  _In_ LPBYTE pPrinter,\n  _In_ DWORD  Command\n);",
        "comment": "The SetPrinter function sets the data for a specified printer or sets the state of the specified printer by pausing printing, resuming printing, or clearing all print jobs."
    },
    "SetPrinterData": {
        "prototype": "DWORD SetPrinterDataW(\n  _In_ HANDLE hPrinter,\n  _In_ LPTSTR pValueName,\n  _In_ DWORD  Type,\n  _In_ LPBYTE pData,\n  _In_ DWORD  cbData\n);",
        "comment": "The SetPrinterData function sets the configuration data for a printer or print server."
    },
    "SetPrinterDataEx": {
        "prototype": "DWORD SetPrinterDataExW(\n  _In_ HANDLE  hPrinter,\n  _In_ LPCTSTR pKeyName,\n  _In_ LPCTSTR pValueName,\n  _In_ DWORD   Type,\n  _In_ LPBYTE  pData,\n  _In_ DWORD   cbData\n);",
        "comment": "The SetPrinterDataEx function sets the configuration data for a printer or print server. The function stores the configuration data under the printer's registry key."
    },
    "SetProcessAffinityMask": {
        "prototype": "BOOL SetProcessAffinityMask(\n  HANDLE    hProcess,\n  DWORD_PTR dwProcessAffinityMask\n);",
        "comment": "Sets a processor affinity mask for the threads of the specified process."
    },
    "SetProcessDPIAware": {
        "prototype": "BOOL SetProcessDPIAware();",
        "comment": "Sets the process-default DPI awareness to system-DPI awareness."
    },
    "SetProcessDpiAwareness": {
        "prototype": "HRESULT SetProcessDpiAwareness(\n  PROCESS_DPI_AWARENESS value\n);",
        "comment": "Sets the process-default DPI awareness level. This is equivalent to calling SetProcessDpiAwarenessContext with the corresponding DPI_AWARENESS_CONTEXT value.",
        "category": "user32",
        "minimumWindowsVersion": "WIN81"
    },
    "SetProcessDpiAwarenessContext": {
        "prototype": "BOOL SetProcessDpiAwarenessContext(\n  DPI_AWARENESS_CONTEXT value\n);",
        "comment": "It is recommended that you set the process-default DPI awareness via application manifest. See Setting the default DPI awareness for a process for more information. Setting the process-default DPI awareness via API call can lead to unexpected application behavior. Sets the current process to a specified dots per inch (dpi) awareness context. The DPI awareness contexts are from the DPI_AWARENESS_CONTEXT value.",
        "minimumWindowsVersion": "WIN10_RS2"
    },
    "SetProcessPriorityBoost": {
        "prototype": "BOOL SetProcessPriorityBoost(\n  HANDLE hProcess,\n  BOOL   bDisablePriorityBoost\n);",
        "comment": "Disables or enables the ability of the system to temporarily boost the priority of the threads of the specified process."
    },
    "SetProcessWorkingSetSize": {
        "prototype": "BOOL SetProcessWorkingSetSize(\n  HANDLE hProcess,\n  SIZE_T dwMinimumWorkingSetSize,\n  SIZE_T dwMaximumWorkingSetSize\n);",
        "comment": "Sets the minimum and maximum working set sizes for the specified process."
    },
    "SetProp": {
        "prototype": "BOOL SetPropW(\n  HWND    hWnd,\n  LPCWSTR lpString,\n  HANDLE  hData\n);",
        "comment": "Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "SetRect": {
        "prototype": "BOOL SetRect(\n  LPRECT lprc,\n  int    xLeft,\n  int    yTop,\n  int    xRight,\n  int    yBottom\n);",
        "comment": "The SetRect function sets the coordinates of the specified rectangle. This is equivalent to assigning the left, top, right, and bottom arguments to the appropriate members of the RECT structure."
    },
    "SetRectEmpty": {
        "prototype": "BOOL SetRectEmpty(\n  LPRECT lprc\n);",
        "comment": "The SetRectEmpty function creates an empty rectangle in which all coordinates are set to zero."
    },
    "SetScrollInfo": {
        "prototype": "int SetScrollInfo(\n  HWND          hwnd,\n  int           nBar,\n  LPCSCROLLINFO lpsi,\n  BOOL          redraw\n);",
        "comment": "The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested."
    },
    "SetServiceObjectSecurity": {
        "prototype": "BOOL SetServiceObjectSecurity(\n  [in] SC_HANDLE            hService,\n  [in] SECURITY_INFORMATION dwSecurityInformation,\n  [in] PSECURITY_DESCRIPTOR lpSecurityDescriptor\n);",
        "comment": "The SetServiceObjectSecurity function sets the security descriptor of a service object."
    },
    "SetServiceStatus": {
        "prototype": "BOOL SetServiceStatus(\n  [in] SERVICE_STATUS_HANDLE hServiceStatus,\n  [in] LPSERVICE_STATUS      lpServiceStatus\n);",
        "comment": "Updates the service control manager's status information for the calling service."
    },
    "SetStdHandle": {
        "prototype": "BOOL SetStdHandle(\n  _In_ DWORD  nStdHandle,\n  _In_ HANDLE hHandle\n);",
        "comment": "Sets the handle for the specified standard device (standard input, standard output, or standard error)."
    },
    "SetStretchBltMode": {
        "prototype": "int SetStretchBltMode(\n  HDC hdc,\n  int mode\n);",
        "comment": "The SetStretchBltMode function sets the bitmap stretching mode in the specified device context."
    },
    "SetSysColors": {
        "prototype": "BOOL SetSysColors(\n  int            cElements,\n  const INT      *lpaElements,\n  const COLORREF *lpaRgbValues\n);",
        "comment": "Sets the colors for the specified display elements. Display elements are the various parts of a window and the display that appear on the system display screen."
    },
    "SetSystemCursor": {
        "prototype": "BOOL SetSystemCursor(\n  HCURSOR hcur,\n  DWORD   id\n);",
        "comment": "Enables an application to customize the system cursors. It replaces the contents of the system cursor specified by the id parameter with the contents of the cursor specified by the hcur parameter and then destroys hcur."
    },
    "SetTextColor": {
        "prototype": "COLORREF SetTextColor(\n  HDC      hdc,\n  COLORREF color\n);",
        "comment": "The SetTextColor function sets the text color for the specified device context to the specified color."
    },
    "SetThemeAppProperties": {
        "prototype": "void SetThemeAppProperties(\n  DWORD dwFlags\n);",
        "comment": "Sets the flags that determine how visual styles are implemented in the calling application."
    },
    "SetThreadAffinityMask": {
        "prototype": "DWORD_PTR SetThreadAffinityMask(\n  HANDLE    hThread,\n  DWORD_PTR dwThreadAffinityMask\n);",
        "comment": "Sets a processor affinity mask for the specified thread."
    },
    "SetThreadDpiAwarenessContext": {
        "prototype": "DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext(\n  DPI_AWARENESS_CONTEXT dpiContext\n);",
        "comment": "Set the DPI awareness for the current thread to the provided value.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "SetThreadDpiHostingBehavior": {
        "prototype": "DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior(\n  DPI_HOSTING_BEHAVIOR value\n);",
        "comment": "Sets the thread's DPI_HOSTING_BEHAVIOR. This behavior allows windows created in the thread to host child windows with a different DPI_AWARENESS_CONTEXT.",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "SetThreadErrorMode": {
        "prototype": "BOOL SetThreadErrorMode(\n  DWORD   dwNewMode,\n  LPDWORD lpOldMode\n);",
        "comment": "Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them."
    },
    "SetThreadExecutionState": {
        "prototype": "EXECUTION_STATE SetThreadExecutionState(\n  EXECUTION_STATE esFlags\n  );",
        "comment": "Enables an application to inform the system that it is in use, thereby preventing the system from entering sleep or turning off the display while the application is running."
    },
    "SetThreadToken": {
        "prototype": "BOOL SetThreadToken(\n  PHANDLE Thread,\n  HANDLE  Token\n);",
        "comment": "The SetThreadToken function assigns an impersonation token to a thread. The function can also cause a thread to stop using an impersonation token."
    },
    "SetThreadUILanguage": {
        "prototype": "LANGID SetThreadUILanguage(\n  LANGID LangId\n);",
        "comment": "Sets the user interface language for the current thread."
    },
    "SetTimer": {
        "prototype": "UINT_PTR SetTimer(\n  HWND      hWnd,\n  UINT_PTR  nIDEvent,\n  UINT      uElapse,\n  TIMERPROC lpTimerFunc\n);",
        "comment": "Creates a timer with the specified time-out value."
    },
    "SetupComm": {
        "prototype": "BOOL SetupComm(\n  HANDLE hFile,\n  DWORD  dwInQueue,\n  DWORD  dwOutQueue\n);",
        "comment": "Initializes the communications parameters for a specified communications device."
    },
    "SetupDiDestroyDeviceInfoList": {
        "prototype": "BOOL SetupDiDestroyDeviceInfoList(\n  HDEVINFO DeviceInfoSet\n);",
        "comment": "The SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory."
    },
    "SetupDiEnumDeviceInfo": {
        "prototype": "BOOL SetupDiEnumDeviceInfo(\n  HDEVINFO         DeviceInfoSet,\n  DWORD            MemberIndex,\n  PSP_DEVINFO_DATA DeviceInfoData\n);",
        "comment": "The SetupDiEnumDeviceInfo function returns a SP_DEVINFO_DATA structure that specifies a device information element in a device information set."
    },
    "SetupDiEnumDeviceInterfaces": {
        "prototype": "BOOL SetupDiEnumDeviceInterfaces(\n  [in]           HDEVINFO                  DeviceInfoSet,\n  [in, optional] PSP_DEVINFO_DATA          DeviceInfoData,\n  [in]           const GUID                *InterfaceClassGuid,\n  [in]           DWORD                     MemberIndex,\n  [out]          PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData\n);",
        "comment": "The SetupDiEnumDeviceInterfaces function enumerates the device interfaces that are contained in a device information set."
    },
    "SetupDiGetClassDevs": {
        "prototype": "HDEVINFO SetupDiGetClassDevsW(\n  const GUID *ClassGuid,\n  PCWSTR     Enumerator,\n  HWND       hwndParent,\n  DWORD      Flags\n);",
        "comment": "The SetupDiGetClassDevs function returns a handle to a device information set that contains requested device information elements for a local computer."
    },
    "SetupDiGetDeviceInstanceId": {
        "prototype": "BOOL SetupDiGetDeviceInstanceIdW(\n  [in]            HDEVINFO         DeviceInfoSet,\n  [in]            PSP_DEVINFO_DATA DeviceInfoData,\n  [out, optional] PWSTR            DeviceInstanceId,\n  [in]            DWORD            DeviceInstanceIdSize,\n  [out, optional] PDWORD           RequiredSize\n);",
        "comment": "The SetupDiGetDeviceInstanceId function retrieves the device instance ID that is associated with a device information element."
    },
    "SetupDiGetDeviceInterfaceDetail": {
        "prototype": "BOOL SetupDiGetDeviceInterfaceDetailW(\n  [in]            HDEVINFO                           DeviceInfoSet,\n  [in]            PSP_DEVICE_INTERFACE_DATA          DeviceInterfaceData,\n  [out, optional] PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData,\n  [in]            DWORD                              DeviceInterfaceDetailDataSize,\n  [out, optional] PDWORD                             RequiredSize,\n  [out, optional] PSP_DEVINFO_DATA                   DeviceInfoData\n);",
        "comment": "The SetupDiGetDeviceInterfaceDetail function returns details about a device interface."
    },
    "SetupDiGetDeviceRegistryProperty": {
        "prototype": "BOOL SetupDiGetDeviceRegistryPropertyW(\n  [in]            HDEVINFO         DeviceInfoSet,\n  [in]            PSP_DEVINFO_DATA DeviceInfoData,\n  [in]            DWORD            Property,\n  [out, optional] PDWORD           PropertyRegDataType,\n  [out, optional] PBYTE            PropertyBuffer,\n  [in]            DWORD            PropertyBufferSize,\n [out, optional] PDWORD           RequiredSize\n);",
        "comment": "The SetupDiGetDeviceRegistryProperty function retrieves a specified Plug and Play device property."
    },
    "SetupDiOpenDevRegKey": {
        "prototype": "HKEY SetupDiOpenDevRegKey(\n  HDEVINFO         DeviceInfoSet,\n  PSP_DEVINFO_DATA DeviceInfoData,\n  DWORD            Scope,\n  DWORD            HwProfile,\n  DWORD            KeyType,\n  REGSAM           samDesired\n);",
        "comment": "The SetupDiOpenDevRegKey function opens a registry key for device-specific configuration information."
    },
    "SetUserObjectInformation": {
        "prototype": "BOOL SetUserObjectInformationW(\n  HANDLE hObj,\n  int    nIndex,\n  PVOID  pvInfo,\n  DWORD  nLength\n);",
        "comment": "Sets information about the specified window station or desktop object."
    },
    "SetViewportExtEx": {
        "prototype": "BOOL SetViewportExtEx(\n  HDC    hdc,\n  int    x,\n  int    y,\n  LPSIZE lpsz\n);",
        "comment": "The SetViewportExtEx function sets the horizontal and vertical extents of the viewport for a device context by using the specified values."
    },
    "SetViewportOrgEx": {
        "prototype": "BOOL SetViewportOrgEx(\n  HDC     hdc,\n  int     x,\n  int     y,\n  LPPOINT lppt\n);",
        "comment": "The SetViewportOrgEx function specifies which device point maps to the window origin (0,0)."
    },
    "SetVolumeLabel": {
        "prototype": "BOOL SetVolumeLabelW(\n  LPCWSTR lpRootPathName,\n  LPCWSTR lpVolumeName);",
        "comment": "Sets the label of a file system volume."
    },
    "SetWindowDisplayAffinity": {
        "prototype": "BOOL SetWindowDisplayAffinity(\n  HWND  hWnd,\n  DWORD dwAffinity\n);",
        "comment": "Specifies where the content of the window can be displayed."
    },
    "SetWindowExtEx": {
        "prototype": "BOOL SetWindowExtEx(\n  HDC    hdc,\n  int    x,\n  int    y,\n  LPSIZE lpsz\n);",
        "comment": "The SetWindowExtEx function sets the horizontal and vertical extents of the window for a device context by using the specified values."
    },
    "SetWindowLongPtr": {
        "prototype": "LONG_PTR SetWindowLongPtrW(\n  HWND     hWnd,\n  int      nIndex,\n  LONG_PTR dwNewLong\n);",
        "comment": "Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory."
    },
    "SetWindowPlacement": {
        "prototype": "BOOL SetWindowPlacement(\n  HWND                  hWnd,\n  const WINDOWPLACEMENT *lpwndpl\n);",
        "comment": "Sets the show state and the restored, minimized, and maximized positions of the specified window."
    },
    "SetWindowPos": {
        "prototype": "BOOL SetWindowPos(\n  HWND hWnd,\n  HWND hWndInsertAfter,\n  int  X,\n  int  Y,\n  int  cx,\n  int  cy,\n  UINT uFlags\n);",
        "comment": "Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order."
    },
    "SetWindowRgn": {
        "prototype": "int SetWindowRgn(\n  HWND hWnd,\n  HRGN hRgn,\n  BOOL bRedraw\n);",
        "comment": "The SetWindowRgn function sets the window region of a window. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region"
    },
    "SetWindowsHookEx": {
        "prototype": "HHOOK SetWindowsHookExW(\n  int       idHook,\n  HOOKPROC  lpfn,\n  HINSTANCE hmod,\n  DWORD     dwThreadId\n);",
        "comment": "Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread."
    },
    "SetWindowSubclass": {
        "prototype": "BOOL SetWindowSubclass(\n  HWND         hWnd,\n  SUBCLASSPROC pfnSubclass,\n  UINT_PTR     uIdSubclass,\n  DWORD_PTR    dwRefData\n);",
        "comment": "Installs or updates a window subclass callback."
    },
    "SetWindowText": {
        "prototype": "BOOL SetWindowTextW(\n  HWND    hWnd,\n  LPCWSTR lpString\n);",
        "comment": "Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application."
    },
    "SetWindowTheme": {
        "prototype": "HRESULT SetWindowTheme(\n  HWND    hwnd,\n  LPCWSTR pszSubAppName,\n  LPCWSTR pszSubIdList\n);",
        "comment": "Causes a window to use a different set of visual style information than its class normally uses."
    },
    "SetWindowThemeAttribute": {
        "prototype": "HRESULT SetWindowThemeAttribute(\n  [in] HWND                     hwnd,\n       WINDOWTHEMEATTRIBUTETYPE eAttribute,\n  [in] PVOID                    pvAttribute,\n  [in] DWORD                    cbAttribute\n);",
        "comment": "Sets attributes to control how visual styles are applied to a specified window."
    },
    "SHCreateItemFromParsingName": {
        "prototype": "SHSTDAPI SHCreateItemFromParsingName(\n  PCWSTR   pszPath,\n  IBindCtx *pbc,\n  REFIID   riid,\n  void     **ppv\n);",
        "comment": "Creates and initializes a Shell item object from a parsing name."
    },
    "SHCreateMemStream": {
        "prototype": "IStream* SHCreateMemStream(\n  [in, optional] const BYTE *pInit,\n  [in]           UINT       cbInit\n);",
        "comment": "Creates a memory stream using a similar process to CreateStreamOnHGlobal.",
        "category": "shell32"
    },
    "Shell_NotifyIcon": {
        "prototype": "BOOL Shell_NotifyIconW(\n  DWORD dwMessage,\n  NOTIFYICONDATA *lpData\n);",
        "comment": "Sends a message to the taskbar's status area."
    },
    "ShellAbout": {
        "prototype": "INT ShellAboutW(\n  HWND    hWnd,\n  LPCWSTR szApp,\n  LPCWSTR szOtherStuff,\n  HICON   hIcon\n);",
        "comment": "Displays a ShellAbout dialog box."
    },
    "ShellExecute": {
        "prototype": "HINSTANCE ShellExecuteW(\n  HWND    hwnd,\n  LPCWSTR lpOperation,\n  LPCWSTR lpFile,\n  LPCWSTR lpParameters,\n  LPCWSTR lpDirectory,\n  INT     nShowCmd\n);",
        "comment": "Performs an operation on a specified file."
    },
    "ShellExecuteEx": {
        "prototype": "BOOL ShellExecuteExW(\n  SHELLEXECUTEINFOW *pExecInfo\n);",
        "comment": "Performs an operation on a specified file."
    },
    "SHEmptyRecycleBin": {
        "prototype": "SHSTDAPI SHEmptyRecycleBinW(\n  HWND    hwnd,\n  LPCWSTR pszRootPath,\n  DWORD   dwFlags\n);",
        "comment": "Empties the Recycle Bin on the specified drive."
    },
    "SHFileOperation": {
        "prototype": "int SHFileOperationW(\n  LPSHFILEOPSTRUCTW lpFileOp\n);",
        "comment": "Copies, moves, renames, or deletes a file system object."
    },
    "SHFreeNameMappings": {
        "prototype": "void SHFreeNameMappings(\n  HANDLE hNameMappings\n);",
        "comment": "Frees a file name mapping object that was retrieved by the SHFileOperation function."
    },
    "SHGetDesktopFolder": {
        "prototype": "SHSTDAPI SHGetDesktopFolder(\n  IShellFolder **ppshf\n);",
        "comment": "Retrieves the IShellFolder interface for the desktop folder, which is the root of the Shell's namespace."
    },
    "SHGetDiskFreeSpaceEx": {
        "prototype": "BOOL SHGetDiskFreeSpaceExW(\n  LPCWSTR        pszDirectoryName,\n  ULARGE_INTEGER *pulFreeBytesAvailableToCaller,\n  ULARGE_INTEGER *pulTotalNumberOfBytes,\n  ULARGE_INTEGER *pulTotalNumberOfFreeBytes\n);",
        "comment": "Retrieves disk space information for a disk volume."
    },
    "SHGetDriveMedia": {
        "prototype": "HRESULT SHGetDriveMedia(\n  PCWSTR pszDrive,\n  DWORD  *pdwMediaContent\n);",
        "comment": "Returns the type of media that is in the given drive."
    },
    "SHGetFileInfo": {
        "prototype": "DWORD_PTR SHGetFileInfoW(\n  LPCWSTR     pszPath,\n  DWORD       dwFileAttributes,\n  SHFILEINFOW *psfi,\n  UINT        cbFileInfo,\n  UINT        uFlags\n);",
        "comment": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root."
    },
    "SHGetFolderPath": {
        "prototype": "SHFOLDERAPI SHGetFolderPathW(\n  HWND   hwnd,\n  int    csidl,\n  HANDLE hToken,\n  DWORD  dwFlags,\n  LPWSTR pszPath\n);",
        "comment": "Gets the path of a folder identified by a CSIDL value."
    },
    "SHGetKnownFolderPath": {
        "prototype": "HRESULT SHGetKnownFolderPath(\n  REFKNOWNFOLDERID rfid,\n  DWORD            dwFlags,\n  HANDLE           hToken,\n  PWSTR            *ppszPath\n);",
        "comment": "Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID."
    },
    "SHGetLocalizedName": {
        "prototype": "SHSTDAPI SHGetLocalizedName(\n  [in]  PCWSTR pszPath,\n  [out] PWSTR  pszResModule,\n        UINT   cch,\n  [out] int    *pidsRes\n);",
        "comment": "Retrieves the localized name of a file in a Shell folder."
    },
    "ShowCaret": {
        "prototype": "BOOL ShowCaret(\n  HWND hWnd\n);",
        "comment": "Makes the caret visible on the screen at the caret's current position. When the caret becomes visible, it begins flashing automatically."
    },
    "ShowCursor": {
        "prototype": "int ShowCursor(\n  BOOL bShow\n);",
        "comment": "Displays or hides the cursor."
    },
    "ShowOwnedPopups": {
        "prototype": "BOOL ShowOwnedPopups(\n  HWND hWnd,\n  BOOL fShow\n);",
        "comment": "Shows or hides all pop-up windows owned by the specified window."
    },
    "ShowWindow": {
        "prototype": "BOOL ShowWindow(\n  HWND hWnd,\n  int  nCmdShow\n);",
        "comment": "Sets the specified window's show state."
    },
    "ShowWindowAsync": {
        "prototype": "BOOL ShowWindowAsync(\n  HWND hWnd,\n  int  nCmdShow\n);",
        "comment": "Sets the show state of a window without waiting for the operation to complete."
    },
    "SHQueryRecycleBin": {
        "prototype": "SHSTDAPI SHQueryRecycleBinW(\n  LPCWSTR         pszRootPath,\n  LPSHQUERYRBINFO pSHQueryRBInfo\n);",
        "comment": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive."
    },
    "shutdown": {
        "prototype": "int shutdown(\n  SOCKET s,\n  int    how\n);",
        "comment": "The shutdown function disables sends or receives on a socket.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "SizeofResource": {
        "prototype": "DWORD SizeofResource(\n  [in, optional] HMODULE hModule,\n  [in]           HRSRC   hResInfo\n);",
        "comment": "Retrieves the size, in bytes, of the specified resource."
    },
    "SkipPointerFrameMessages": {
        "prototype": "BOOL SkipPointerFrameMessages(\n  [in] UINT32 pointerId\n);",
        "comment": "Determines which pointer input frame generated the most recently retrieved message for the specified pointer and discards any queued (unretrieved) pointer input messages generated from the same pointer input frame. If an application has retrieved information for an entire frame using the GetPointerFrameInfo function, the GetPointerFrameInfoHistory function or one of their type-specific variants, it can use this function to avoid retrieving and discarding remaining messages from that frame one by one.",
        "minimumWindowsVersion": "WIN8"
    },
    "Sleep": {
        "prototype": "void Sleep(\n  DWORD dwMilliseconds\n);",
        "comment": "Suspends the execution of the current thread until the time-out interval elapses."
    },
    "SleepEx": {
        "prototype": "DWORD SleepEx(\n  DWORD dwMilliseconds,\n  BOOL  bAlertable\n);",
        "comment": "Suspends the current thread until the specified condition is met. Execution resumes when one of the following occurs: (i) an I/O completion callback function is called; (ii) an asynchronous procedure call (APC) is queued to the thread; (iii) the time-out interval elapses."
    },
    "socket": {
        "prototype": "SOCKET socket(\n  int af,\n  int type,\n  int protocol\n);",
        "comment": "The socket function creates a socket that is bound to a specific transport service provider.",
        "category": "winsock",
        "minimumWindowsVersion": "WIN81"
    },
    "SoundSentry": {
        "prototype": "BOOL SoundSentry();",
        "comment": "Triggers a visual signal to indicate that a sound is playing."
    },
    "StartDocPrinter": {
        "prototype": "DWORD StartDocPrinterW(\n  _In_ HANDLE hPrinter,\n  _In_ DWORD  Level,\n  _In_ LPBYTE pDocInfo\n);",
        "comment": "The StartDocPrinter function notifies the print spooler that a document is to be spooled for printing."
    },
    "StartPagePrinter": {
        "prototype": "BOOL StartPagePrinter(\n  _In_ HANDLE hPrinter\n);",
        "comment": "The StartPagePrinter function notifies the spooler that a page is about to be printed on the specified printer.",
        "category": "winspool"
    },
    "StartService": {
        "prototype": "BOOL StartServiceW(\n  [in]           SC_HANDLE hService,\n  [in]           DWORD     dwNumServiceArgs,\n  [in, optional] LPCWSTR   *lpServiceArgVectors\n);",
        "comment": "Starts a service."
    },
    "StartServiceCtrlDispatcher": {
        "prototype": "BOOL StartServiceCtrlDispatcherW(\n  [in] const SERVICE_TABLE_ENTRYW *lpServiceStartTable\n);",
        "comment": "Connects the main thread of a service process to the service control manager, which causes the thread to be the service control dispatcher thread for the calling process."
    },
    "StretchBlt": {
        "prototype": "BOOL StretchBlt(\n  HDC   hdcDest,\n  int   xDest,\n  int   yDest,\n  int   wDest,\n  int   hDest,\n  HDC   hdcSrc,\n  int   xSrc,\n  int   ySrc,\n  int   wSrc,\n  int   hSrc,\n  DWORD rop\n);",
        "comment": "The StretchBlt function copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary. The system stretches or compresses the bitmap according to the stretching mode currently set in the destination device context."
    },
    "StretchDIBits": {
        "prototype": "int StretchDIBits(\n  HDC              hdc,\n  int              xDest,\n  int              yDest,\n  int              DestWidth,\n  int              DestHeight,\n  int              xSrc,\n  int              ySrc,\n  int              SrcWidth,\n  int              SrcHeight,\n  const VOID       *lpBits,\n  const BITMAPINFO *lpbmi,\n  UINT             iUsage,\n  DWORD            rop\n);",
        "comment": "The StretchDIBits function copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle. If the destination rectangle is larger than the source rectangle, this function stretches the rows and columns of color data to fit the destination rectangle. If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns by using the specified raster operation."
    },
    "StringFromCLSID": {
        "prototype": "HRESULT StringFromCLSID(\n  REFCLSID rclsid,\n  LPOLESTR *lplpsz\n);",
        "comment": "Converts a CLSID into a string of printable characters. Different CLSIDs always convert to different strings."
    },
    "StringFromGUID2": {
        "prototype": "int StringFromGUID2(\n  REFGUID  rguid,\n  LPOLESTR lpsz,\nint      cchMax\n);",
        "comment": "Converts a globally unique identifier (GUID) into a string of printable characters."
    },
    "StringFromIID": {
        "prototype": "HRESULT StringFromIID(\n  REFIID   rclsid,\n  LPOLESTR *lplpsz\n);",
        "comment": "Converts an interface identifier into a string of printable characters."
    },
    "StrokeAndFillPath": {
        "prototype": "BOOL StrokeAndFillPath(\n  HDC hdc\n);",
        "comment": "The StrokeAndFillPath function closes any open figures in a path, strokes the outline of the path by using the current pen, and fills its interior by using the current brush."
    },
    "StrokePath": {
        "prototype": "BOOL StrokePath(\n  HDC hdc\n);",
        "comment": "The StrokePath function renders the specified path by using the current pen."
    },
    "SubtractRect": {
        "prototype": "BOOL SubtractRect(\n  LPRECT     lprcDst,\n  const RECT *lprcSrc1,\n  const RECT *lprcSrc2\n);",
        "comment": "The SubtractRect function determines the coordinates of a rectangle formed by subtracting one rectangle from another."
    },
    "SwapMouseButton": {
        "prototype": "BOOL SwapMouseButton(\n  BOOL fSwap\n);",
        "comment": "Reverses or restores the meaning of the left and right mouse buttons."
    },
    "SwitchDesktop": {
        "prototype": "BOOL SwitchDesktop(\n  HDESK hDesktop\n);",
        "comment": "Makes the specified desktop visible and activates it. This enables the desktop to receive input from the user. The calling process must have DESKTOP_SWITCHDESKTOP access to the desktop for the SwitchDesktop function to succeed."
    },
    "SwitchToThisWindow": {
        "prototype": "void SwitchToThisWindow(\n  HWND hwnd,\n  BOOL fUnknown\n);",
        "comment": "Switches focus to the specified window and brings it to the foreground."
    },
    "SymCleanup": {
        "prototype": "BOOL SymCleanup(\n  HANDLE hProcess);",
        "comment": "Deallocates all resources associated with the process handle."
    },
    "SymEnumSymbols": {
        "prototype": "BOOL SymEnumSymbolsW(\n  HANDLE                          hProcess,\n  ULONG64                         BaseOfDll,\n  PCWSTR                          Mask,\n  PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,\n  PVOID                           UserContext\n);",
        "comment": "Enumerates all symbols in a process."
    },
    "SymFromAddr": {
        "prototype": "BOOL SymFromAddrW(\n  HANDLE        hProcess,\n  DWORD64       Address,\n  PDWORD64      Displacement,\n  PSYMBOL_INFOW Symbol\n);",
        "comment": "Retrieves symbol information for the specified address."
    },
    "SymFromToken": {
        "prototype": "BOOL SymFromTokenW(\n  HANDLE        hProcess,\n  DWORD64       Base,\n  DWORD         Token,\n  PSYMBOL_INFOW Symbol\n);",
        "comment": "Retrieves symbol information for the specified managed code token."
    },
    "SymGetExtendedOption": {
        "prototype": "BOOL SymGetExtendedOption(\n  IMAGEHLP_EXTENDED_OPTIONS option\n);",
        "comment": "Gets whether the specified extended symbol option on or off.",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "SymInitialize": {
        "prototype": "BOOL SymInitializeW(\n  HANDLE hProcess,\n  PCWSTR UserSearchPath,\n  BOOL   fInvadeProcess\n);",
        "comment": "Initializes the symbol handler for a process."
    },
    "SymLoadModuleEx": {
        "prototype": "DWORD64 SymLoadModuleExW(\n  HANDLE        hProcess,\n  HANDLE        hFile,\n  PCWSTR        ImageName,\n  PCWSTR        ModuleName,\n  DWORD64       BaseOfDll,\n  DWORD         DllSize,\n  PMODLOAD_DATA Data,\n  DWORD         Flags);",
        "comment": "Loads the symbol table for the specified module."
    },
    "SymSetExtendedOption": {
        "prototype": "BOOL SymSetExtendedOption(\n  IMAGEHLP_EXTENDED_OPTIONS option,\n  BOOL                      value\n);",
        "comment": "Turns the specified extended symbol option on or off.",
        "minimumWindowsVersion": "WIN10_RS4"
    },
    "SymSetOptions": {
        "prototype": "DWORD SymSetOptions(\n  DWORD SymOptions\n);",
        "comment": "Sets the options mask."
    },
    "SymSetParentWindow": {
        "prototype": "BOOL SymSetParentWindow(\n  HWND hwnd\n);",
        "comment": "Sets the window that the caller will use to display a user interface."
    },
    "SymSetScopeFromAddr": {
        "prototype": "BOOL SymSetScopeFromAddr(\n  HANDLE  hProcess,\n  ULONG64 Address\n);",
        "comment": "Sets the local scope to the symbol that matches the specified address."
    },
    "SymSetScopeFromIndex": {
        "prototype": "BOOL SymSetScopeFromIndex(\n  HANDLE  hProcess,\n  ULONG64 BaseOfDll,\n  DWORD   Index\n);",
        "comment": "Sets the local scope to the symbol that matches the specified index."
    },
    "SymSetScopeFromInlineContext": {
        "prototype": "BOOL SymSetScopeFromInlineContext(\n  HANDLE  hProcess,\n  ULONG64 Address,\n  ULONG   InlineContext\n);",
        "comment": "Sets the local scope to the symbol that matches the specified address and inline context.",
        "minimumWindowsVersion": "WIN8"
    },
    "SymSetSearchPath": {
        "prototype": "BOOL SymSetSearchPathW(\n  HANDLE hProcess,\n  PCWSTR SearchPath\n);",
        "comment": "Sets the search path for the specified process."
    },
    "SymUnloadModule": {
        "prototype": "BOOL SymUnloadModule(\n  HANDLE hProcess,\n  DWORD  BaseOfDll\n);",
        "comment": "Unloads the symbol table."
    },
    "SymUnloadModule64": {
        "prototype": "BOOL SymUnloadModule64(\n  HANDLE  hProcess,\n  DWORD64 BaseOfDll\n);",
        "comment": "Unloads the symbol table."
    },
    "SysAllocString": {
        "prototype": "BSTR SysAllocString(\n  const OLECHAR *psz\n);",
        "comment": "Allocates a new string and copies the passed string into it."
    },
    "SysAllocStringByteLen": {
        "prototype": "BSTR SysAllocStringByteLen(\n  LPCSTR psz,\n  UINT   len\n);",
        "comment": "Takes an ANSI string as input, and returns a BSTR that contains an ANSI string. Does not perform any ANSI-to-Unicode translation."
    },
    "SysAllocStringLen": {
        "prototype": "BSTR SysAllocStringLen(\n  const OLECHAR *strIn,\n  UINT          ui\n);",
        "comment": "Allocates a new string, copies the specified number of characters from the passed string, and appends a null-terminating character."
    },
    "SysFreeString": {
        "prototype": "void SysFreeString(\n  BSTR bstrString\n);",
        "comment": "Deallocates a string allocated previously by SysAllocString, SysAllocStringByteLen, SysReAllocString, SysAllocStringLen, or SysReAllocStringLen."
    },
    "SysReAllocString": {
        "prototype": "INT SysReAllocString(\n  BSTR          *pbstr,\n  const OLECHAR *psz\n);",
        "comment": "Reallocates a previously allocated string to be the size of a second string and copies the second string into the reallocated memory."
    },
    "SysReAllocStringLen": {
        "prototype": "INT SysReAllocStringLen(\n  BSTR          *pbstr,\n  const OLECHAR *psz,\n  UINT  len\n);",
        "comment": "Creates a new BSTR containing a specified number of characters from an old BSTR, and frees the old BSTR."
    },
    "SysReleaseString": {
        "prototype": "void SysReleaseString(\nBSTR bstrString\n);",
        "comment": "Decreases the pinning reference count for the specified string by one. When that count reaches 0, the memory for that string is no longer prevented from being freed."
    },
    "SysStringByteLen": {
        "prototype": "UINT SysStringByteLen(\n  BSTR bstr\n);",
        "comment": "Returns the length (in bytes) of a BSTR."
    },
    "SysStringLen": {
        "prototype": "UINT SysStringLen(\n  BSTR pbstr\n);",
        "comment": "Returns the length of a BSTR."
    },
    "SystemParametersInfo": {
        "prototype": "BOOL SystemParametersInfoW(\n  UINT  uiAction,\n  UINT  uiParam,\n  PVOID pvParam,\n  UINT  fWinIni\n);",
        "comment": "Retrieves or sets the value of one of the system-wide parameters. This function can also update the user profile while setting a parameter."
    },
    "SystemParametersInfoForDpi": {
        "prototype": "BOOL SystemParametersInfoForDpi(\n  UINT  uiAction,\n  UINT  uiParam,\n  PVOID pvParam,\n  UINT  fWinIni,\n  UINT  dpi\n);",
        "comment": "Retrieves the value of one of the system-wide parameters, taking into account the provided DPI value.",
        "minimumWindowsVersion": "WIN10_RS1"
    },
    "SystemTimeToFileTime": {
        "prototype": "BOOL SystemTimeToFileTime(\n  const SYSTEMTIME *lpSystemTime,\n  LPFILETIME       lpFileTime\n);",
        "comment": "Converts a system time to file time format. System time is based on Coordinated Universal Time (UTC)."
    },
    "TabbedTextOut": {
        "prototype": "LONG TabbedTextOutW(\n  HDC       hdc,\n  int       x,\n  int       y,\n  LPCWSTR   lpString,\n  int       chCount,\n  int       nTabPositions,\n  const INT *lpnTabStopPositions,\n  int       nTabOrigin\n);",
        "comment": "The TabbedTextOut function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color."
    },
    "TaskDialog": {
        "prototype": "HRESULT TaskDialog(\n  HWND                           hwndOwner,\n  HINSTANCE                      hInstance,\n  PCWSTR                         pszWindowTitle,\n  PCWSTR                         pszMainInstruction,\n  PCWSTR                         pszContent,\n  TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons,\n  PCWSTR                         pszIcon,\n  int                            *pnButton\n);",
        "comment": "The TaskDialog function creates, displays, and operates a task dialog. The task dialog contains application-defined message text and title, icons, and any combination of predefined push buttons. This function does not support the registration of a callback function to receive notifications.",
        "test": false
    },
    "TaskDialogIndirect": {
        "prototype": "HRESULT TaskDialogIndirect(\n  const TASKDIALOGCONFIG *pTaskConfig,\n  int                    *pnButton,\n  int                    *pnRadioButton,\n  BOOL                   *pfVerificationFlagChecked\n);",
        "comment": "The TaskDialogIndirect function creates, displays, and operates a task dialog. The task dialog contains application-defined icons, messages, title, verification check box, command links, push buttons, and radio buttons. This function can register a callback function to receive notification messages.",
        "test": false
    },
    "TerminateJobObject": {
        "prototype": "BOOL TerminateJobObject(\n  [in] HANDLE hJob,\n  [in] UINT   uExitCode\n);",
        "comment": "Terminates all processes currently associated with the job. If the job is nested, this function terminates all processes currently associated with the job and all of its child jobs in the hierarchy."
    },
    "TerminateProcess": {
        "prototype": "BOOL TerminateProcess(\n  HANDLE hProcess,\n  UINT   uExitCode);",
        "comment": "Terminates the specified process and all of its threads."
    },
    "TerminateThread": {
        "prototype": "BOOL TerminateThread(\n  HANDLE hThread,\n  DWORD  dwExitCode\n);",
        "comment": "Terminates a thread."
    },
    "TextOut": {
        "prototype": "BOOL TextOutW(\n  HDC     hdc,\n  int     x,\n  int     y,\n  LPCWSTR lpString,\n  int     c\n);",
        "comment": "The TextOut function writes a character string at the specified location, using the currently selected font, background color, and text color."
    },
    "TileWindows": {
        "prototype": "WORD TileWindows(\n  HWND       hwndParent,\n  UINT       wHow,\n  const RECT *lpRect,\n  UINT       cKids,\n  const HWND *lpKids\n);",
        "comment": "Tiles the specified child windows of the specified parent window."
    },
    "ToAscii": {
        "prototype": "int ToAscii(\n  UINT       uVirtKey,\n  UINT       uScanCode,\n  const BYTE *lpKeyState,\n  LPWORD     lpChar,\n  UINT       uFlags\n);",
        "comment": "Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the keyboard layout handle."
    },
    "ToAsciiEx": {
        "prototype": "int ToAsciiEx(\n  UINT       uVirtKey,\n  UINT       uScanCode,\n  const BYTE *lpKeyState,\n  LPWORD     lpChar,\n  UINT       uFlags,\n  HKL        dwhkl\n);",
        "comment": "Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the input locale identifier."
    },
    "ToUnicode": {
        "prototype": "int ToUnicode(\n  UINT       wVirtKey,\n  UINT       wScanCode,\n  const BYTE *lpKeyState,\n  LPWSTR     pwszBuff,\n  int        cchBuff,\n  UINT       wFlags\n);",
        "comment": "Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters."
    },
    "ToUnicodeEx": {
        "prototype": "int ToUnicodeEx(\n  UINT       wVirtKey,\n  UINT       wScanCode,\n  const BYTE *lpKeyState,\n  LPWSTR     pwszBuff,\n  int        cchBuff,\n  UINT       wFlags,\n  HKL        dwhkl\n);",
        "comment": "Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters."
    },
    "TrackPopupMenu": {
        "prototype": "BOOL TrackPopupMenu(\n  [in]           HMENU      hMenu,\n  [in]           UINT       uFlags,\n  [in]           int        x,\n  [in]           int        y,\n  [in]           int        nReserved,\n  [in]           HWND       hWnd,\n  [in, optional] const RECT *prcRect\n);",
        "comment": "Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen."
    },
    "TrackPopupMenuEx": {
        "prototype": "BOOL TrackPopupMenuEx(\n  HMENU hMenu,\n  UINT uFlags,\n  int x,\n  int y,\n  HWND hwnd,\n  TPMPARAMS *lptpm\n);",
        "comment": "Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen."
    },
    "TransactNamedPipe": {
        "prototype": "BOOL TransactNamedPipe(\n  HANDLE       hNamedPipe,\n  LPVOID       lpInBuffer,\n  DWORD        nInBufferSize,\n  LPVOID       lpOutBuffer,\n  DWORD        nOutBufferSize,\n  LPDWORD      lpBytesRead,\n  LPOVERLAPPED lpOverlapped);",
        "comment": "Combines the functions that write a message to and read a message from the specified named pipe into a single network operation."
    },
    "TranslateAccelerator": {
        "prototype": "int TranslateAcceleratorW(\n  HWND   hWnd,\n  HACCEL hAccTable,\n  LPMSG  lpMsg\n);",
        "comment": "Processes accelerator keys for menu commands. The function translates a WM_KEYDOWN or WM_SYSKEYDOWN message to a WM_COMMAND or WM_SYSCOMMAND message (if there is an entry for the key in the specified accelerator table) and then sends the WM_COMMAND or WM_SYSCOMMAND message directly to the specified window procedure. TranslateAccelerator does not return until the window procedure has processed the message."
    },
    "TranslateMDISysAccel": {
        "prototype": "BOOL TranslateMDISysAccel(\n  HWND  hWndClient,\n  LPMSG lpMsg\n);",
        "comment": "Processes accelerator keystrokes for window menu commands of the multiple-document interface (MDI) child windows associated with the specified MDI client window. The function translates WM_KEYUP and WM_KEYDOWN messages to WM_SYSCOMMAND messages and sends them to the appropriate MDI child windows."
    },
    "TranslateMessage": {
        "prototype": "BOOL TranslateMessage(\n  const MSG *lpMsg\n);",
        "comment": "Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function."
    },
    "TransmitCommChar": {
        "prototype": "BOOL TransmitCommChar(\n  HANDLE hFile,\n  char   cChar\n);",
        "comment": "Transmits a specified character ahead of any pending data in the output buffer of the specified communications device."
    },
    "UnDecorateSymbolName": {
        "prototype": "DWORD UnDecorateSymbolNameW(\n  PCWSTR name,\n  PWSTR  outputString,\n  DWORD  maxStringLength,\n  DWORD  flags\n);",
        "comment": "Undecorates the specified decorated C++ symbol name."
    },
    "UnhookWindowsHookEx": {
        "prototype": "BOOL UnhookWindowsHookEx(\n  HHOOK hhk\n);",
        "comment": "Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function."
    },
    "UnionRect": {
        "prototype": "BOOL UnionRect(\n  LPRECT     lprcDst,\n  const RECT *lprcSrc1,\n  const RECT *lprcSrc2\n);",
        "comment": "The UnionRect function creates the union of two rectangles. The union is the smallest rectangle that contains both source rectangles."
    },
    "UnloadKeyboardLayout": {
        "prototype": "BOOL UnloadKeyboardLayout(\n  HKL hkl\n);",
        "comment": "Unloads an input locale identifier (formerly called a keyboard layout)."
    },
    "UnlockFile": {
        "prototype": "BOOL UnlockFile(\n  [in] HANDLE hFile,\n  [in] DWORD  dwFileOffsetLow,\n  [in] DWORD  dwFileOffsetHigh,\n  [in] DWORD  nNumberOfBytesToUnlockLow,\n  [in] DWORD  nNumberOfBytesToUnlockHigh\n);",
        "comment": "Unlocks a region in an open file. Unlocking a region enables other processes to access the region."
    },
    "UnlockFileEx": {
        "prototype": "BOOL UnlockFileEx(\n  [in]      HANDLE       hFile,\n            DWORD        dwReserved,\n  [in]      DWORD        nNumberOfBytesToUnlockLow,\n  [in]      DWORD        nNumberOfBytesToUnlockHigh,\n  [in, out] LPOVERLAPPED lpOverlapped\n);",
        "comment": "Unlocks a region in the specified file. This function can operate either synchronously or asynchronously."
    },
    "UnregisterClass": {
        "prototype": "BOOL UnregisterClassW(\n  LPCWSTR   lpClassName,\n  HINSTANCE hInstance\n);",
        "comment": "Unregisters a window class, freeing the memory required for the class."
    },
    "UnregisterHotKey": {
        "prototype": "BOOL UnregisterHotKey(\n  HWND hWnd,\n  int  id\n);",
        "comment": "Frees a hot key previously registered by the calling thread."
    },
    "UnregisterPowerSettingNotification": {
        "prototype": "BOOL UnregisterPowerSettingNotification(\n  HPOWERNOTIFY Handle\n);",
        "comment": "Unregisters the power setting notification."
    },
    "UnregisterTouchWindow": {
        "prototype": "BOOL UnregisterTouchWindow(\nHWND hwnd\n);",
        "comment": "Registers a window as no longer being touch-capable."
    },
    "UpdateLayeredWindowIndirect": {
        "prototype": "BOOL UpdateLayeredWindowIndirect(\n  HWND hwnd,\n  const UPDATELAYEREDWINDOWINFO *pULWInfo\n);",
        "comment": "Updates the position, size, shape, content, and translucency of a layered window."
    },
    "UpdateProcThreadAttribute": {
        "prototype": "BOOL UpdateProcThreadAttribute(\n  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,\n  DWORD                        dwFlags,\n  DWORD_PTR                    Attribute,\n  PVOID                        lpValue,\n  SIZE_T                       cbSize,\n  PVOID                        lpPreviousValue,\n  PSIZE_T                      lpReturnSize\n);",
        "comment": "Updates the specified attribute in a list of attributes for process and thread creation."
    },
    "UpdateResource": {
        "prototype": "BOOL UpdateResourceW(\n  HANDLE  hUpdate,\n  LPCWSTR lpType,\n  LPCWSTR lpName,\n  WORD    wLanguage,\n  LPVOID  lpData,\n  DWORD   cb\n);",
        "comment": "Adds, deletes, or replaces a resource in a portable executable (PE) file."
    },
    "UpdateWindow": {
        "prototype": "BOOL UpdateWindow(\n  HWND hWnd\n);",
        "comment": "The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to the window if the window's update region is not empty. The function sends a WM_PAINT message directly to the window procedure of the specified window, bypassing the application queue. If the update region is empty, no message is sent."
    },
    "UserHandleGrantAccess": {
        "prototype": "BOOL UserHandleGrantAccess(\n  [in] HANDLE hUserHandle,\n  [in] HANDLE hJob,\n  [in] BOOL   bGrant\n);",
        "comment": "Grants or denies access to a handle to a User object to a job that has a user-interface restriction. When access is granted, all processes associated with the job can subsequently recognize and use the handle. When access is denied, the processes can no longer use the handle."
    },
    "ValidateRect": {
        "prototype": "BOOL ValidateRect(\n  HWND       hWnd,\n  const RECT *lpRect\n);",
        "comment": "The ValidateRect function validates the client area within a rectangle by removing the rectangle from the update region of the specified window."
    },
    "ValidateRgn": {
        "prototype": "BOOL ValidateRgn(\n  HWND hWnd,\n  HRGN hRgn\n);",
        "comment": "The ValidateRgn function validates the client area within a region by removing the region from the current update region of the specified window."
    },
    "VarBstrCat": {
        "prototype": "HRESULT VarBstrCat(\n  [in]  BSTR   bstrLeft,\n  [in]  BSTR   bstrRight,\n  [out] LPBSTR pbstrResult\n);",
        "comment": "Converts a variant from one type to another."
    },
    "VarBstrCmp": {
        "prototype": "HRESULT VarBstrCmp(\n  [in] BSTR  bstrLeft,\n  [in] BSTR  bstrRight,\n  [in] LCID  lcid,\n  [in] ULONG dwFlags\n);",
        "comment": "Compares two variants of type BSTR."
    },
    "VariantChangeType": {
        "prototype": "HRESULT VariantChangeType(\n  VARIANTARG       *pvargDest,\n  const VARIANTARG *pvarSrc,\n  USHORT           wFlags,\n  VARTYPE          vt\n);",
        "comment": "Converts a variant from one type to another."
    },
    "VariantClear": {
        "prototype": "HRESULT VariantClear(\n  VARIANTARG *pvarg\n);",
        "comment": "Clears a variant."
    },
    "VariantCopy": {
        "prototype": "HRESULT VariantCopy(\n  VARIANTARG       *pvargDest,\n  const VARIANTARG *pvargSrc\n);",
        "comment": "Frees the destination variant and makes a copy of the source variant."
    },
    "VariantInit": {
        "prototype": "void VariantInit(\n  VARIANTARG *pvarg\n);",
        "comment": "Initializes a variant."
    },
    "VariantTimeToDosDateTime": {
        "prototype": "INT VariantTimeToDosDateTime(\n  DOUBLE vtime,\n  USHORT *pwDosDate,\n  USHORT *pwDosTime\n);",
        "comment": "Converts the variant representation of a date and time to MS-DOS date and time values."
    },
    "VariantTimeToSystemTime": {
        "prototype": "INT VariantTimeToSystemTime(\n  DOUBLE       vtime,\n  LPSYSTEMTIME lpSystemTime\n);",
        "comment": "Converts the variant representation of time to system time values."
    },
    "VerFindFile": {
        "prototype": "DWORD VerFindFileW(\n  DWORD   uFlags,\n  LPCWSTR szFileName,\n  LPCWSTR szWinDir,\n  LPCWSTR szAppDir,\n  LPWSTR  szCurDir,\n  PUINT   puCurDirLen,\n  LPWSTR  szDestDir,\n  PUINT   puDestDirLen\n);",
        "comment": "Determines where to install a file based on whether it locates another version of the file in the system. The values VerFindFile returns in the specified buffers are used in a subsequent call to the VerInstallFile function."
    },
    "VerifyVersionInfo": {
        "prototype": "BOOL VerifyVersionInfoW(\n  [in] LPOSVERSIONINFOEXW lpVersionInformation,\n  [in] DWORD              dwTypeMask,\n  [in] DWORDLONG          dwlConditionMask\n);",
        "comment": "Compares a set of operating system version requirements to the corresponding values for the currently running version of the system. This function is subject to manifest-based behavior."
    },
    "VerInstallFile": {
        "prototype": "DWORD VerInstallFileW(\n  DWORD   uFlags,\n  LPCWSTR szSrcFileName,\n  LPCWSTR szDestFileName,\n  LPCWSTR szSrcDir,\n  LPCWSTR szDestDir,\n  LPCWSTR szCurDir,\n  LPWSTR  szTmpFile,\n  PUINT   puTmpFileLen\n);",
        "comment": "Installs the specified file based on information returned from the VerFindFile function. VerInstallFile decompresses the file, if necessary, assigns a unique filename, and checks for errors, such as outdated files."
    },
    "VerLanguageName": {
        "prototype": "DWORD VerLanguageNameW(\n  DWORD  wLang,\n  LPWSTR szLang,\n  DWORD  cchLang\n);",
        "comment": "Retrieves a description string for the language associated with a specified binary Microsoft language identifier."
    },
    "VerQueryValue": {
        "prototype": "BOOL VerQueryValueW(\n  LPCVOID pBlock,\n  LPCWSTR lpSubBlock,\n  LPVOID  *lplpBuffer,\n  PUINT   puLen\n);",
        "comment": "Retrieves specified version information from the specified version-information resource. To retrieve the appropriate resource, before you call VerQueryValue, you must first call the GetFileVersionInfoSize function, and then the GetFileVersionInfo function."
    },
    "VerSetConditionMask": {
        "prototype": "ULONGLONG VerSetConditionMask(  \n[in] ULONGLONG ConditionMask,  \n[in] DWORD     TypeMask,  \n[in] BYTE      Condition\n);",
        "comment": "Sets the bits of a 64-bit value to indicate the comparison operator to use for a specified operating system version attribute. This function is used to build the dwlConditionMask parameter of the VerifyVersionInfo function."
    },
    "VirtualAlloc": {
        "prototype": "LPVOID VirtualAlloc(\n  LPVOID lpAddress,\n  SIZE_T dwSize,\n  DWORD  flAllocationType,\n  DWORD  flProtect\n);",
        "comment": "Reserves, commits, or changes the state of a region of pages in the virtual address space of the calling process. Memory allocated by this function is automatically initialized to zero."
    },
    "VirtualAllocEx": {
        "prototype": "LPVOID VirtualAllocEx(\n  HANDLE hProcess,\n  LPVOID lpAddress,\n  SIZE_T dwSize,\n  DWORD  flAllocationType,\n  DWORD  flProtect\n);",
        "comment": "Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero."
    },
    "VirtualFree": {
        "prototype": "BOOL VirtualFree(\n  LPVOID lpAddress,\n  SIZE_T dwSize,\n  DWORD  dwFreeType\n);",
        "comment": "Releases, decommits, or releases and decommits a region of pages within the virtual address space of the calling process."
    },
    "VirtualFreeEx": {
        "prototype": "BOOL VirtualFreeEx(\n  HANDLE hProcess,\n  LPVOID lpAddress,\n  SIZE_T dwSize,\n  DWORD  dwFreeType\n);",
        "comment": "Releases, decommits, or releases and decommits a region of memory within the virtual address space of a specified process."
    },
    "VirtualLock": {
        "prototype": "BOOL VirtualLock(\n  LPVOID lpAddress,\n  SIZE_T dwSize\n);",
        "comment": "Locks the specified region of the process's virtual address space into physical memory, ensuring that subsequent access to the region will not incur a page fault."
    },
    "VirtualQuery": {
        "prototype": "SIZE_T VirtualQuery(\n  LPCVOID lpAddress,\n  PMEMORY_BASIC_INFORMATION lpBuffer,\n  SIZE_T dwLength\n);",
        "comment": "Retrieves information about a range of pages in the virtual address space of the calling process."
    },
    "VirtualQueryEx": {
        "prototype": "SIZE_T VirtualQueryEx(\n  HANDLE hProcess,\n  LPCVOID lpAddress,\n  PMEMORY_BASIC_INFORMATION lpBuffer,\n  SIZE_T dwLength\n);",
        "comment": "Retrieves information about a range of pages within the virtual address space of a specified process."
    },
    "VirtualUnlock": {
        "prototype": "BOOL VirtualUnlock(\n  LPVOID lpAddress,\n  SIZE_T dwSize\n);",
        "comment": "Unlocks a specified range of pages in the virtual address space of a process, enabling the system to swap the pages out to the paging file if necessary."
    },
    "VkKeyScan": {
        "prototype": "SHORT VkKeyScanW(\n  WCHAR ch\n);",
        "comment": "Translates a character to the corresponding virtual-key code and shift state for the current keyboard."
    },
    "VkKeyScanEx": {
        "prototype": "SHORT VkKeyScanExW(\n  WCHAR ch,\n  HKL   dwhkl\n);",
        "comment": "Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier."
    },
    "WaitCommEvent": {
        "prototype": "BOOL WaitCommEvent(\n  HANDLE       hFile,\n  LPDWORD      lpEvtMask,\n  LPOVERLAPPED lpOverlapped\n);",
        "comment": "Waits for an event to occur for a specified communications device. The set of events that are monitored by this function is contained in the event mask associated with the device handle."
    },
    "WaitForInputIdle": {
        "prototype": "DWORD WaitForInputIdle(\n  HANDLE hProcess,\n  DWORD  dwMilliseconds\n);",
        "comment": "Waits until the specified process has finished processing its initial input and is waiting for user input with no input pending, or until the time-out interval has elapsed."
    },
    "WaitForSingleObject": {
        "prototype": "DWORD WaitForSingleObject(\n  HANDLE hHandle,\n  DWORD  dwMilliseconds\n);",
        "comment": "Waits until the specified object is in the signaled state or the time-out interval elapses."
    },
    "WaitMessage": {
        "prototype": "BOOL WaitMessage();",
        "comment": "Yields control to other threads when a thread has no other messages in its message queue. The WaitMessage function suspends the thread and does not return until a new message is placed in the thread's message queue."
    },
    "waveInAddBuffer": {
        "prototype": "MMRESULT waveInAddBuffer(\n  HWAVEIN   hwi,\n  LPWAVEHDR pwh,\n  UINT      cbwh\n);",
        "comment": "The waveInAddBuffer function sends an input buffer to the given waveform-audio input device. When the buffer is filled, the application is notified."
    },
    "waveInClose": {
        "prototype": "MMRESULT waveInClose(\n  HWAVEIN hwi\n);",
        "comment": "The waveInClose function closes the given waveform-audio input device."
    },
    "waveInGetDevCaps": {
        "prototype": "MMRESULT waveInGetDevCapsW(\n  UINT         uDeviceID,\n  LPWAVEINCAPS pwic,\n  UINT         cbwic\n);",
        "comment": "The waveInGetDevCaps function retrieves the capabilities of a given waveform-audio input device."
    },
    "waveInGetErrorText": {
        "prototype": "MMRESULT waveInGetErrorTextW(\n  MMRESULT mmrError,\n  LPSTR    pszText,\n  UINT     cchText\n);",
        "comment": "The waveInGetErrorText function retrieves a textual description of the error identified by the given error number."
    },
    "waveInGetID": {
        "prototype": "MMRESULT waveInGetID(\n  HWAVEIN hwi,\n  LPUINT  puDeviceID\n);",
        "comment": "The waveInGetID function gets the device identifier for the given waveform-audio input device."
    },
    "waveInGetNumDevs": {
        "prototype": "UINT waveInGetNumDevs();",
        "comment": "The waveInGetNumDevs function returns the number of waveform-audio input devices present in the system."
    },
    "waveInGetPosition": {
        "prototype": "MMRESULT waveInGetPosition(\n  HWAVEIN  hwi,\n  LPMMTIME pmmt,\n  UINT     cbmmt\n);",
        "comment": "The waveInGetPosition function retrieves the current input position of the given waveform-audio input device."
    },
    "waveInMessage": {
        "prototype": "MMRESULT waveInMessage(\n  HWAVEIN   hwi,\n  UINT      uMsg,\n  DWORD_PTR dw1,\n  DWORD_PTR dw2\n);",
        "comment": "The waveInMessage function sends messages to the waveform-audio input device drivers."
    },
    "waveInOpen": {
        "prototype": "MMRESULT waveInOpen(\n  LPHWAVEIN       phwi,\n  UINT            uDeviceID,\n  LPCWAVEFORMATEX pwfx,\n  DWORD_PTR       dwCallback,\n  DWORD_PTR       dwInstance,\n  DWORD           fdwOpen\n);",
        "comment": "The waveInOpen function opens the given waveform-audio input device for recording."
    },
    "waveInPrepareHeader": {
        "prototype": "MMRESULT waveInPrepareHeader(\n  HWAVEIN   hwi,\n  LPWAVEHDR pwh,\n  UINT      cbwh\n);",
        "comment": "The waveInPrepareHeader function prepares a buffer for waveform-audio input."
    },
    "waveInReset": {
        "prototype": "MMRESULT waveInReset(\n  HWAVEIN hwi\n);",
        "comment": "The waveInReset function stops input on the given waveform-audio input device and resets the current position to zero."
    },
    "waveInStart": {
        "prototype": "MMRESULT waveInStart(\n  HWAVEIN hwi\n);",
        "comment": "The waveInStart function starts input on the given waveform-audio input device."
    },
    "waveInStop": {
        "prototype": "MMRESULT waveInStop(\n  HWAVEIN hwi\n);",
        "comment": "The waveInStop function stops waveform-audio input."
    },
    "waveInUnprepareHeader": {
        "prototype": "MMRESULT waveInUnprepareHeader(\n  HWAVEIN   hwi,\n  LPWAVEHDR pwh,\n  UINT      cbwh\n);",
        "comment": "The waveInUnprepareHeader function cleans up the preparation performed by the waveInPrepareHeader function. This function must be called after the device driver fills a buffer and returns it to the application. You must call this function before freeing the buffer."
    },
    "waveOutClose": {
        "prototype": "MMRESULT waveOutClose(\n  HWAVEOUT hwo\n  );",
        "comment": "The waveOutClose function closes the given waveform-audio output device."
    },
    "waveOutGetDevCaps": {
        "prototype": "MMRESULT waveOutGetDevCapsW(\n  UINT          uDeviceID,\n  LPWAVEOUTCAPS pwoc,\n  UINT          cbwoc\n);",
        "comment": "The waveOutGetDevCaps function retrieves the capabilities of a given waveform-audio output device."
    },
    "waveOutGetErrorText": {
        "prototype": "MMRESULT waveOutGetErrorTextW(\n  MMRESULT mmrError,\n  LPWSTR    pszText,\n  UINT     cchText\n);",
        "comment": "The waveOutGetErrorText function retrieves a textual description of the error identified by the given error number."
    },
    "waveOutGetID": {
        "prototype": "MMRESULT waveOutGetID(\n  HWAVEOUT hwo,\n  LPUINT   puDeviceID\n);",
        "comment": "The waveOutGetID function retrieves the device identifier for the given waveform-audio output device."
    },
    "waveOutGetNumDevs": {
        "prototype": "UINT waveOutGetNumDevs();",
        "comment": "The waveOutGetNumDevs function retrieves the number of waveform-audio output devices present in the system."
    },
    "waveOutGetPitch": {
        "prototype": "MMRESULT waveOutGetPitch(\n  HWAVEOUT hwo,\n  LPDWORD  pdwPitch\n);",
        "comment": "The waveOutGetPitch function retrieves the current pitch setting for the specified waveform-audio output device."
    },
    "waveOutGetPlaybackRate": {
        "prototype": "MMRESULT waveOutGetPlaybackRate(\n  HWAVEOUT hwo,\n  LPDWORD  pdwRate\n);",
        "comment": "The waveOutGetPlaybackRate function retrieves the current playback rate for the specified waveform-audio output device."
    },
    "waveOutGetPosition": {
        "prototype": "MMRESULT waveOutGetPosition(\n  HWAVEOUT hwo,\n  LPMMTIME pmmt,\n  UINT     cbmmt\n);",
        "comment": "The waveOutGetPosition function retrieves the current playback position of the given waveform-audio output device."
    },
    "waveOutGetVolume": {
        "prototype": "MMRESULT waveOutGetVolume(\n  HWAVEOUT hwo,\n  LPDWORD  pdwVolume\n);",
        "comment": "The waveOutGetVolume function retrieves the current volume level of the specified waveform-audio output device."
    },
    "waveOutMessage": {
        "prototype": "MMRESULT waveOutMessage(\n  HWAVEOUT  hwo,\n  UINT      uMsg,\n  DWORD_PTR dw1,\n  DWORD_PTR dw2\n);",
        "comment": "The waveOutMessage function sends messages to the waveform-audio output device drivers."
    },
    "waveOutOpen": {
        "prototype": "MMRESULT waveOutOpen(\n  LPHWAVEOUT      phwo,\n  UINT            uDeviceID,\n  LPCWAVEFORMATEX pwfx,\n  DWORD_PTR       dwCallback,\n  DWORD_PTR       dwInstance,\n  DWORD           fdwOpen\n);",
        "comment": "The waveOutOpen function opens the given waveform-audio output device for playback."
    },
    "waveOutPause": {
        "prototype": "MMRESULT waveOutPause(\n  HWAVEOUT hwo\n);",
        "comment": "The waveOutPause function pauses playback on the given waveform-audio output device. The current position is saved. Use the waveOutRestart function to resume playback from the current position."
    },
    "waveOutPrepareHeader": {
        "prototype": "MMRESULT waveOutPrepareHeader(\n  HWAVEOUT  hwo,\n  LPWAVEHDR pwh,\n  UINT      cbwh\n);",
        "comment": "The waveOutPrepareHeader function prepares a waveform-audio data block for playback."
    },
    "waveOutReset": {
        "prototype": "MMRESULT waveOutReset(\n  HWAVEOUT hwo\n);",
        "comment": "The waveOutReset function stops playback on the given waveform-audio output device and resets the current position to zero. All pending playback buffers are marked as done (WHDR_DONE) and returned to the application."
    },
    "waveOutRestart": {
        "prototype": "MMRESULT waveOutRestart(\n  HWAVEOUT hwo\n);",
        "comment": "The waveOutRestart function resumes playback on a paused waveform-audio output device."
    },
    "waveOutSetPitch": {
        "prototype": "MMRESULT waveOutSetPitch(\n  HWAVEOUT hwo,\n  DWORD    dwPitch\n);",
        "comment": "The waveOutSetPitch function sets the pitch for the specified waveform-audio output device."
    },
    "waveOutSetPlaybackRate": {
        "prototype": "MMRESULT waveOutSetPlaybackRate(\n  HWAVEOUT hwo,\n  DWORD    dwRate\n);",
        "comment": "The waveOutSetPlaybackRate function sets the playback rate for the specified waveform-audio output device."
    },
    "waveOutSetVolume": {
        "prototype": "MMRESULT waveOutSetVolume(\n  HWAVEOUT hwo,\n  DWORD    dwVolume\n);",
        "comment": "The waveOutSetVolume function sets the volume level of the specified waveform-audio output device."
    },
    "waveOutUnprepareHeader": {
        "prototype": "MMRESULT waveOutUnprepareHeader(\n  HWAVEOUT  hwo,\n  LPWAVEHDR pwh,\n  UINT      cbwh\n);",
        "comment": "The waveOutUnprepareHeader function cleans up the preparation performed by the waveOutPrepareHeader function. This function must be called after the device driver is finished with a data block. You must call this function before freeing the buffer."
    },
    "waveOutWrite": {
        "prototype": "MMRESULT waveOutWrite(\n  HWAVEOUT  hwo,\n  LPWAVEHDR pwh,\n  UINT      cbwh\n);",
        "comment": "The waveOutWrite function sends a data block to the given waveform-audio output device."
    },
    "WideCharToMultiByte": {
        "prototype": "int WideCharToMultiByte(\n  UINT   CodePage,\n  DWORD  dwFlags,\n  LPCWCH lpWideCharStr,\n  int    cchWideChar,\n  LPSTR  lpMultiByteStr,\n  int    cbMultiByte,\n  LPCCH  lpDefaultChar,\n  LPBOOL lpUsedDefaultChar\n);",
        "comment": "Maps a UTF-16 (wide character) string to a new character string. The new character string is not necessarily from a multibyte character set."
    },
    "WidenPath": {
        "prototype": "BOOL WidenPath(\n  HDC hdc\n);",
        "comment": "The WidenPath function redefines the current path as the area that would be painted if the path were stroked using the pen currently selected into the given device context."
    },
    "WindowFromDC": {
        "prototype": "HWND WindowFromDC(\n  HDC hDC\n);",
        "comment": "The WindowFromDC function returns a handle to the window associated with the specified display device context (DC). Output functions that use the specified device context draw into this window."
    },
    "WindowFromPhysicalPoint": {
        "prototype": "HWND WindowFromPhysicalPoint(\n  POINT Point\n);",
        "comment": "Retrieves a handle to the window that contains the specified physical point."
    },
    "WindowFromPoint": {
        "prototype": "HWND WindowFromPoint(\n  POINT Point\n);",
        "comment": "Retrieves a handle to the window that contains the specified point."
    },
    "WindowsCompareStringOrdinal": {
        "prototype": "HRESULT WindowsCompareStringOrdinal(\n  HSTRING string1,\n  HSTRING string2,\n  INT32   *result\n);",
        "comment": "Compares two specified HSTRING objects and returns an integer that indicates their relative position in a sort order.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsConcatString": {
        "prototype": "HRESULT WindowsConcatString(\n  HSTRING string1,\n  HSTRING string2,\n  HSTRING *newString\n);",
        "comment": "Concatenates two specified strings.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsCreateString": {
        "prototype": "HRESULT WindowsCreateString(\n  PCNZWCH sourceString,\n  UINT32  length,\n  HSTRING *string\n);",
        "comment": "Creates a new HSTRING based on the specified source string.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsDeleteString": {
        "prototype": "HRESULT WindowsDeleteString(\n  HSTRING string\n);",
        "comment": "Decrements the reference count of a string buffer.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsDeleteStringBuffer": {
        "prototype": "HRESULT WindowsDeleteStringBuffer(\n  HSTRING_BUFFER bufferHandle\n);",
        "comment": "Discards a preallocated string buffer if it was not promoted to an HSTRING.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsDuplicateString": {
        "prototype": "HRESULT WindowsDuplicateString(\n  HSTRING string,\nHSTRING *newString\n);",
        "comment": "Creates a copy of the specified string.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsGetStringLen": {
        "prototype": "UINT32 WindowsGetStringLen(\n  HSTRING string\n);",
        "comment": "Gets the length, in Unicode characters, of the specified string.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsGetStringRawBuffer": {
        "prototype": "PCWSTR WindowsGetStringRawBuffer(\n  HSTRING string,\n  UINT32  *length\n);",
        "comment": "Retrieves the backing buffer for the specified string.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsIsStringEmpty": {
        "prototype": "BOOL WindowsIsStringEmpty(\n  HSTRING string\n);",
        "comment": "Indicates whether the specified string is the empty string.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsPreallocateStringBuffer": {
        "prototype": "HRESULT WindowsPreallocateStringBuffer(\n  UINT32         length,\n  WCHAR          **charBuffer,\n  HSTRING_BUFFER *bufferHandle\n);",
        "comment": "Allocates a mutable character buffer for use in HSTRING creation.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsPromoteStringBuffer": {
        "prototype": "HRESULT WindowsPromoteStringBuffer(\n  HSTRING_BUFFER bufferHandle,\n  HSTRING        *string\n);",
        "comment": "Creates an HSTRING from the specified HSTRING_BUFFER.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsReplaceString": {
        "prototype": "HRESULT WindowsReplaceString(\n  HSTRING string,\n  HSTRING stringReplaced,\n  HSTRING stringReplaceWith,\n  HSTRING *newString\n);",
        "comment": "Replaces all occurrences of a set of characters in the specified string with another set of characters to create a new string.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsStringHasEmbeddedNull": {
        "prototype": "HRESULT WindowsStringHasEmbeddedNull(\n  HSTRING string,\n  BOOL    *hasEmbedNull);",
        "comment": "Indicates whether the specified string has embedded null characters.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsSubstring": {
        "prototype": "HRESULT WindowsSubstring(\n  HSTRING string,\n  UINT32  startIndex,\n  HSTRING *newString\n);",
        "comment": "Retrieves a substring from the specified string. The substring starts at the specified character position.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsSubstringWithSpecifiedLength": {
        "prototype": "HRESULT WindowsSubstringWithSpecifiedLength(\n  HSTRING string,\n  UINT32  startIndex,\n  UINT32  length,\n  HSTRING *newString\n);",
        "comment": "Retrieves a substring from the specified string. The substring starts at a specified character position and has a specified length.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsTrimStringEnd": {
        "prototype": "HRESULT WindowsTrimStringEnd(\n  HSTRING string,\n  HSTRING trimString,\n  HSTRING *newString\n);",
        "comment": "Removes all trailing occurrences of a specified set of characters from the source string.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WindowsTrimStringStart": {
        "prototype": "HRESULT WindowsTrimStringStart(\n  HSTRING string,\n  HSTRING trimString,\n  HSTRING *newString\n);",
        "comment": "Removes all leading occurrences of a specified set of characters from the source string.",
        "category": "winrt",
        "minimumWindowsVersion": "WIN8"
    },
    "WlanAllocateMemory": {
        "prototype": "PVOID WlanAllocateMemory(\n  DWORD dwMemorySize\n);",
        "comment": "The WlanAllocateMemory function allocates memory. Any memory passed to other Native Wifi functions must be allocated with this function."
    },
    "WlanCloseHandle": {
        "prototype": "DWORD WlanCloseHandle(\n  HANDLE hClientHandle,\n  PVOID  pReserved\n);",
        "comment": "The WlanCloseHandle function closes a connection to the server."
    },
    "WlanConnect": {
        "prototype": "DWORD WlanConnect(\n  HANDLE                            hClientHandle,\n  const GUID                        *pInterfaceGuid,\n  const PWLAN_CONNECTION_PARAMETERS pConnectionParameters,\n  PVOID                             pReserved\n);",
        "comment": "The WlanConnect function attempts to connect to a specific network."
    },
    "WlanDeleteProfile": {
        "prototype": "DWORD WlanDeleteProfile(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  LPCWSTR    strProfileName,\n  PVOID      pReserved\n);",
        "comment": "The WlanDeleteProfile function deletes a wireless profile for a wireless interface on the local computer."
    },
    "WlanDeviceServiceCommand": {
        "prototype": "DWORD WlanDeviceServiceCommand(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  LPGUID     pDeviceServiceGuid,\n  DWORD      dwOpCode,\n  DWORD      dwInBufferSize,\n  PVOID      pInBuffer,\n  DWORD      dwOutBufferSize,\n  PVOID      pOutBuffer,\n  PDWORD     pdwBytesReturned\n);",
        "comment": "Allows an original equipment manufacturer (OEM) or independent hardware vendor (IHV) component to communicate with a device service on a particular wireless LAN interface."
    },
    "WlanDisconnect": {
        "prototype": "DWORD WlanDisconnect(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  PVOID      pReserved\n);",
        "comment": "The WlanDisconnect function disconnects an interface from its current network."
    },
    "WlanEnumInterfaces": {
        "prototype": "DWORD WlanEnumInterfaces(\n  HANDLE                    hClientHandle,\n  PVOID                     pReserved,\n  PWLAN_INTERFACE_INFO_LIST *ppInterfaceList\n);",
        "comment": "The WlanEnumInterfaces function enumerates all of the wireless LAN interfaces currently enabled on the local computer."
    },
    "WlanExtractPsdIEDataList": {
        "prototype": "DWORD WlanExtractPsdIEDataList(\n  HANDLE              hClientHandle,\n  DWORD               dwIeDataSize,\n  const PBYTE         pRawIeData,\n  LPCWSTR             strFormat,\n  PVOID               pReserved,\n  PWLAN_RAW_DATA_LIST *ppPsdIEDataList\n);",
        "comment": "The WlanExtractPsdIEDataList function extracts the proximity service discovery (PSD) information element (IE) data list from raw IE data included in a beacon."
    },
    "WlanFreeMemory": {
        "prototype": "void WlanFreeMemory(\n  PVOID pMemory\n);",
        "comment": "The WlanFreeMemory function frees memory. Any memory returned from Native Wifi functions must be freed."
    },
    "WlanGetAvailableNetworkList": {
        "prototype": "DWORD WlanGetAvailableNetworkList(\n  HANDLE                       hClientHandle,\n  const GUID                   *pInterfaceGuid,\n  DWORD                        dwFlags,\n  PVOID                        pReserved,\n  PWLAN_AVAILABLE_NETWORK_LIST *ppAvailableNetworkList\n);",
        "comment": "The WlanGetAvailableNetworkList function retrieves the list of available networks on a wireless LAN interface."
    },
    "WlanGetFilterList": {
        "prototype": "DWORD WlanGetFilterList(\n  HANDLE                hClientHandle,\n  WLAN_FILTER_LIST_TYPE wlanFilterListType,\n  PVOID                 pReserved,\n  PDOT11_NETWORK_LIST   *ppNetworkList\n);",
        "comment": "The WlanGetFilterList function retrieves a group policy or user permission list."
    },
    "WlanGetInterfaceCapability": {
        "prototype": "DWORD WlanGetInterfaceCapability(\n  HANDLE                     hClientHandle,\n  const GUID                 *pInterfaceGuid,\n  PVOID                      pReserved,\n  PWLAN_INTERFACE_CAPABILITY *ppCapability\n);",
        "comment": "The WlanGetInterfaceCapability function retrieves the capabilities of an interface."
    },
    "WlanGetNetworkBssList": {
        "prototype": "DWORD WlanGetNetworkBssList(\n  HANDLE            hClientHandle,\n  const GUID        *pInterfaceGuid,\n  const PDOT11_SSID pDot11Ssid,\n  DOT11_BSS_TYPE    dot11BssType,\n  BOOL              bSecurityEnabled,\n  PVOID             pReserved,\n  PWLAN_BSS_LIST    *ppWlanBssList\n);",
        "comment": "The WlanGetNetworkBssList function retrieves a list of the basic service set (BSS) entries of the wireless network or networks on a given wireless LAN interface."
    },
    "WlanGetProfile": {
        "prototype": "DWORD WlanGetProfile(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  LPCWSTR    strProfileName,\n  PVOID      pReserved,\n  LPWSTR     *pstrProfileXml,\n  DWORD      *pdwFlags,\n  DWORD      *pdwGrantedAccess\n);",
        "comment": "The WlanGetProfile function retrieves all information about a specified wireless profile."
    },
    "WlanGetProfileCustomUserData": {
        "prototype": "DWORD WlanGetProfileCustomUserData(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  LPCWSTR    strProfileName,\n  PVOID      pReserved,\n  DWORD      *pdwDataSize,\n  PBYTE      *ppData\n);",
        "comment": "The WlanGetProfileCustomUserData function gets the custom user data associated with a wireless profile."
    },
    "WlanGetProfileList": {
        "prototype": "DWORD WlanGetProfileList(\n  HANDLE                  hClientHandle,\n  const GUID              *pInterfaceGuid,\n  PVOID                   pReserved,\n  PWLAN_PROFILE_INFO_LIST *ppProfileList\n);",
        "comment": "The WlanGetProfileList function retrieves the list of profiles in preference order."
    },
    "WlanGetSecuritySettings": {
        "prototype": "DWORD WlanGetSecuritySettings(\n  HANDLE                  hClientHandle,\n  WLAN_SECURABLE_OBJECT   SecurableObject,\n  PWLAN_OPCODE_VALUE_TYPE pValueType,\n  LPWSTR                  *pstrCurrentSDDL,\n  PDWORD                  pdwGrantedAccess\n);",
        "comment": "The WlanGetSecuritySettings function gets the security settings associated with a configurable object."
    },
    "WlanGetSupportedDeviceServices": {
        "prototype": "DWORD WlanGetSupportedDeviceServices(\n  HANDLE                         hClientHandle,\n  const GUID                     *pInterfaceGuid,\n  PWLAN_DEVICE_SERVICE_GUID_LIST *ppDevSvcGuidList\n);",
        "comment": "Retrieves a list of the supported device services on a given wireless LAN interface."
    },
    "WlanHostedNetworkForceStart": {
        "prototype": "DWORD WlanHostedNetworkForceStart(\n  HANDLE                      hClientHandle,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkForceStart function transitions the wireless Hosted Network to the wlan_hosted_network_active state without associating the request with the application's calling handle."
    },
    "WlanHostedNetworkForceStop": {
        "prototype": "DWORD WlanHostedNetworkForceStop(\n  HANDLE                      hClientHandle,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkForceStop function transitions the wireless Hosted Network to the wlan_hosted_network_idle without associating the request with the application's calling handle."
    },
    "WlanHostedNetworkInitSettings": {
        "prototype": "DWORD WlanHostedNetworkInitSettings(\n  HANDLE                      hClientHandle,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkInitSettings function configures and persists to storage the network connection settings (SSID and maximum number of peers, for example) on the wireless Hosted Network if these settings are not already configured."
    },
    "WlanHostedNetworkQueryProperty": {
        "prototype": "DWORD WlanHostedNetworkQueryProperty(\n  HANDLE                     hClientHandle,\n  WLAN_HOSTED_NETWORK_OPCODE OpCode,\n  PDWORD                     pdwDataSize,\n  PVOID                      *ppvData,\n  PWLAN_OPCODE_VALUE_TYPE    pWlanOpcodeValueType,\n  PVOID                      pvReserved\n);",
        "comment": "The WlanHostedNetworkQueryProperty function queries the current static properties of the wireless Hosted Network."
    },
    "WlanHostedNetworkQuerySecondaryKey": {
        "prototype": "DWORD WlanHostedNetworkQuerySecondaryKey(\n  HANDLE                      hClientHandle,\n  PDWORD                      pdwKeyLength,\n  PUCHAR                      *ppucKeyData,\n  PBOOL                       pbIsPassPhrase,\n  PBOOL                       pbPersistent,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkQuerySecondaryKey function queries the secondary security key that is configured to be used by the wireless Hosted Network."
    },
    "WlanHostedNetworkQueryStatus": {
        "prototype": "DWORD WlanHostedNetworkQueryStatus(\n  HANDLE                      hClientHandle,\n  PWLAN_HOSTED_NETWORK_STATUS *ppWlanHostedNetworkStatus,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkQueryStatus function queries the current status of the wireless Hosted Network."
    },
    "WlanHostedNetworkRefreshSecuritySettings": {
        "prototype": "DWORD WlanHostedNetworkRefreshSecuritySettings(\n  HANDLE                      hClientHandle,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkRefreshSecuritySettings function refreshes the configurable and auto-generated parts of the wireless Hosted Network security settings."
    },
    "WlanHostedNetworkSetProperty": {
        "prototype": "DWORD WlanHostedNetworkSetProperty(\n  HANDLE                      hClientHandle,\n  WLAN_HOSTED_NETWORK_OPCODE  OpCode,\n  DWORD                       dwDataSize,\n  PVOID                       pvData,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkSetProperty function sets static properties of the wireless Hosted Network."
    },
    "WlanHostedNetworkSetSecondaryKey": {
        "prototype": "DWORD WlanHostedNetworkSetSecondaryKey(\n  HANDLE                      hClientHandle,\n  DWORD                       dwKeyLength,\n  PUCHAR                      pucKeyData,\n  BOOL                        bIsPassPhrase,\n  BOOL                        bPersistent,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkSetSecondaryKey function configures the secondary security key that will be used by the wireless Hosted Network."
    },
    "WlanHostedNetworkStartUsing": {
        "prototype": "DWORD WlanHostedNetworkStartUsing(\n  HANDLE                      hClientHandle,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkStartUsing function starts the wireless Hosted Network."
    },
    "WlanHostedNetworkStopUsing": {
        "prototype": "DWORD WlanHostedNetworkStopUsing(\n  HANDLE                      hClientHandle,\n  PWLAN_HOSTED_NETWORK_REASON pFailReason,\n  PVOID                       pvReserved\n);",
        "comment": "The WlanHostedNetworkStopUsing function stops the wireless Hosted Network."
    },
    "WlanIhvControl": {
        "prototype": "DWORD WlanIhvControl(\n  HANDLE                hClientHandle,\n  const GUID            *pInterfaceGuid,\n  WLAN_IHV_CONTROL_TYPE Type,\n  DWORD                 dwInBufferSize,\n  PVOID                 pInBuffer,\n  DWORD                 dwOutBufferSize,\n  PVOID                 pOutBuffer,\n  PDWORD                pdwBytesReturned\n);",
        "comment": "The WlanIhvControl function provides a mechanism for independent hardware vendor (IHV) control of WLAN drivers or services."
    },
    "WlanOpenHandle": {
        "prototype": "DWORD WlanOpenHandle(\n  DWORD   dwClientVersion,\n  PVOID   pReserved,\n  PDWORD  pdwNegotiatedVersion,\n  PHANDLE phClientHandle\n);",
        "comment": "The WlanOpenHandle function opens a connection to the server."
    },
    "WlanQueryAutoConfigParameter": {
        "prototype": "DWORD WlanQueryAutoConfigParameter(\n  HANDLE                  hClientHandle,\n  WLAN_AUTOCONF_OPCODE    OpCode,\n  PVOID                   pReserved,\n  PDWORD                  pdwDataSize,\n  PVOID                   *ppData,\n  PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType\n);",
        "comment": "The WlanQueryAutoConfigParameter function queries for the parameters of the auto configuration service."
    },
    "WlanQueryInterface": {
        "prototype": "DWORD WlanQueryInterface(\n  HANDLE                  hClientHandle,\n  const GUID              *pInterfaceGuid,\n  WLAN_INTF_OPCODE        OpCode,\n  PVOID                   pReserved,\n  PDWORD                  pdwDataSize,\n  PVOID                   *ppData,\n  PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType\n);",
        "comment": "The WlanQueryInterface function queries various parameters of a specified interface."
    },
    "WlanReasonCodeToString": {
        "prototype": "DWORD WlanReasonCodeToString(\n  DWORD  dwReasonCode,\n  DWORD  dwBufferSize,\n  PWCHAR pStringBuffer,\n  PVOID  pReserved\n);",
        "comment": "The WlanReasonCodeToString function retrieves a string that describes a specified reason code."
    },
    "WlanRegisterDeviceServiceNotification": {
        "prototype": "DWORD WlanRegisterDeviceServiceNotification(\n  HANDLE                               hClientHandle,\n  const PWLAN_DEVICE_SERVICE_GUID_LIST pDevSvcGuidList\n);",
        "comment": "Allows user mode clients with admin privileges, or User-Mode Driver Framework (UMDF) drivers, to register for unsolicited notifications corresponding to device services that they're interested in."
    },
    "WlanRegisterNotification": {
        "prototype": "DWORD WlanRegisterNotification(\n  HANDLE                     hClientHandle,\n  DWORD                      dwNotifSource,\n  BOOL                       bIgnoreDuplicate,\n  WLAN_NOTIFICATION_CALLBACK funcCallback,\n  PVOID                      pCallbackContext,\n  PVOID                      pReserved,\n  PDWORD                     pdwPrevNotifSource\n);",
        "comment": "The WlanRegisterNotification function is used to register and unregister notifications on all wireless interfaces."
    },
    "WlanRegisterVirtualStationNotification": {
        "prototype": "DWORD WlanRegisterVirtualStationNotification(\n  HANDLE hClientHandle,\n  BOOL   bRegister,\n  PVOID  pReserved\n);",
        "comment": "The WlanRegisterVirtualStationNotification function is used to register and unregister notifications on a virtual station."
    },
    "WlanRenameProfile": {
        "prototype": "DWORD WlanRenameProfile(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  LPCWSTR    strOldProfileName,\n  LPCWSTR    strNewProfileName,\n  PVOID      pReserved\n);",
        "comment": "The WlanRenameProfile function renames the specified profile."
    },
    "WlanSaveTemporaryProfile": {
        "prototype": "DWORD WlanSaveTemporaryProfile(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  LPCWSTR    strProfileName,\n  LPCWSTR    strAllUserProfileSecurity,\n  DWORD      dwFlags,\n  BOOL       bOverWrite,\n  PVOID      pReserved\n);",
        "comment": "The WlanSaveTemporaryProfile function saves a temporary profile to the profile store."
    },
    "WlanScan": {
        "prototype": "DWORD WlanScan(\n  HANDLE               hClientHandle,\n  const GUID           *pInterfaceGuid,\n  const PDOT11_SSID    pDot11Ssid,\n  const PWLAN_RAW_DATA pIeData,\n  PVOID                pReserved\n);",
        "comment": "The WlanScan function requests a scan for available networks on the indicated interface."
    },
    "WlanSetAutoConfigParameter": {
        "prototype": "DWORD WlanSetAutoConfigParameter(\n  HANDLE               hClientHandle,\n  WLAN_AUTOCONF_OPCODE OpCode,\n  DWORD                dwDataSize,\n  const PVOID          pData,\n  PVOID                pReserved\n);",
        "comment": "The WlanSetAutoConfigParameter function sets parameters for the automatic configuration service."
    },
    "WlanSetFilterList": {
        "prototype": "DWORD WlanSetFilterList(\n  HANDLE                    hClientHandle,\n  WLAN_FILTER_LIST_TYPE     wlanFilterListType,\n  const PDOT11_NETWORK_LIST pNetworkList,\n  PVOID                     pReserved\n);",
        "comment": "The WlanSetFilterList function sets the permit/deny list."
    },
    "WlanSetInterface": {
        "prototype": "DWORD WlanSetInterface(\n  HANDLE           hClientHandle,\n  const GUID       *pInterfaceGuid,\n  WLAN_INTF_OPCODE OpCode,\n  DWORD            dwDataSize,\n  const PVOID      pData,\n  PVOID            pReserved\n);",
        "comment": "The WlanSetInterface function sets user-configurable parameters for a specified interface."
    },
    "WlanSetProfile": {
        "prototype": "DWORD WlanSetProfile(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  DWORD      dwFlags,\n  LPCWSTR    strProfileXml,\n  LPCWSTR    strAllUserProfileSecurity,\n  BOOL       bOverwrite,\n  PVOID      pReserved,\n  DWORD      *pdwReasonCode\n);",
        "comment": "The WlanSetProfile function sets the content of a specific profile."
    },
    "WlanSetProfileCustomUserData": {
        "prototype": "DWORD WlanSetProfileCustomUserData(\n  HANDLE      hClientHandle,\n  const GUID  *pInterfaceGuid,\n  LPCWSTR     strProfileName,\n  DWORD       dwDataSize,\n  const PBYTE pData,\n  PVOID       pReserved\n);",
        "comment": "The WlanSetProfileCustomUserData function sets the custom user data associated with a profile."
    },
    "WlanSetProfileEapUserData": {
        "prototype": "DWORD WlanSetProfileEapUserData(\n  HANDLE          hClientHandle,\n  const GUID      *pInterfaceGuid,\n  LPCWSTR         strProfileName,\n  EAP_METHOD_TYPE eapType,\n  DWORD           dwFlags,\n  DWORD           dwEapUserDataSize,\n  const LPBYTE    pbEapUserData,\n  PVOID           pReserved\n);",
        "comment": "The WlanSetProfileEapUserData function sets the Extensible Authentication Protocol (EAP) user credentials as specified by raw EAP data. The user credentials apply to a profile on an interface."
    },
    "WlanSetProfileEapXmlUserData": {
        "prototype": "DWORD WlanSetProfileEapXmlUserData(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  LPCWSTR    strProfileName,\n  DWORD      dwFlags,\n  LPCWSTR    strEapXmlUserData,\n  PVOID      pReserved\n);",
        "comment": "The WlanSetProfileEapXmlUserData function sets the Extensible Authentication Protocol (EAP) user credentials as specified by an XML string. The user credentials apply to a profile on an adapter. These credentials can be used only by the caller."
    },
    "WlanSetProfileList": {
        "prototype": "DWORD WlanSetProfileList(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  DWORD      dwItems,\n  LPCWSTR    *strProfileNames,\n  PVOID      pReserved\n);",
        "comment": "The WlanSetProfileList function sets the preference order of profiles for a given interface."
    },
    "WlanSetProfilePosition": {
        "prototype": "DWORD WlanSetProfilePosition(\n  HANDLE     hClientHandle,\n  const GUID *pInterfaceGuid,\n  LPCWSTR    strProfileName,\n  DWORD      dwPosition,\n  PVOID      pReserved\n);",
        "comment": "The WlanSetProfilePosition function sets the position of a single, specified profile in the preference list."
    },
    "WlanSetPsdIEDataList": {
        "prototype": "DWORD WlanSetPsdIEDataList(\n  HANDLE                    hClientHandle,\n  LPCWSTR                   strFormat,\n  const PWLAN_RAW_DATA_LIST pPsdIEDataList,\n  PVOID                     pReserved\n);",
        "comment": "The WlanSetPsdIeDataList function sets the proximity service discovery (PSD) information element (IE) data list."
    },
    "WlanSetSecuritySettings": {
        "prototype": "DWORD WlanSetSecuritySettings(\n  HANDLE                hClientHandle,\n  WLAN_SECURABLE_OBJECT SecurableObject,\n  LPCWSTR               strModifiedSDDL\n);",
        "comment": "The WlanGetProfileList function sets the security settings for a configurable object."
    },
    "Wow64SuspendThread": {
        "prototype": "DWORD Wow64SuspendThread(\n  HANDLE hThread\n);",
        "comment": "Suspends the specified WOW64 thread."
    },
    "WriteConsole": {
        "prototype": "BOOL WriteConsoleW(\n  _In_             HANDLE  hConsoleOutput,\n  _In_       const VOID    *lpBuffer,\n  _In_             DWORD   nNumberOfCharsToWrite,\n  _Out_opt_        LPDWORD lpNumberOfCharsWritten,\n  _Reserved_       LPVOID  lpReserved\n);",
        "comment": "Writes a character string to a console screen buffer beginning at the current cursor location."
    },
    "WriteFile": {
        "prototype": "BOOL WriteFile(\n  HANDLE       hFile,\n  LPCVOID      lpBuffer,\n  DWORD        nNumberOfBytesToWrite,\n  LPDWORD      lpNumberOfBytesWritten,\n  LPOVERLAPPED lpOverlapped\n);",
        "comment": "Writes data to the specified file or input/output (I/O) device."
    },
    "WriteFileEx": {
        "prototype": "BOOL WriteFileEx(\n  [in]           HANDLE                          hFile,\n  [in, optional] LPCVOID                         lpBuffer,\n  [in]           DWORD                           nNumberOfBytesToWrite,\n  [in, out]      LPOVERLAPPED                    lpOverlapped,\n  [in]           LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine\n);",
        "comment": "Writes data to the specified file or input/output (I/O) device. It reports its completion status asynchronously, calling the specified completion routine when writing is completed or canceled and the calling thread is in an alertable wait state."
    },
    "WriteFileGather": {
        "prototype": "BOOL WriteFileGather(\n  [in]      HANDLE                  hFile,\n  [in]      FILE_SEGMENT_ELEMENT [] aSegmentArray,\n  [in]      DWORD                   nNumberOfBytesToWrite,\n            LPDWORD                 lpReserved,\n  [in, out] LPOVERLAPPED            lpOverlapped\n);",
        "comment": "Retrieves data from an array of buffers and writes the data to a file. The function starts writing data to the file at a position that is specified by an OVERLAPPED structure. The WriteFileGather function operates asynchronously."
    },
    "WritePrinter": {
        "prototype": "BOOL WritePrinter(\n  _In_  HANDLE  hPrinter,\n  _In_  LPVOID  pBuf,\n  _In_  DWORD   cbBuf,\n  _Out_ LPDWORD pcWritten\n);",
        "comment": "The WritePrinter function notifies the print spooler that data should be written to the specified printer.",
        "category": "winspool"
    },
    "WriteProcessMemory": {
        "prototype": "BOOL WriteProcessMemory(\n  HANDLE  hProcess,\n  LPVOID  lpBaseAddress,\n  LPCVOID lpBuffer,\n  SIZE_T  nSize,\n  SIZE_T  *lpNumberOfBytesWritten\n);",
        "comment": "Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails."
    },
    "WslConfigureDistribution": {
        "prototype": "HRESULT WslConfigureDistribution(\n  _In_ PCWSTR distributionName,\n  _In_ ULONG defaultUID,\n  WSL_DISTRIBUTION_FLAGS wslDistributionFlags\n);",
        "comment": "Modifies the behavior of a distribution registered with the Windows Subsystem for Linux (WSL).",
        "category": "wslapi",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "WslGetDistributionConfiguration": {
        "prototype": "HRESULT WslGetDistributionConfiguration(\n  _In_ PCWSTR distributionName,\n  _Out_ ULONG *distributionVersion,\n  _Out_ ULONG *defaultUID,\n  _Out_ WSL_DISTRIBUTION_FLAGS *wslDistributionFlags,\n  _Outptr_result_buffer_ PSTR **defaultEnvironmentVariables,\n  _Out_ ULONG *defaultEnvironmentVariableCount\n);",
        "comment": "Retrieves the current configuration of a distribution registered with the Windows Subsystem for Linux (WSL).",
        "category": "wslapi",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "WslIsDistributionRegistered": {
        "prototype": "BOOL WslIsDistributionRegistered(\n  _In_ PCWSTR distributionName\n);",
        "comment": "Determines if a distribution is registered with the Windows Subsystem for Linux (WSL).",
        "category": "wslapi",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "WslLaunch": {
        "prototype": "HRESULT WslLaunch(\n  _In_ PCWSTR distributionName,\n  _In_opt_ PCWSTR command,\n  _In_ BOOL useCurrentWorkingDirectory,\n  _In_ HANDLE stdIn,\n  _In_ HANDLE stdOut,\n  _In_      HANDLE  stdErr,\n  _Out_     HANDLE  *process\n);",
        "comment": "Launches a Windows Subsystem for Linux (WSL) process in the context of a particular distribution.",
        "category": "wslapi",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "WslLaunchInteractive": {
        "prototype": "HRESULT WslLaunchInteractive(\n  _In_ PCWSTR distributionName,\n  _In_opt_ command,\n  _In_ BOOL useCurrentWorkingDirectory,\n  _Out_ DWORD *exitCode\n);",
        "comment": "Launches an interactive Windows Subsystem for Linux (WSL) process in the context of a particular distribution.This differs from WslLaunch in that the end user will be able to interact with the newly-created process.",
        "category": "wslapi",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "WslRegisterDistribution": {
        "prototype": "HRESULT WslRegisterDistribution(\n  _In_ PCWSTR distributionName,\n  _In_ PCWSTR tarGzFilename\n);",
        "comment": "Registers a new distribution with the Windows Subsystem for Linux (WSL).",
        "category": "wslapi",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "WslUnregisterDistribution": {
        "prototype": "HRESULT WslUnregisterDistribution(\n  _In_ PCWSTR distributionName\n);",
        "comment": "Unregisters a distribution from the Windows Subsystem for Linux (WSL).",
        "category": "wslapi",
        "minimumWindowsVersion": "WIN10_20H1"
    },
    "WTSRegisterSessionNotification": {
        "prototype": "BOOL WTSRegisterSessionNotification(\n  [in] HWND  hWnd,\n  [in] DWORD dwFlags\n);",
        "comment": "Registers the specified window to receive session change notifications."
    },
    "WTSUnRegisterSeessionNotification": {
        "prototype": "BOOL WTSUnRegisterSessionNotification(\n  [in] HWND hWnd\n);",
        "comment": "Unregisters the specified window so that it receives no further session change notifications."
    },
    "XInputEnable": {
        "prototype": "void XInputEnable(\n  [in] BOOL enable\n);",
        "comment": "Sets the reporting state of XInput.",
        "category": "xinput",
        "minimumWindowsVersion": "WIN8"
    },
    "XInputGetAudioDeviceIds": {
        "prototype": "DWORD XInputGetAudioDeviceIds(\n  [in]                DWORD  dwUserIndex,\n  [out, optional]     LPWSTR pRenderDeviceId,\n  [in, out, optional] UINT   *pRenderCount,\n  [out, optional]     LPWSTR pCaptureDeviceId,\n  [in, out, optional] UINT   *pCaptureCount\n);",
        "comment": "Retrieves the sound rendering and sound capture audio device IDs that are associated with the headset connected to the specified controller.",
        "category": "xinput",
        "minimumWindowsVersion": "WIN8"
    },
    "XInputGetBatteryInformation": {
        "prototype": "DWORD XInputGetBatteryInformation(\n  [in]  DWORD                      dwUserIndex,\n  [in]  BYTE                       devType,\n  [out] XINPUT_BATTERY_INFORMATION *pBatteryInformation\n);",
        "comment": "Retrieves the battery type and charge status of a wireless controller.",
        "category": "xinput",
        "minimumWindowsVersion": "WIN8"
    },
    "XInputGetCapabilities": {
        "prototype": "DWORD XInputGetCapabilities(\n  [in]  DWORD               dwUserIndex,\n  [in]  DWORD               dwFlags,\n  [out] XINPUT_CAPABILITIES *pCapabilities\n);",
        "comment": "Retrieves the capabilities and features of a connected controller.",
        "category": "xinput",
        "minimumWindowsVersion": "WIN8"
    },
    "XInputGetKeystroke": {
        "prototype": "DWORD XInputGetKeystroke(\n  DWORD             dwUserIndex,\n  DWORD             dwReserved,\n  PXINPUT_KEYSTROKE pKeystroke\n);",
        "comment": "Retrieves a gamepad input event.",
        "category": "xinput",
        "minimumWindowsVersion": "WIN8"
    },
    "XInputGetState": {
        "prototype": "DWORD XInputGetState(\n  [in]  DWORD        dwUserIndex,\n  [out] XINPUT_STATE *pState\n);",
        "comment": "Retrieves the current state of the specified controller.",
        "category": "xinput",
        "minimumWindowsVersion": "WIN8"
    },
    "XInputSetState": {
        "prototype": "DWORD XInputSetState(\n  [in]      DWORD            dwUserIndex,\n  [in, out] XINPUT_VIBRATION *pVibration\n);",
        "comment": "Sends data to a connected controller. This function is used to activate the vibration function of a controller.",
        "category": "xinput",
        "minimumWindowsVersion": "WIN8"
    }
}